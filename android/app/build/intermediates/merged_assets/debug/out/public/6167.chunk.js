"use strict";(self.webpackChunkstudent_mis_mobile_app=self.webpackChunkstudent_mis_mobile_app||[]).push([[6167],{86167:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"createSwipeBackGesture\": () => (/* binding */ createSwipeBackGesture)\n});\n\n// EXTERNAL MODULE: ./node_modules/@ionic/core/components/helpers.js\nvar helpers = __webpack_require__(96587);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/dir.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nconst isRTL = (hostEl) => {\n  if (hostEl) {\n    if (hostEl.dir !== '') {\n      return hostEl.dir.toLowerCase() === 'rtl';\n    }\n  }\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/gesture-controller.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nclass GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n  createGesture(config) {\n    return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n    const requestedStart = this.requestedStart;\n    let maxPriority = -10000;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', { detail: { gestureName } });\n      document.dispatchEvent(event);\n      return true;\n    }\n    requestedStart.delete(id);\n    return false;\n  }\n  release(id) {\n    this.requestedStart.delete(id);\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n    set.add(id);\n  }\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n    return true;\n  }\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n    return false;\n  }\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n}\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.canStart(this.name);\n  }\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n    return captured;\n  }\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n}\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n}\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/index2.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\nconst addEventListener = (el, eventName, callback, opts) => {\n  // use event listener options when supported\n  // otherwise it's just a boolean for the \"capture\" arg\n  const listenerOpts = supportsPassive(el) ? {\n    'capture': !!opts.capture,\n    'passive': !!opts.passive,\n  } : !!opts.capture;\n  let add;\n  let remove;\n  if (el['__zone_symbol__addEventListener']) {\n    add = '__zone_symbol__addEventListener';\n    remove = '__zone_symbol__removeEventListener';\n  }\n  else {\n    add = 'addEventListener';\n    remove = 'removeEventListener';\n  }\n  el[add](eventName, callback, listenerOpts);\n  return () => {\n    el[remove](eventName, callback, listenerOpts);\n  };\n};\nconst supportsPassive = (node) => {\n  if (_sPassive === undefined) {\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get: () => {\n          _sPassive = true;\n        }\n      });\n      node.addEventListener('optsTest', () => { return; }, opts);\n    }\n    catch (e) {\n      _sPassive = false;\n    }\n  }\n  return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n  let rmTouchStart;\n  let rmTouchMove;\n  let rmTouchEnd;\n  let rmTouchCancel;\n  let rmMouseStart;\n  let rmMouseMove;\n  let rmMouseUp;\n  let lastTouchEvent = 0;\n  const handleTouchStart = (ev) => {\n    lastTouchEvent = Date.now() + MOUSE_WAIT;\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmTouchMove && pointerMove) {\n      rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n    }\n    /**\n     * Events are dispatched on the element that is tapped and bubble up to\n     * the reference element in the gesture. In the event that the element this\n     * event was first dispatched on is removed from the DOM, the event will no\n     * longer bubble up to our reference element. This leaves the gesture in an\n     * unusable state. To account for this, the touchend and touchcancel listeners\n     * should be added to the event target so that they still fire even if the target\n     * is removed from the DOM.\n     */\n    if (!rmTouchEnd) {\n      rmTouchEnd = addEventListener(ev.target, 'touchend', handleTouchEnd, options);\n    }\n    if (!rmTouchCancel) {\n      rmTouchCancel = addEventListener(ev.target, 'touchcancel', handleTouchEnd, options);\n    }\n  };\n  const handleMouseDown = (ev) => {\n    if (lastTouchEvent > Date.now()) {\n      return;\n    }\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmMouseMove && pointerMove) {\n      rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n    }\n    if (!rmMouseUp) {\n      rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n    }\n  };\n  const handleTouchEnd = (ev) => {\n    stopTouch();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const handleMouseUp = (ev) => {\n    stopMouse();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const stopTouch = () => {\n    if (rmTouchMove) {\n      rmTouchMove();\n    }\n    if (rmTouchEnd) {\n      rmTouchEnd();\n    }\n    if (rmTouchCancel) {\n      rmTouchCancel();\n    }\n    rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n  };\n  const stopMouse = () => {\n    if (rmMouseMove) {\n      rmMouseMove();\n    }\n    if (rmMouseUp) {\n      rmMouseUp();\n    }\n    rmMouseMove = rmMouseUp = undefined;\n  };\n  const stop = () => {\n    stopTouch();\n    stopMouse();\n  };\n  const enable = (isEnabled = true) => {\n    if (!isEnabled) {\n      if (rmTouchStart) {\n        rmTouchStart();\n      }\n      if (rmMouseStart) {\n        rmMouseStart();\n      }\n      rmTouchStart = rmMouseStart = undefined;\n      stop();\n    }\n    else {\n      if (!rmTouchStart) {\n        rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n      }\n      if (!rmMouseStart) {\n        rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n      }\n    }\n  };\n  const destroy = () => {\n    enable(false);\n    pointerUp = pointerMove = pointerDown = undefined;\n  };\n  return {\n    enable,\n    stop,\n    destroy\n  };\n};\nconst getDocument = (node) => {\n  return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n  const radians = maxAngle * (Math.PI / 180);\n  const isDirX = direction === 'x';\n  const maxCosine = Math.cos(radians);\n  const threshold = thresh * thresh;\n  let startX = 0;\n  let startY = 0;\n  let dirty = false;\n  let isPan = 0;\n  return {\n    start(x, y) {\n      startX = x;\n      startY = y;\n      isPan = 0;\n      dirty = true;\n    },\n    detect(x, y) {\n      if (!dirty) {\n        return false;\n      }\n      const deltaX = (x - startX);\n      const deltaY = (y - startY);\n      const distance = deltaX * deltaX + deltaY * deltaY;\n      if (distance < threshold) {\n        return false;\n      }\n      const hypotenuse = Math.sqrt(distance);\n      const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n      if (cosine > maxCosine) {\n        isPan = 1;\n      }\n      else if (cosine < -maxCosine) {\n        isPan = -1;\n      }\n      else {\n        isPan = 0;\n      }\n      dirty = false;\n      return true;\n    },\n    isGesture() {\n      return isPan !== 0;\n    },\n    getDirection() {\n      return isPan;\n    }\n  };\n};\n\nconst createGesture = (config) => {\n  let hasCapturedPan = false;\n  let hasStartedPan = false;\n  let hasFiredStart = true;\n  let isMoveQueued = false;\n  const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n  const canStart = finalConfig.canStart;\n  const onWillStart = finalConfig.onWillStart;\n  const onStart = finalConfig.onStart;\n  const onEnd = finalConfig.onEnd;\n  const notCaptured = finalConfig.notCaptured;\n  const onMove = finalConfig.onMove;\n  const threshold = finalConfig.threshold;\n  const passive = finalConfig.passive;\n  const blurOnStart = finalConfig.blurOnStart;\n  const detail = {\n    type: 'pan',\n    startX: 0,\n    startY: 0,\n    startTime: 0,\n    currentX: 0,\n    currentY: 0,\n    velocityX: 0,\n    velocityY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    currentTime: 0,\n    event: undefined,\n    data: undefined\n  };\n  const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n  const gesture = GESTURE_CONTROLLER.createGesture({\n    name: config.gestureName,\n    priority: config.gesturePriority,\n    disableScroll: config.disableScroll\n  });\n  const pointerDown = (ev) => {\n    const timeStamp = now(ev);\n    if (hasStartedPan || !hasFiredStart) {\n      return false;\n    }\n    updateDetail(ev, detail);\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime = timeStamp;\n    detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n    detail.event = ev;\n    // Check if gesture can start\n    if (canStart && canStart(detail) === false) {\n      return false;\n    }\n    // Release fallback\n    gesture.release();\n    // Start gesture\n    if (!gesture.start()) {\n      return false;\n    }\n    hasStartedPan = true;\n    if (threshold === 0) {\n      return tryToCapturePan();\n    }\n    pan.start(detail.startX, detail.startY);\n    return true;\n  };\n  const pointerMove = (ev) => {\n    // fast path, if gesture is currently captured\n    // do minimum job to get user-land even dispatched\n    if (hasCapturedPan) {\n      if (!isMoveQueued && hasFiredStart) {\n        isMoveQueued = true;\n        calcGestureData(detail, ev);\n        requestAnimationFrame(fireOnMove);\n      }\n      return;\n    }\n    // gesture is currently being detected\n    calcGestureData(detail, ev);\n    if (pan.detect(detail.currentX, detail.currentY)) {\n      if (!pan.isGesture() || !tryToCapturePan()) {\n        abortGesture();\n      }\n    }\n  };\n  const fireOnMove = () => {\n    // Since fireOnMove is called inside a RAF, onEnd() might be called,\n    // we must double check hasCapturedPan\n    if (!hasCapturedPan) {\n      return;\n    }\n    isMoveQueued = false;\n    if (onMove) {\n      onMove(detail);\n    }\n  };\n  const tryToCapturePan = () => {\n    if (gesture && !gesture.capture()) {\n      return false;\n    }\n    hasCapturedPan = true;\n    hasFiredStart = false;\n    // reset start position since the real user-land event starts here\n    // If the pan detector threshold is big, not resetting the start position\n    // will cause a jump in the animation equal to the detector threshold.\n    // the array of positions used to calculate the gesture velocity does not\n    // need to be cleaned, more points in the positions array always results in a\n    // more accurate value of the velocity.\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime;\n    if (onWillStart) {\n      onWillStart(detail).then(fireOnStart);\n    }\n    else {\n      fireOnStart();\n    }\n    return true;\n  };\n  const blurActiveElement = () => {\n    /* tslint:disable-next-line */\n    if (typeof document !== 'undefined') {\n      const activeElement = document.activeElement;\n      if (activeElement !== null && activeElement.blur) {\n        activeElement.blur();\n      }\n    }\n  };\n  const fireOnStart = () => {\n    if (blurOnStart) {\n      blurActiveElement();\n    }\n    if (onStart) {\n      onStart(detail);\n    }\n    hasFiredStart = true;\n  };\n  const reset = () => {\n    hasCapturedPan = false;\n    hasStartedPan = false;\n    isMoveQueued = false;\n    hasFiredStart = true;\n    gesture.release();\n  };\n  // END *************************\n  const pointerUp = (ev) => {\n    const tmpHasCaptured = hasCapturedPan;\n    const tmpHasFiredStart = hasFiredStart;\n    reset();\n    if (!tmpHasFiredStart) {\n      return;\n    }\n    calcGestureData(detail, ev);\n    // Try to capture press\n    if (tmpHasCaptured) {\n      if (onEnd) {\n        onEnd(detail);\n      }\n      return;\n    }\n    // Not captured any event\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n    capture: false,\n    passive\n  });\n  const abortGesture = () => {\n    reset();\n    pointerEvents.stop();\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  return {\n    enable(enable = true) {\n      if (!enable) {\n        if (hasCapturedPan) {\n          pointerUp(undefined);\n        }\n        reset();\n      }\n      pointerEvents.enable(enable);\n    },\n    destroy() {\n      gesture.destroy();\n      pointerEvents.destroy();\n    }\n  };\n};\nconst calcGestureData = (detail, ev) => {\n  if (!ev) {\n    return;\n  }\n  const prevX = detail.currentX;\n  const prevY = detail.currentY;\n  const prevT = detail.currentTime;\n  updateDetail(ev, detail);\n  const currentX = detail.currentX;\n  const currentY = detail.currentY;\n  const timestamp = detail.currentTime = now(ev);\n  const timeDelta = timestamp - prevT;\n  if (timeDelta > 0 && timeDelta < 100) {\n    const velocityX = (currentX - prevX) / timeDelta;\n    const velocityY = (currentY - prevY) / timeDelta;\n    detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n    detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n  }\n  detail.deltaX = currentX - detail.startX;\n  detail.deltaY = currentY - detail.startY;\n  detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n  // get X coordinates for either a mouse click\n  // or a touch depending on the given event\n  let x = 0;\n  let y = 0;\n  if (ev) {\n    const changedTouches = ev.changedTouches;\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      x = touch.clientX;\n      y = touch.clientY;\n    }\n    else if (ev.pageX !== undefined) {\n      x = ev.pageX;\n      y = ev.pageY;\n    }\n  }\n  detail.currentX = x;\n  detail.currentY = y;\n};\nconst now = (ev) => {\n  return ev.timeStamp || Date.now();\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/swipe-back.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\n\nconst createSwipeBackGesture = (el, canStartHandler, onStartHandler, onMoveHandler, onEndHandler) => {\n  const win = el.ownerDocument.defaultView;\n  const rtl = isRTL(el);\n  /**\n   * Determine if a gesture is near the edge\n   * of the screen. If true, then the swipe\n   * to go back gesture should proceed.\n   */\n  const isAtEdge = (detail) => {\n    const threshold = 50;\n    const { startX } = detail;\n    if (rtl) {\n      return startX >= win.innerWidth - threshold;\n    }\n    return startX <= threshold;\n  };\n  const getDeltaX = (detail) => {\n    return rtl ? -detail.deltaX : detail.deltaX;\n  };\n  const getVelocityX = (detail) => {\n    return rtl ? -detail.velocityX : detail.velocityX;\n  };\n  const canStart = (detail) => {\n    return isAtEdge(detail) && canStartHandler();\n  };\n  const onMove = (detail) => {\n    // set the transition animation's progress\n    const delta = getDeltaX(detail);\n    const stepValue = delta / win.innerWidth;\n    onMoveHandler(stepValue);\n  };\n  const onEnd = (detail) => {\n    // the swipe back gesture has ended\n    const delta = getDeltaX(detail);\n    const width = win.innerWidth;\n    const stepValue = delta / width;\n    const velocity = getVelocityX(detail);\n    const z = width / 2.0;\n    const shouldComplete = velocity >= 0 && (velocity > 0.2 || delta > z);\n    const missing = shouldComplete ? 1 - stepValue : stepValue;\n    const missingDistance = missing * width;\n    let realDur = 0;\n    if (missingDistance > 5) {\n      const dur = missingDistance / Math.abs(velocity);\n      realDur = Math.min(dur, 540);\n    }\n    /**\n     * TODO: stepValue can sometimes return negative values\n     * or values greater than 1 which should not be possible.\n     * Need to investigate more to find where the issue is.\n     */\n    onEndHandler(shouldComplete, (stepValue <= 0) ? 0.01 : (0,helpers.j)(0, stepValue, 0.9999), realDur);\n  };\n  return createGesture({\n    el,\n    gestureName: 'goback-swipe',\n    gesturePriority: 40,\n    threshold: 10,\n    canStart,\n    onStart: onStartHandler,\n    onMove,\n    onEnd\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxNjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFc0I7OztBQ2pCdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxVQUFVLGVBQWU7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUM7OztBQ2pNbkM7QUFDQTtBQUNBO0FBQ2tFO0FBQ0E7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLGdEQUFnRCxTQUFTO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msc0dBQXNHO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdDQUFnQztBQUNsRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5Qjs7O0FDbGN6QjtBQUNBO0FBQ0E7QUFDMEM7QUFDSjtBQUNNOztBQUU1QztBQUNBO0FBQ0EsY0FBYyxLQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGFBQUs7QUFDaEU7QUFDQSxTQUFTLGFBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2NvbXBvbmVudHMvZGlyLmpzPzQ0MmUiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1taXMtbW9iaWxlLWFwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9jb21wb25lbnRzL2dlc3R1cmUtY29udHJvbGxlci5qcz82M2ZjIiwid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvY29tcG9uZW50cy9pbmRleDIuanM/ZTM3OSIsIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2NvbXBvbmVudHMvc3dpcGUtYmFjay5qcz84ZDMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBkb2N1bWVudCBvciBob3N0IGVsZW1lbnRcbiAqIGhhcyBhIGBkaXJgIHNldCB0byBgcnRsYC4gVGhlIGhvc3QgdmFsdWUgd2lsbCBhbHdheXNcbiAqIHRha2UgcHJpb3JpdHkgb3ZlciB0aGUgcm9vdCBkb2N1bWVudCB2YWx1ZS5cbiAqL1xuY29uc3QgaXNSVEwgPSAoaG9zdEVsKSA9PiB7XG4gIGlmIChob3N0RWwpIHtcbiAgICBpZiAoaG9zdEVsLmRpciAhPT0gJycpIHtcbiAgICAgIHJldHVybiBob3N0RWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGRvY3VtZW50ID09PSBudWxsIHx8IGRvY3VtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkb2N1bWVudC5kaXIudG9Mb3dlckNhc2UoKSkgPT09ICdydGwnO1xufTtcblxuZXhwb3J0IHsgaXNSVEwgYXMgaSB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmNsYXNzIEdlc3R1cmVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5nZXN0dXJlSWQgPSAwO1xuICAgIHRoaXMucmVxdWVzdGVkU3RhcnQgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5kaXNhYmxlZEdlc3R1cmVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZGlzYWJsZWRTY3JvbGwgPSBuZXcgU2V0KCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBnZXN0dXJlIGRlbGVnYXRlIGJhc2VkIG9uIHRoZSBHZXN0dXJlQ29uZmlnIHBhc3NlZFxuICAgKi9cbiAgY3JlYXRlR2VzdHVyZShjb25maWcpIHtcbiAgICByZXR1cm4gbmV3IEdlc3R1cmVEZWxlZ2F0ZSh0aGlzLCB0aGlzLm5ld0lEKCksIGNvbmZpZy5uYW1lLCBjb25maWcucHJpb3JpdHkgfHwgMCwgISFjb25maWcuZGlzYWJsZVNjcm9sbCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBibG9ja2VyIHRoYXQgd2lsbCBibG9jayBhbnkgb3RoZXIgZ2VzdHVyZSBldmVudHMgZnJvbSBmaXJpbmcuIFNldCBpbiB0aGUgaW9uLWdlc3R1cmUgY29tcG9uZW50LlxuICAgKi9cbiAgY3JlYXRlQmxvY2tlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IEJsb2NrZXJEZWxlZ2F0ZSh0aGlzLCB0aGlzLm5ld0lEKCksIG9wdHMuZGlzYWJsZSwgISFvcHRzLmRpc2FibGVTY3JvbGwpO1xuICB9XG4gIHN0YXJ0KGdlc3R1cmVOYW1lLCBpZCwgcHJpb3JpdHkpIHtcbiAgICBpZiAoIXRoaXMuY2FuU3RhcnQoZ2VzdHVyZU5hbWUpKSB7XG4gICAgICB0aGlzLnJlcXVlc3RlZFN0YXJ0LmRlbGV0ZShpZCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMucmVxdWVzdGVkU3RhcnQuc2V0KGlkLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2FwdHVyZShnZXN0dXJlTmFtZSwgaWQsIHByaW9yaXR5KSB7XG4gICAgaWYgKCF0aGlzLnN0YXJ0KGdlc3R1cmVOYW1lLCBpZCwgcHJpb3JpdHkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RlZFN0YXJ0ID0gdGhpcy5yZXF1ZXN0ZWRTdGFydDtcbiAgICBsZXQgbWF4UHJpb3JpdHkgPSAtMTAwMDA7XG4gICAgcmVxdWVzdGVkU3RhcnQuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBtYXhQcmlvcml0eSA9IE1hdGgubWF4KG1heFByaW9yaXR5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgaWYgKG1heFByaW9yaXR5ID09PSBwcmlvcml0eSkge1xuICAgICAgdGhpcy5jYXB0dXJlZElkID0gaWQ7XG4gICAgICByZXF1ZXN0ZWRTdGFydC5jbGVhcigpO1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2lvbkdlc3R1cmVDYXB0dXJlZCcsIHsgZGV0YWlsOiB7IGdlc3R1cmVOYW1lIH0gfSk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXF1ZXN0ZWRTdGFydC5kZWxldGUoaWQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZWxlYXNlKGlkKSB7XG4gICAgdGhpcy5yZXF1ZXN0ZWRTdGFydC5kZWxldGUoaWQpO1xuICAgIGlmICh0aGlzLmNhcHR1cmVkSWQgPT09IGlkKSB7XG4gICAgICB0aGlzLmNhcHR1cmVkSWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGRpc2FibGVHZXN0dXJlKGdlc3R1cmVOYW1lLCBpZCkge1xuICAgIGxldCBzZXQgPSB0aGlzLmRpc2FibGVkR2VzdHVyZXMuZ2V0KGdlc3R1cmVOYW1lKTtcbiAgICBpZiAoc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIHRoaXMuZGlzYWJsZWRHZXN0dXJlcy5zZXQoZ2VzdHVyZU5hbWUsIHNldCk7XG4gICAgfVxuICAgIHNldC5hZGQoaWQpO1xuICB9XG4gIGVuYWJsZUdlc3R1cmUoZ2VzdHVyZU5hbWUsIGlkKSB7XG4gICAgY29uc3Qgc2V0ID0gdGhpcy5kaXNhYmxlZEdlc3R1cmVzLmdldChnZXN0dXJlTmFtZSk7XG4gICAgaWYgKHNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXQuZGVsZXRlKGlkKTtcbiAgICB9XG4gIH1cbiAgZGlzYWJsZVNjcm9sbChpZCkge1xuICAgIHRoaXMuZGlzYWJsZWRTY3JvbGwuYWRkKGlkKTtcbiAgICBpZiAodGhpcy5kaXNhYmxlZFNjcm9sbC5zaXplID09PSAxKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQkFDS0RST1BfTk9fU0NST0xMKTtcbiAgICB9XG4gIH1cbiAgZW5hYmxlU2Nyb2xsKGlkKSB7XG4gICAgdGhpcy5kaXNhYmxlZFNjcm9sbC5kZWxldGUoaWQpO1xuICAgIGlmICh0aGlzLmRpc2FibGVkU2Nyb2xsLnNpemUgPT09IDApIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShCQUNLRFJPUF9OT19TQ1JPTEwpO1xuICAgIH1cbiAgfVxuICBjYW5TdGFydChnZXN0dXJlTmFtZSkge1xuICAgIGlmICh0aGlzLmNhcHR1cmVkSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gYSBnZXN0dXJlIGFscmVhZHkgY2FwdHVyZWRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZChnZXN0dXJlTmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaXNDYXB0dXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jYXB0dXJlZElkICE9PSB1bmRlZmluZWQ7XG4gIH1cbiAgaXNTY3JvbGxEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlZFNjcm9sbC5zaXplID4gMDtcbiAgfVxuICBpc0Rpc2FibGVkKGdlc3R1cmVOYW1lKSB7XG4gICAgY29uc3QgZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkR2VzdHVyZXMuZ2V0KGdlc3R1cmVOYW1lKTtcbiAgICBpZiAoZGlzYWJsZWQgJiYgZGlzYWJsZWQuc2l6ZSA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbmV3SUQoKSB7XG4gICAgdGhpcy5nZXN0dXJlSWQrKztcbiAgICByZXR1cm4gdGhpcy5nZXN0dXJlSWQ7XG4gIH1cbn1cbmNsYXNzIEdlc3R1cmVEZWxlZ2F0ZSB7XG4gIGNvbnN0cnVjdG9yKGN0cmwsIGlkLCBuYW1lLCBwcmlvcml0eSwgZGlzYWJsZVNjcm9sbCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGlzYWJsZVNjcm9sbCA9IGRpc2FibGVTY3JvbGw7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5ICogMTAwMDAwMCArIGlkO1xuICAgIHRoaXMuY3RybCA9IGN0cmw7XG4gIH1cbiAgY2FuU3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLmN0cmwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3RybC5jYW5TdGFydCh0aGlzLm5hbWUpO1xuICB9XG4gIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5jdHJsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmN0cmwuc3RhcnQodGhpcy5uYW1lLCB0aGlzLmlkLCB0aGlzLnByaW9yaXR5KTtcbiAgfVxuICBjYXB0dXJlKCkge1xuICAgIGlmICghdGhpcy5jdHJsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNhcHR1cmVkID0gdGhpcy5jdHJsLmNhcHR1cmUodGhpcy5uYW1lLCB0aGlzLmlkLCB0aGlzLnByaW9yaXR5KTtcbiAgICBpZiAoY2FwdHVyZWQgJiYgdGhpcy5kaXNhYmxlU2Nyb2xsKSB7XG4gICAgICB0aGlzLmN0cmwuZGlzYWJsZVNjcm9sbCh0aGlzLmlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmVkO1xuICB9XG4gIHJlbGVhc2UoKSB7XG4gICAgaWYgKHRoaXMuY3RybCkge1xuICAgICAgdGhpcy5jdHJsLnJlbGVhc2UodGhpcy5pZCk7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlU2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuY3RybC5lbmFibGVTY3JvbGwodGhpcy5pZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZWxlYXNlKCk7XG4gICAgdGhpcy5jdHJsID0gdW5kZWZpbmVkO1xuICB9XG59XG5jbGFzcyBCbG9ja2VyRGVsZWdhdGUge1xuICBjb25zdHJ1Y3RvcihjdHJsLCBpZCwgZGlzYWJsZSwgZGlzYWJsZVNjcm9sbCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmRpc2FibGUgPSBkaXNhYmxlO1xuICAgIHRoaXMuZGlzYWJsZVNjcm9sbCA9IGRpc2FibGVTY3JvbGw7XG4gICAgdGhpcy5jdHJsID0gY3RybDtcbiAgfVxuICBibG9jaygpIHtcbiAgICBpZiAoIXRoaXMuY3RybCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5kaXNhYmxlKSB7XG4gICAgICBmb3IgKGNvbnN0IGdlc3R1cmUgb2YgdGhpcy5kaXNhYmxlKSB7XG4gICAgICAgIHRoaXMuY3RybC5kaXNhYmxlR2VzdHVyZShnZXN0dXJlLCB0aGlzLmlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzYWJsZVNjcm9sbCkge1xuICAgICAgdGhpcy5jdHJsLmRpc2FibGVTY3JvbGwodGhpcy5pZCk7XG4gICAgfVxuICB9XG4gIHVuYmxvY2soKSB7XG4gICAgaWYgKCF0aGlzLmN0cmwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzYWJsZSkge1xuICAgICAgZm9yIChjb25zdCBnZXN0dXJlIG9mIHRoaXMuZGlzYWJsZSkge1xuICAgICAgICB0aGlzLmN0cmwuZW5hYmxlR2VzdHVyZShnZXN0dXJlLCB0aGlzLmlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzYWJsZVNjcm9sbCkge1xuICAgICAgdGhpcy5jdHJsLmVuYWJsZVNjcm9sbCh0aGlzLmlkKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVuYmxvY2soKTtcbiAgICB0aGlzLmN0cmwgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbmNvbnN0IEJBQ0tEUk9QX05PX1NDUk9MTCA9ICdiYWNrZHJvcC1uby1zY3JvbGwnO1xuY29uc3QgR0VTVFVSRV9DT05UUk9MTEVSID0gbmV3IEdlc3R1cmVDb250cm9sbGVyKCk7XG5cbmV4cG9ydCB7IEdFU1RVUkVfQ09OVFJPTExFUiBhcyBHIH07XG4iLCIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRyBhcyBHRVNUVVJFX0NPTlRST0xMRVIgfSBmcm9tICcuL2dlc3R1cmUtY29udHJvbGxlci5qcyc7XG5leHBvcnQgeyBHIGFzIEdFU1RVUkVfQ09OVFJPTExFUiB9IGZyb20gJy4vZ2VzdHVyZS1jb250cm9sbGVyLmpzJztcblxuY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IChlbCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0cykgPT4ge1xuICAvLyB1c2UgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyB3aGVuIHN1cHBvcnRlZFxuICAvLyBvdGhlcndpc2UgaXQncyBqdXN0IGEgYm9vbGVhbiBmb3IgdGhlIFwiY2FwdHVyZVwiIGFyZ1xuICBjb25zdCBsaXN0ZW5lck9wdHMgPSBzdXBwb3J0c1Bhc3NpdmUoZWwpID8ge1xuICAgICdjYXB0dXJlJzogISFvcHRzLmNhcHR1cmUsXG4gICAgJ3Bhc3NpdmUnOiAhIW9wdHMucGFzc2l2ZSxcbiAgfSA6ICEhb3B0cy5jYXB0dXJlO1xuICBsZXQgYWRkO1xuICBsZXQgcmVtb3ZlO1xuICBpZiAoZWxbJ19fem9uZV9zeW1ib2xfX2FkZEV2ZW50TGlzdGVuZXInXSkge1xuICAgIGFkZCA9ICdfX3pvbmVfc3ltYm9sX19hZGRFdmVudExpc3RlbmVyJztcbiAgICByZW1vdmUgPSAnX196b25lX3N5bWJvbF9fcmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIH1cbiAgZWxzZSB7XG4gICAgYWRkID0gJ2FkZEV2ZW50TGlzdGVuZXInO1xuICAgIHJlbW92ZSA9ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgfVxuICBlbFthZGRdKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGxpc3RlbmVyT3B0cyk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZWxbcmVtb3ZlXShldmVudE5hbWUsIGNhbGxiYWNrLCBsaXN0ZW5lck9wdHMpO1xuICB9O1xufTtcbmNvbnN0IHN1cHBvcnRzUGFzc2l2ZSA9IChub2RlKSA9PiB7XG4gIGlmIChfc1Bhc3NpdmUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgX3NQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ29wdHNUZXN0JywgKCkgPT4geyByZXR1cm47IH0sIG9wdHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgX3NQYXNzaXZlID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiAhIV9zUGFzc2l2ZTtcbn07XG5sZXQgX3NQYXNzaXZlO1xuXG5jb25zdCBNT1VTRV9XQUlUID0gMjAwMDtcbmNvbnN0IGNyZWF0ZVBvaW50ZXJFdmVudHMgPSAoZWwsIHBvaW50ZXJEb3duLCBwb2ludGVyTW92ZSwgcG9pbnRlclVwLCBvcHRpb25zKSA9PiB7XG4gIGxldCBybVRvdWNoU3RhcnQ7XG4gIGxldCBybVRvdWNoTW92ZTtcbiAgbGV0IHJtVG91Y2hFbmQ7XG4gIGxldCBybVRvdWNoQ2FuY2VsO1xuICBsZXQgcm1Nb3VzZVN0YXJ0O1xuICBsZXQgcm1Nb3VzZU1vdmU7XG4gIGxldCBybU1vdXNlVXA7XG4gIGxldCBsYXN0VG91Y2hFdmVudCA9IDA7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSAoZXYpID0+IHtcbiAgICBsYXN0VG91Y2hFdmVudCA9IERhdGUubm93KCkgKyBNT1VTRV9XQUlUO1xuICAgIGlmICghcG9pbnRlckRvd24oZXYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcm1Ub3VjaE1vdmUgJiYgcG9pbnRlck1vdmUpIHtcbiAgICAgIHJtVG91Y2hNb3ZlID0gYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ3RvdWNobW92ZScsIHBvaW50ZXJNb3ZlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXZlbnRzIGFyZSBkaXNwYXRjaGVkIG9uIHRoZSBlbGVtZW50IHRoYXQgaXMgdGFwcGVkIGFuZCBidWJibGUgdXAgdG9cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaW4gdGhlIGdlc3R1cmUuIEluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IHRoaXNcbiAgICAgKiBldmVudCB3YXMgZmlyc3QgZGlzcGF0Y2hlZCBvbiBpcyByZW1vdmVkIGZyb20gdGhlIERPTSwgdGhlIGV2ZW50IHdpbGwgbm9cbiAgICAgKiBsb25nZXIgYnViYmxlIHVwIHRvIG91ciByZWZlcmVuY2UgZWxlbWVudC4gVGhpcyBsZWF2ZXMgdGhlIGdlc3R1cmUgaW4gYW5cbiAgICAgKiB1bnVzYWJsZSBzdGF0ZS4gVG8gYWNjb3VudCBmb3IgdGhpcywgdGhlIHRvdWNoZW5kIGFuZCB0b3VjaGNhbmNlbCBsaXN0ZW5lcnNcbiAgICAgKiBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGV2ZW50IHRhcmdldCBzbyB0aGF0IHRoZXkgc3RpbGwgZmlyZSBldmVuIGlmIHRoZSB0YXJnZXRcbiAgICAgKiBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgKi9cbiAgICBpZiAoIXJtVG91Y2hFbmQpIHtcbiAgICAgIHJtVG91Y2hFbmQgPSBhZGRFdmVudExpc3RlbmVyKGV2LnRhcmdldCwgJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoIXJtVG91Y2hDYW5jZWwpIHtcbiAgICAgIHJtVG91Y2hDYW5jZWwgPSBhZGRFdmVudExpc3RlbmVyKGV2LnRhcmdldCwgJ3RvdWNoY2FuY2VsJywgaGFuZGxlVG91Y2hFbmQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gKGV2KSA9PiB7XG4gICAgaWYgKGxhc3RUb3VjaEV2ZW50ID4gRGF0ZS5ub3coKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXBvaW50ZXJEb3duKGV2KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXJtTW91c2VNb3ZlICYmIHBvaW50ZXJNb3ZlKSB7XG4gICAgICBybU1vdXNlTW92ZSA9IGFkZEV2ZW50TGlzdGVuZXIoZ2V0RG9jdW1lbnQoZWwpLCAnbW91c2Vtb3ZlJywgcG9pbnRlck1vdmUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoIXJtTW91c2VVcCkge1xuICAgICAgcm1Nb3VzZVVwID0gYWRkRXZlbnRMaXN0ZW5lcihnZXREb2N1bWVudChlbCksICdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IChldikgPT4ge1xuICAgIHN0b3BUb3VjaCgpO1xuICAgIGlmIChwb2ludGVyVXApIHtcbiAgICAgIHBvaW50ZXJVcChldik7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZVVwID0gKGV2KSA9PiB7XG4gICAgc3RvcE1vdXNlKCk7XG4gICAgaWYgKHBvaW50ZXJVcCkge1xuICAgICAgcG9pbnRlclVwKGV2KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN0b3BUb3VjaCA9ICgpID0+IHtcbiAgICBpZiAocm1Ub3VjaE1vdmUpIHtcbiAgICAgIHJtVG91Y2hNb3ZlKCk7XG4gICAgfVxuICAgIGlmIChybVRvdWNoRW5kKSB7XG4gICAgICBybVRvdWNoRW5kKCk7XG4gICAgfVxuICAgIGlmIChybVRvdWNoQ2FuY2VsKSB7XG4gICAgICBybVRvdWNoQ2FuY2VsKCk7XG4gICAgfVxuICAgIHJtVG91Y2hNb3ZlID0gcm1Ub3VjaEVuZCA9IHJtVG91Y2hDYW5jZWwgPSB1bmRlZmluZWQ7XG4gIH07XG4gIGNvbnN0IHN0b3BNb3VzZSA9ICgpID0+IHtcbiAgICBpZiAocm1Nb3VzZU1vdmUpIHtcbiAgICAgIHJtTW91c2VNb3ZlKCk7XG4gICAgfVxuICAgIGlmIChybU1vdXNlVXApIHtcbiAgICAgIHJtTW91c2VVcCgpO1xuICAgIH1cbiAgICBybU1vdXNlTW92ZSA9IHJtTW91c2VVcCA9IHVuZGVmaW5lZDtcbiAgfTtcbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBzdG9wVG91Y2goKTtcbiAgICBzdG9wTW91c2UoKTtcbiAgfTtcbiAgY29uc3QgZW5hYmxlID0gKGlzRW5hYmxlZCA9IHRydWUpID0+IHtcbiAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgaWYgKHJtVG91Y2hTdGFydCkge1xuICAgICAgICBybVRvdWNoU3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChybU1vdXNlU3RhcnQpIHtcbiAgICAgICAgcm1Nb3VzZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBybVRvdWNoU3RhcnQgPSBybU1vdXNlU3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKCFybVRvdWNoU3RhcnQpIHtcbiAgICAgICAgcm1Ub3VjaFN0YXJ0ID0gYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0LCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICghcm1Nb3VzZVN0YXJ0KSB7XG4gICAgICAgIHJtTW91c2VTdGFydCA9IGFkZEV2ZW50TGlzdGVuZXIoZWwsICdtb3VzZWRvd24nLCBoYW5kbGVNb3VzZURvd24sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBlbmFibGUoZmFsc2UpO1xuICAgIHBvaW50ZXJVcCA9IHBvaW50ZXJNb3ZlID0gcG9pbnRlckRvd24gPSB1bmRlZmluZWQ7XG4gIH07XG4gIHJldHVybiB7XG4gICAgZW5hYmxlLFxuICAgIHN0b3AsXG4gICAgZGVzdHJveVxuICB9O1xufTtcbmNvbnN0IGdldERvY3VtZW50ID0gKG5vZGUpID0+IHtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudCA/IG5vZGUgOiBub2RlLm93bmVyRG9jdW1lbnQ7XG59O1xuXG5jb25zdCBjcmVhdGVQYW5SZWNvZ25pemVyID0gKGRpcmVjdGlvbiwgdGhyZXNoLCBtYXhBbmdsZSkgPT4ge1xuICBjb25zdCByYWRpYW5zID0gbWF4QW5nbGUgKiAoTWF0aC5QSSAvIDE4MCk7XG4gIGNvbnN0IGlzRGlyWCA9IGRpcmVjdGlvbiA9PT0gJ3gnO1xuICBjb25zdCBtYXhDb3NpbmUgPSBNYXRoLmNvcyhyYWRpYW5zKTtcbiAgY29uc3QgdGhyZXNob2xkID0gdGhyZXNoICogdGhyZXNoO1xuICBsZXQgc3RhcnRYID0gMDtcbiAgbGV0IHN0YXJ0WSA9IDA7XG4gIGxldCBkaXJ0eSA9IGZhbHNlO1xuICBsZXQgaXNQYW4gPSAwO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0KHgsIHkpIHtcbiAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICBzdGFydFkgPSB5O1xuICAgICAgaXNQYW4gPSAwO1xuICAgICAgZGlydHkgPSB0cnVlO1xuICAgIH0sXG4gICAgZGV0ZWN0KHgsIHkpIHtcbiAgICAgIGlmICghZGlydHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgZGVsdGFYID0gKHggLSBzdGFydFgpO1xuICAgICAgY29uc3QgZGVsdGFZID0gKHkgLSBzdGFydFkpO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBkZWx0YVggKiBkZWx0YVggKyBkZWx0YVkgKiBkZWx0YVk7XG4gICAgICBpZiAoZGlzdGFuY2UgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgaHlwb3RlbnVzZSA9IE1hdGguc3FydChkaXN0YW5jZSk7XG4gICAgICBjb25zdCBjb3NpbmUgPSAoaXNEaXJYID8gZGVsdGFYIDogZGVsdGFZKSAvIGh5cG90ZW51c2U7XG4gICAgICBpZiAoY29zaW5lID4gbWF4Q29zaW5lKSB7XG4gICAgICAgIGlzUGFuID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNvc2luZSA8IC1tYXhDb3NpbmUpIHtcbiAgICAgICAgaXNQYW4gPSAtMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpc1BhbiA9IDA7XG4gICAgICB9XG4gICAgICBkaXJ0eSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBpc0dlc3R1cmUoKSB7XG4gICAgICByZXR1cm4gaXNQYW4gIT09IDA7XG4gICAgfSxcbiAgICBnZXREaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXNQYW47XG4gICAgfVxuICB9O1xufTtcblxuY29uc3QgY3JlYXRlR2VzdHVyZSA9IChjb25maWcpID0+IHtcbiAgbGV0IGhhc0NhcHR1cmVkUGFuID0gZmFsc2U7XG4gIGxldCBoYXNTdGFydGVkUGFuID0gZmFsc2U7XG4gIGxldCBoYXNGaXJlZFN0YXJ0ID0gdHJ1ZTtcbiAgbGV0IGlzTW92ZVF1ZXVlZCA9IGZhbHNlO1xuICBjb25zdCBmaW5hbENvbmZpZyA9IE9iamVjdC5hc3NpZ24oeyBkaXNhYmxlU2Nyb2xsOiBmYWxzZSwgZGlyZWN0aW9uOiAneCcsIGdlc3R1cmVQcmlvcml0eTogMCwgcGFzc2l2ZTogdHJ1ZSwgbWF4QW5nbGU6IDQwLCB0aHJlc2hvbGQ6IDEwIH0sIGNvbmZpZyk7XG4gIGNvbnN0IGNhblN0YXJ0ID0gZmluYWxDb25maWcuY2FuU3RhcnQ7XG4gIGNvbnN0IG9uV2lsbFN0YXJ0ID0gZmluYWxDb25maWcub25XaWxsU3RhcnQ7XG4gIGNvbnN0IG9uU3RhcnQgPSBmaW5hbENvbmZpZy5vblN0YXJ0O1xuICBjb25zdCBvbkVuZCA9IGZpbmFsQ29uZmlnLm9uRW5kO1xuICBjb25zdCBub3RDYXB0dXJlZCA9IGZpbmFsQ29uZmlnLm5vdENhcHR1cmVkO1xuICBjb25zdCBvbk1vdmUgPSBmaW5hbENvbmZpZy5vbk1vdmU7XG4gIGNvbnN0IHRocmVzaG9sZCA9IGZpbmFsQ29uZmlnLnRocmVzaG9sZDtcbiAgY29uc3QgcGFzc2l2ZSA9IGZpbmFsQ29uZmlnLnBhc3NpdmU7XG4gIGNvbnN0IGJsdXJPblN0YXJ0ID0gZmluYWxDb25maWcuYmx1ck9uU3RhcnQ7XG4gIGNvbnN0IGRldGFpbCA9IHtcbiAgICB0eXBlOiAncGFuJyxcbiAgICBzdGFydFg6IDAsXG4gICAgc3RhcnRZOiAwLFxuICAgIHN0YXJ0VGltZTogMCxcbiAgICBjdXJyZW50WDogMCxcbiAgICBjdXJyZW50WTogMCxcbiAgICB2ZWxvY2l0eVg6IDAsXG4gICAgdmVsb2NpdHlZOiAwLFxuICAgIGRlbHRhWDogMCxcbiAgICBkZWx0YVk6IDAsXG4gICAgY3VycmVudFRpbWU6IDAsXG4gICAgZXZlbnQ6IHVuZGVmaW5lZCxcbiAgICBkYXRhOiB1bmRlZmluZWRcbiAgfTtcbiAgY29uc3QgcGFuID0gY3JlYXRlUGFuUmVjb2duaXplcihmaW5hbENvbmZpZy5kaXJlY3Rpb24sIGZpbmFsQ29uZmlnLnRocmVzaG9sZCwgZmluYWxDb25maWcubWF4QW5nbGUpO1xuICBjb25zdCBnZXN0dXJlID0gR0VTVFVSRV9DT05UUk9MTEVSLmNyZWF0ZUdlc3R1cmUoe1xuICAgIG5hbWU6IGNvbmZpZy5nZXN0dXJlTmFtZSxcbiAgICBwcmlvcml0eTogY29uZmlnLmdlc3R1cmVQcmlvcml0eSxcbiAgICBkaXNhYmxlU2Nyb2xsOiBjb25maWcuZGlzYWJsZVNjcm9sbFxuICB9KTtcbiAgY29uc3QgcG9pbnRlckRvd24gPSAoZXYpID0+IHtcbiAgICBjb25zdCB0aW1lU3RhbXAgPSBub3coZXYpO1xuICAgIGlmIChoYXNTdGFydGVkUGFuIHx8ICFoYXNGaXJlZFN0YXJ0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVwZGF0ZURldGFpbChldiwgZGV0YWlsKTtcbiAgICBkZXRhaWwuc3RhcnRYID0gZGV0YWlsLmN1cnJlbnRYO1xuICAgIGRldGFpbC5zdGFydFkgPSBkZXRhaWwuY3VycmVudFk7XG4gICAgZGV0YWlsLnN0YXJ0VGltZSA9IGRldGFpbC5jdXJyZW50VGltZSA9IHRpbWVTdGFtcDtcbiAgICBkZXRhaWwudmVsb2NpdHlYID0gZGV0YWlsLnZlbG9jaXR5WSA9IGRldGFpbC5kZWx0YVggPSBkZXRhaWwuZGVsdGFZID0gMDtcbiAgICBkZXRhaWwuZXZlbnQgPSBldjtcbiAgICAvLyBDaGVjayBpZiBnZXN0dXJlIGNhbiBzdGFydFxuICAgIGlmIChjYW5TdGFydCAmJiBjYW5TdGFydChkZXRhaWwpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBSZWxlYXNlIGZhbGxiYWNrXG4gICAgZ2VzdHVyZS5yZWxlYXNlKCk7XG4gICAgLy8gU3RhcnQgZ2VzdHVyZVxuICAgIGlmICghZ2VzdHVyZS5zdGFydCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhc1N0YXJ0ZWRQYW4gPSB0cnVlO1xuICAgIGlmICh0aHJlc2hvbGQgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnlUb0NhcHR1cmVQYW4oKTtcbiAgICB9XG4gICAgcGFuLnN0YXJ0KGRldGFpbC5zdGFydFgsIGRldGFpbC5zdGFydFkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBjb25zdCBwb2ludGVyTW92ZSA9IChldikgPT4ge1xuICAgIC8vIGZhc3QgcGF0aCwgaWYgZ2VzdHVyZSBpcyBjdXJyZW50bHkgY2FwdHVyZWRcbiAgICAvLyBkbyBtaW5pbXVtIGpvYiB0byBnZXQgdXNlci1sYW5kIGV2ZW4gZGlzcGF0Y2hlZFxuICAgIGlmIChoYXNDYXB0dXJlZFBhbikge1xuICAgICAgaWYgKCFpc01vdmVRdWV1ZWQgJiYgaGFzRmlyZWRTdGFydCkge1xuICAgICAgICBpc01vdmVRdWV1ZWQgPSB0cnVlO1xuICAgICAgICBjYWxjR2VzdHVyZURhdGEoZGV0YWlsLCBldik7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaXJlT25Nb3ZlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZ2VzdHVyZSBpcyBjdXJyZW50bHkgYmVpbmcgZGV0ZWN0ZWRcbiAgICBjYWxjR2VzdHVyZURhdGEoZGV0YWlsLCBldik7XG4gICAgaWYgKHBhbi5kZXRlY3QoZGV0YWlsLmN1cnJlbnRYLCBkZXRhaWwuY3VycmVudFkpKSB7XG4gICAgICBpZiAoIXBhbi5pc0dlc3R1cmUoKSB8fCAhdHJ5VG9DYXB0dXJlUGFuKCkpIHtcbiAgICAgICAgYWJvcnRHZXN0dXJlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBmaXJlT25Nb3ZlID0gKCkgPT4ge1xuICAgIC8vIFNpbmNlIGZpcmVPbk1vdmUgaXMgY2FsbGVkIGluc2lkZSBhIFJBRiwgb25FbmQoKSBtaWdodCBiZSBjYWxsZWQsXG4gICAgLy8gd2UgbXVzdCBkb3VibGUgY2hlY2sgaGFzQ2FwdHVyZWRQYW5cbiAgICBpZiAoIWhhc0NhcHR1cmVkUGFuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlzTW92ZVF1ZXVlZCA9IGZhbHNlO1xuICAgIGlmIChvbk1vdmUpIHtcbiAgICAgIG9uTW92ZShkZXRhaWwpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdHJ5VG9DYXB0dXJlUGFuID0gKCkgPT4ge1xuICAgIGlmIChnZXN0dXJlICYmICFnZXN0dXJlLmNhcHR1cmUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBoYXNDYXB0dXJlZFBhbiA9IHRydWU7XG4gICAgaGFzRmlyZWRTdGFydCA9IGZhbHNlO1xuICAgIC8vIHJlc2V0IHN0YXJ0IHBvc2l0aW9uIHNpbmNlIHRoZSByZWFsIHVzZXItbGFuZCBldmVudCBzdGFydHMgaGVyZVxuICAgIC8vIElmIHRoZSBwYW4gZGV0ZWN0b3IgdGhyZXNob2xkIGlzIGJpZywgbm90IHJlc2V0dGluZyB0aGUgc3RhcnQgcG9zaXRpb25cbiAgICAvLyB3aWxsIGNhdXNlIGEganVtcCBpbiB0aGUgYW5pbWF0aW9uIGVxdWFsIHRvIHRoZSBkZXRlY3RvciB0aHJlc2hvbGQuXG4gICAgLy8gdGhlIGFycmF5IG9mIHBvc2l0aW9ucyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgZ2VzdHVyZSB2ZWxvY2l0eSBkb2VzIG5vdFxuICAgIC8vIG5lZWQgdG8gYmUgY2xlYW5lZCwgbW9yZSBwb2ludHMgaW4gdGhlIHBvc2l0aW9ucyBhcnJheSBhbHdheXMgcmVzdWx0cyBpbiBhXG4gICAgLy8gbW9yZSBhY2N1cmF0ZSB2YWx1ZSBvZiB0aGUgdmVsb2NpdHkuXG4gICAgZGV0YWlsLnN0YXJ0WCA9IGRldGFpbC5jdXJyZW50WDtcbiAgICBkZXRhaWwuc3RhcnRZID0gZGV0YWlsLmN1cnJlbnRZO1xuICAgIGRldGFpbC5zdGFydFRpbWUgPSBkZXRhaWwuY3VycmVudFRpbWU7XG4gICAgaWYgKG9uV2lsbFN0YXJ0KSB7XG4gICAgICBvbldpbGxTdGFydChkZXRhaWwpLnRoZW4oZmlyZU9uU3RhcnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZpcmVPblN0YXJ0KCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBjb25zdCBibHVyQWN0aXZlRWxlbWVudCA9ICgpID0+IHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAoYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJiBhY3RpdmVFbGVtZW50LmJsdXIpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBmaXJlT25TdGFydCA9ICgpID0+IHtcbiAgICBpZiAoYmx1ck9uU3RhcnQpIHtcbiAgICAgIGJsdXJBY3RpdmVFbGVtZW50KCk7XG4gICAgfVxuICAgIGlmIChvblN0YXJ0KSB7XG4gICAgICBvblN0YXJ0KGRldGFpbCk7XG4gICAgfVxuICAgIGhhc0ZpcmVkU3RhcnQgPSB0cnVlO1xuICB9O1xuICBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgICBoYXNDYXB0dXJlZFBhbiA9IGZhbHNlO1xuICAgIGhhc1N0YXJ0ZWRQYW4gPSBmYWxzZTtcbiAgICBpc01vdmVRdWV1ZWQgPSBmYWxzZTtcbiAgICBoYXNGaXJlZFN0YXJ0ID0gdHJ1ZTtcbiAgICBnZXN0dXJlLnJlbGVhc2UoKTtcbiAgfTtcbiAgLy8gRU5EICoqKioqKioqKioqKioqKioqKioqKioqKipcbiAgY29uc3QgcG9pbnRlclVwID0gKGV2KSA9PiB7XG4gICAgY29uc3QgdG1wSGFzQ2FwdHVyZWQgPSBoYXNDYXB0dXJlZFBhbjtcbiAgICBjb25zdCB0bXBIYXNGaXJlZFN0YXJ0ID0gaGFzRmlyZWRTdGFydDtcbiAgICByZXNldCgpO1xuICAgIGlmICghdG1wSGFzRmlyZWRTdGFydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxjR2VzdHVyZURhdGEoZGV0YWlsLCBldik7XG4gICAgLy8gVHJ5IHRvIGNhcHR1cmUgcHJlc3NcbiAgICBpZiAodG1wSGFzQ2FwdHVyZWQpIHtcbiAgICAgIGlmIChvbkVuZCkge1xuICAgICAgICBvbkVuZChkZXRhaWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBOb3QgY2FwdHVyZWQgYW55IGV2ZW50XG4gICAgaWYgKG5vdENhcHR1cmVkKSB7XG4gICAgICBub3RDYXB0dXJlZChkZXRhaWwpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcG9pbnRlckV2ZW50cyA9IGNyZWF0ZVBvaW50ZXJFdmVudHMoZmluYWxDb25maWcuZWwsIHBvaW50ZXJEb3duLCBwb2ludGVyTW92ZSwgcG9pbnRlclVwLCB7XG4gICAgY2FwdHVyZTogZmFsc2UsXG4gICAgcGFzc2l2ZVxuICB9KTtcbiAgY29uc3QgYWJvcnRHZXN0dXJlID0gKCkgPT4ge1xuICAgIHJlc2V0KCk7XG4gICAgcG9pbnRlckV2ZW50cy5zdG9wKCk7XG4gICAgaWYgKG5vdENhcHR1cmVkKSB7XG4gICAgICBub3RDYXB0dXJlZChkZXRhaWwpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBlbmFibGUoZW5hYmxlID0gdHJ1ZSkge1xuICAgICAgaWYgKCFlbmFibGUpIHtcbiAgICAgICAgaWYgKGhhc0NhcHR1cmVkUGFuKSB7XG4gICAgICAgICAgcG9pbnRlclVwKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXQoKTtcbiAgICAgIH1cbiAgICAgIHBvaW50ZXJFdmVudHMuZW5hYmxlKGVuYWJsZSk7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgZ2VzdHVyZS5kZXN0cm95KCk7XG4gICAgICBwb2ludGVyRXZlbnRzLmRlc3Ryb3koKTtcbiAgICB9XG4gIH07XG59O1xuY29uc3QgY2FsY0dlc3R1cmVEYXRhID0gKGRldGFpbCwgZXYpID0+IHtcbiAgaWYgKCFldikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwcmV2WCA9IGRldGFpbC5jdXJyZW50WDtcbiAgY29uc3QgcHJldlkgPSBkZXRhaWwuY3VycmVudFk7XG4gIGNvbnN0IHByZXZUID0gZGV0YWlsLmN1cnJlbnRUaW1lO1xuICB1cGRhdGVEZXRhaWwoZXYsIGRldGFpbCk7XG4gIGNvbnN0IGN1cnJlbnRYID0gZGV0YWlsLmN1cnJlbnRYO1xuICBjb25zdCBjdXJyZW50WSA9IGRldGFpbC5jdXJyZW50WTtcbiAgY29uc3QgdGltZXN0YW1wID0gZGV0YWlsLmN1cnJlbnRUaW1lID0gbm93KGV2KTtcbiAgY29uc3QgdGltZURlbHRhID0gdGltZXN0YW1wIC0gcHJldlQ7XG4gIGlmICh0aW1lRGVsdGEgPiAwICYmIHRpbWVEZWx0YSA8IDEwMCkge1xuICAgIGNvbnN0IHZlbG9jaXR5WCA9IChjdXJyZW50WCAtIHByZXZYKSAvIHRpbWVEZWx0YTtcbiAgICBjb25zdCB2ZWxvY2l0eVkgPSAoY3VycmVudFkgLSBwcmV2WSkgLyB0aW1lRGVsdGE7XG4gICAgZGV0YWlsLnZlbG9jaXR5WCA9IHZlbG9jaXR5WCAqIDAuNyArIGRldGFpbC52ZWxvY2l0eVggKiAwLjM7XG4gICAgZGV0YWlsLnZlbG9jaXR5WSA9IHZlbG9jaXR5WSAqIDAuNyArIGRldGFpbC52ZWxvY2l0eVkgKiAwLjM7XG4gIH1cbiAgZGV0YWlsLmRlbHRhWCA9IGN1cnJlbnRYIC0gZGV0YWlsLnN0YXJ0WDtcbiAgZGV0YWlsLmRlbHRhWSA9IGN1cnJlbnRZIC0gZGV0YWlsLnN0YXJ0WTtcbiAgZGV0YWlsLmV2ZW50ID0gZXY7XG59O1xuY29uc3QgdXBkYXRlRGV0YWlsID0gKGV2LCBkZXRhaWwpID0+IHtcbiAgLy8gZ2V0IFggY29vcmRpbmF0ZXMgZm9yIGVpdGhlciBhIG1vdXNlIGNsaWNrXG4gIC8vIG9yIGEgdG91Y2ggZGVwZW5kaW5nIG9uIHRoZSBnaXZlbiBldmVudFxuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgaWYgKGV2KSB7XG4gICAgY29uc3QgY2hhbmdlZFRvdWNoZXMgPSBldi5jaGFuZ2VkVG91Y2hlcztcbiAgICBpZiAoY2hhbmdlZFRvdWNoZXMgJiYgY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdG91Y2ggPSBjaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIHggPSB0b3VjaC5jbGllbnRYO1xuICAgICAgeSA9IHRvdWNoLmNsaWVudFk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2LnBhZ2VYICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHggPSBldi5wYWdlWDtcbiAgICAgIHkgPSBldi5wYWdlWTtcbiAgICB9XG4gIH1cbiAgZGV0YWlsLmN1cnJlbnRYID0geDtcbiAgZGV0YWlsLmN1cnJlbnRZID0geTtcbn07XG5jb25zdCBub3cgPSAoZXYpID0+IHtcbiAgcmV0dXJuIGV2LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlR2VzdHVyZSB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IGogYXMgY2xhbXAgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgaSBhcyBpc1JUTCB9IGZyb20gJy4vZGlyLmpzJztcbmltcG9ydCB7IGNyZWF0ZUdlc3R1cmUgfSBmcm9tICcuL2luZGV4Mi5qcyc7XG5cbmNvbnN0IGNyZWF0ZVN3aXBlQmFja0dlc3R1cmUgPSAoZWwsIGNhblN0YXJ0SGFuZGxlciwgb25TdGFydEhhbmRsZXIsIG9uTW92ZUhhbmRsZXIsIG9uRW5kSGFuZGxlcikgPT4ge1xuICBjb25zdCB3aW4gPSBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBydGwgPSBpc1JUTChlbCk7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgYSBnZXN0dXJlIGlzIG5lYXIgdGhlIGVkZ2VcbiAgICogb2YgdGhlIHNjcmVlbi4gSWYgdHJ1ZSwgdGhlbiB0aGUgc3dpcGVcbiAgICogdG8gZ28gYmFjayBnZXN0dXJlIHNob3VsZCBwcm9jZWVkLlxuICAgKi9cbiAgY29uc3QgaXNBdEVkZ2UgPSAoZGV0YWlsKSA9PiB7XG4gICAgY29uc3QgdGhyZXNob2xkID0gNTA7XG4gICAgY29uc3QgeyBzdGFydFggfSA9IGRldGFpbDtcbiAgICBpZiAocnRsKSB7XG4gICAgICByZXR1cm4gc3RhcnRYID49IHdpbi5pbm5lcldpZHRoIC0gdGhyZXNob2xkO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRYIDw9IHRocmVzaG9sZDtcbiAgfTtcbiAgY29uc3QgZ2V0RGVsdGFYID0gKGRldGFpbCkgPT4ge1xuICAgIHJldHVybiBydGwgPyAtZGV0YWlsLmRlbHRhWCA6IGRldGFpbC5kZWx0YVg7XG4gIH07XG4gIGNvbnN0IGdldFZlbG9jaXR5WCA9IChkZXRhaWwpID0+IHtcbiAgICByZXR1cm4gcnRsID8gLWRldGFpbC52ZWxvY2l0eVggOiBkZXRhaWwudmVsb2NpdHlYO1xuICB9O1xuICBjb25zdCBjYW5TdGFydCA9IChkZXRhaWwpID0+IHtcbiAgICByZXR1cm4gaXNBdEVkZ2UoZGV0YWlsKSAmJiBjYW5TdGFydEhhbmRsZXIoKTtcbiAgfTtcbiAgY29uc3Qgb25Nb3ZlID0gKGRldGFpbCkgPT4ge1xuICAgIC8vIHNldCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24ncyBwcm9ncmVzc1xuICAgIGNvbnN0IGRlbHRhID0gZ2V0RGVsdGFYKGRldGFpbCk7XG4gICAgY29uc3Qgc3RlcFZhbHVlID0gZGVsdGEgLyB3aW4uaW5uZXJXaWR0aDtcbiAgICBvbk1vdmVIYW5kbGVyKHN0ZXBWYWx1ZSk7XG4gIH07XG4gIGNvbnN0IG9uRW5kID0gKGRldGFpbCkgPT4ge1xuICAgIC8vIHRoZSBzd2lwZSBiYWNrIGdlc3R1cmUgaGFzIGVuZGVkXG4gICAgY29uc3QgZGVsdGEgPSBnZXREZWx0YVgoZGV0YWlsKTtcbiAgICBjb25zdCB3aWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuICAgIGNvbnN0IHN0ZXBWYWx1ZSA9IGRlbHRhIC8gd2lkdGg7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBnZXRWZWxvY2l0eVgoZGV0YWlsKTtcbiAgICBjb25zdCB6ID0gd2lkdGggLyAyLjA7XG4gICAgY29uc3Qgc2hvdWxkQ29tcGxldGUgPSB2ZWxvY2l0eSA+PSAwICYmICh2ZWxvY2l0eSA+IDAuMiB8fCBkZWx0YSA+IHopO1xuICAgIGNvbnN0IG1pc3NpbmcgPSBzaG91bGRDb21wbGV0ZSA/IDEgLSBzdGVwVmFsdWUgOiBzdGVwVmFsdWU7XG4gICAgY29uc3QgbWlzc2luZ0Rpc3RhbmNlID0gbWlzc2luZyAqIHdpZHRoO1xuICAgIGxldCByZWFsRHVyID0gMDtcbiAgICBpZiAobWlzc2luZ0Rpc3RhbmNlID4gNSkge1xuICAgICAgY29uc3QgZHVyID0gbWlzc2luZ0Rpc3RhbmNlIC8gTWF0aC5hYnModmVsb2NpdHkpO1xuICAgICAgcmVhbER1ciA9IE1hdGgubWluKGR1ciwgNTQwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogc3RlcFZhbHVlIGNhbiBzb21ldGltZXMgcmV0dXJuIG5lZ2F0aXZlIHZhbHVlc1xuICAgICAqIG9yIHZhbHVlcyBncmVhdGVyIHRoYW4gMSB3aGljaCBzaG91bGQgbm90IGJlIHBvc3NpYmxlLlxuICAgICAqIE5lZWQgdG8gaW52ZXN0aWdhdGUgbW9yZSB0byBmaW5kIHdoZXJlIHRoZSBpc3N1ZSBpcy5cbiAgICAgKi9cbiAgICBvbkVuZEhhbmRsZXIoc2hvdWxkQ29tcGxldGUsIChzdGVwVmFsdWUgPD0gMCkgPyAwLjAxIDogY2xhbXAoMCwgc3RlcFZhbHVlLCAwLjk5OTkpLCByZWFsRHVyKTtcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUdlc3R1cmUoe1xuICAgIGVsLFxuICAgIGdlc3R1cmVOYW1lOiAnZ29iYWNrLXN3aXBlJyxcbiAgICBnZXN0dXJlUHJpb3JpdHk6IDQwLFxuICAgIHRocmVzaG9sZDogMTAsXG4gICAgY2FuU3RhcnQsXG4gICAgb25TdGFydDogb25TdGFydEhhbmRsZXIsXG4gICAgb25Nb3ZlLFxuICAgIG9uRW5kXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlU3dpcGVCYWNrR2VzdHVyZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///86167\n")}}]);