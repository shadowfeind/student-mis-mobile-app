"use strict";(self.webpackChunkstudent_mis_mobile_app=self.webpackChunkstudent_mis_mobile_app||[]).push([[3099],{53099:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pwa_camera\": () => (/* binding */ CameraPWA)\n/* harmony export */ });\n/* harmony import */ var _core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96696);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n/**\n * MediaStream ImageCapture polyfill\n *\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ImageCapture = window.ImageCapture;\nif (typeof ImageCapture === 'undefined') {\n    ImageCapture = /** @class */ (function () {\n        /**\n         * TODO https://www.w3.org/TR/image-capture/#constructors\n         *\n         * @param {MediaStreamTrack} videoStreamTrack - A MediaStreamTrack of the 'video' kind\n         */\n        function ImageCapture(videoStreamTrack) {\n            var _this = this;\n            if (videoStreamTrack.kind !== 'video')\n                throw new DOMException('NotSupportedError');\n            this._videoStreamTrack = videoStreamTrack;\n            if (!('readyState' in this._videoStreamTrack)) {\n                // Polyfill for Firefox\n                this._videoStreamTrack.readyState = 'live';\n            }\n            // MediaStream constructor not available until Chrome 55 - https://www.chromestatus.com/feature/5912172546752512\n            this._previewStream = new MediaStream([videoStreamTrack]);\n            this.videoElement = document.createElement('video');\n            this.videoElementPlaying = new Promise(function (resolve) {\n                _this.videoElement.addEventListener('playing', resolve);\n            });\n            if (HTMLMediaElement) {\n                this.videoElement.srcObject = this._previewStream; // Safari 11 doesn't allow use of createObjectURL for MediaStream\n            }\n            else {\n                this.videoElement.src = URL.createObjectURL(this._previewStream);\n            }\n            this.videoElement.muted = true;\n            this.videoElement.setAttribute('playsinline', ''); // Required by Safari on iOS 11. See https://webkit.org/blog/6784\n            this.videoElement.play();\n            this.canvasElement = document.createElement('canvas');\n            // TODO Firefox has https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\n            this.canvas2dContext = this.canvasElement.getContext('2d');\n        }\n        Object.defineProperty(ImageCapture.prototype, \"videoStreamTrack\", {\n            /**\n             * https://w3c.github.io/mediacapture-image/index.html#dom-imagecapture-videostreamtrack\n             * @return {MediaStreamTrack} The MediaStreamTrack passed into the constructor\n             */\n            get: function () {\n                return this._videoStreamTrack;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-getphotocapabilities\n         * @return {Promise<PhotoCapabilities>} Fulfilled promise with\n         * [PhotoCapabilities](https://www.w3.org/TR/image-capture/#idl-def-photocapabilities)\n         * object on success, rejected promise on failure\n         */\n        ImageCapture.prototype.getPhotoCapabilities = function () {\n            return new Promise(function executorGPC(resolve, reject) {\n                // TODO see https://github.com/w3c/mediacapture-image/issues/97\n                var MediaSettingsRange = {\n                    current: 0, min: 0, max: 0,\n                };\n                resolve({\n                    exposureCompensation: MediaSettingsRange,\n                    exposureMode: 'none',\n                    fillLightMode: ['none'],\n                    focusMode: 'none',\n                    imageHeight: MediaSettingsRange,\n                    imageWidth: MediaSettingsRange,\n                    iso: MediaSettingsRange,\n                    redEyeReduction: false,\n                    whiteBalanceMode: 'none',\n                    zoom: MediaSettingsRange,\n                });\n                reject(new DOMException('OperationError'));\n            });\n        };\n        /**\n         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-setoptions\n         * @param {Object} photoSettings - Photo settings dictionary, https://www.w3.org/TR/image-capture/#idl-def-photosettings\n         * @return {Promise<void>} Fulfilled promise on success, rejected promise on failure\n         */\n        ImageCapture.prototype.setOptions = function (_photoSettings) {\n            if (_photoSettings === void 0) { _photoSettings = {}; }\n            return new Promise(function executorSO(_resolve, _reject) {\n                // TODO\n            });\n        };\n        /**\n         * TODO\n         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-takephoto\n         * @return {Promise<Blob>} Fulfilled promise with [Blob](https://www.w3.org/TR/FileAPI/#blob)\n         * argument on success; rejected promise on failure\n         */\n        ImageCapture.prototype.takePhoto = function () {\n            var self = this;\n            return new Promise(function executorTP(resolve, reject) {\n                // `If the readyState of the MediaStreamTrack provided in the constructor is not live,\n                // return a promise rejected with a new DOMException whose name is \"InvalidStateError\".`\n                if (self._videoStreamTrack.readyState !== 'live') {\n                    return reject(new DOMException('InvalidStateError'));\n                }\n                self.videoElementPlaying.then(function () {\n                    try {\n                        self.canvasElement.width = self.videoElement.videoWidth;\n                        self.canvasElement.height = self.videoElement.videoHeight;\n                        self.canvas2dContext.drawImage(self.videoElement, 0, 0);\n                        self.canvasElement.toBlob(resolve);\n                    }\n                    catch (error) {\n                        reject(new DOMException('UnknownError'));\n                    }\n                });\n            });\n        };\n        /**\n         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-grabframe\n         * @return {Promise<ImageBitmap>} Fulfilled promise with\n         * [ImageBitmap](https://www.w3.org/TR/html51/webappapis.html#webappapis-images)\n         * argument on success; rejected promise on failure\n         */\n        ImageCapture.prototype.grabFrame = function () {\n            var self = this;\n            return new Promise(function executorGF(resolve, reject) {\n                // `If the readyState of the MediaStreamTrack provided in the constructor is not live,\n                // return a promise rejected with a new DOMException whose name is \"InvalidStateError\".`\n                if (self._videoStreamTrack.readyState !== 'live') {\n                    return reject(new DOMException('InvalidStateError'));\n                }\n                self.videoElementPlaying.then(function () {\n                    try {\n                        self.canvasElement.width = self.videoElement.videoWidth;\n                        self.canvasElement.height = self.videoElement.videoHeight;\n                        self.canvas2dContext.drawImage(self.videoElement, 0, 0);\n                        // TODO polyfill https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap for IE\n                        resolve(window.createImageBitmap(self.canvasElement));\n                    }\n                    catch (error) {\n                        reject(new DOMException('UnknownError'));\n                    }\n                });\n            });\n        };\n        return ImageCapture;\n    }());\n}\nwindow.ImageCapture = ImageCapture;\nvar CameraPWA = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.facingMode = 'user';\n        this.noDevicesText = 'No camera found';\n        this.noDevicesButtonText = 'Choose image';\n        this.showShutterOverlay = false;\n        this.flashIndex = 0;\n        this.hasCamera = null;\n        this.rotation = 0;\n        this.deviceError = null;\n        // Whether the device has multiple cameras (front/back)\n        this.hasMultipleCameras = false;\n        // Whether the device has flash support\n        this.hasFlash = false;\n        // Flash modes for camera\n        this.flashModes = [];\n        // Current flash mode\n        this.flashMode = 'off';\n        this.handlePickFile = function (_e) {\n        };\n        this.handleShutterClick = function (_e) {\n            console.debug('shutter click');\n            _this.capture();\n        };\n        this.handleRotateClick = function (_e) {\n            _this.rotate();\n        };\n        this.handleClose = function (_e) {\n            _this.handlePhoto && _this.handlePhoto(null);\n        };\n        this.handleFlashClick = function (_e) {\n            _this.cycleFlash();\n        };\n        this.handleCancelPhoto = function (_e) {\n            var track = _this.stream && _this.stream.getTracks()[0];\n            var c = track && track.getConstraints();\n            _this.photo = null;\n            _this.photoSrc = null;\n            if (c) {\n                _this.initCamera({\n                    video: {\n                        facingMode: c.facingMode\n                    }\n                });\n            }\n            else {\n                _this.initCamera();\n            }\n        };\n        this.handleAcceptPhoto = function (_e) {\n            _this.handlePhoto && _this.handlePhoto(_this.photo);\n        };\n        this.handleFileInputChange = function (e) { return __awaiter(_this, void 0, void 0, function () {\n            var input, file, orientation, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        input = e.target;\n                        file = input.files[0];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.getOrientation(file)];\n                    case 2:\n                        orientation = _a.sent();\n                        console.debug('Got orientation', orientation);\n                        this.photoOrientation = orientation;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.handlePhoto && this.handlePhoto(file);\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        this.handleVideoMetadata = function (e) {\n            console.debug('Video metadata', e);\n        };\n        this.isServer = (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.d)(this, \"isServer\");\n    }\n    class_1.prototype.componentDidLoad = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isServer) {\n                            return [2 /*return*/];\n                        }\n                        this.defaultConstraints = {\n                            video: {\n                                facingMode: this.facingMode\n                            }\n                        };\n                        // Figure out how many cameras we have\n                        return [4 /*yield*/, this.queryDevices()];\n                    case 1:\n                        // Figure out how many cameras we have\n                        _a.sent();\n                        // Initialize the camera\n                        return [4 /*yield*/, this.initCamera()];\n                    case 2:\n                        // Initialize the camera\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.componentDidUnload = function () {\n        this.stopStream();\n        this.photoSrc && URL.revokeObjectURL(this.photoSrc);\n    };\n    class_1.prototype.hasImageCapture = function () {\n        return 'ImageCapture' in window;\n    };\n    /**\n     * Query the list of connected devices and figure out how many video inputs we have.\n     */\n    class_1.prototype.queryDevices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var devices, videoDevices, e_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, navigator.mediaDevices.enumerateDevices()];\n                    case 1:\n                        devices = _a.sent();\n                        videoDevices = devices.filter(function (d) { return d.kind == 'videoinput'; });\n                        this.hasCamera = !!videoDevices.length;\n                        this.hasMultipleCameras = videoDevices.length > 1;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_2 = _a.sent();\n                        this.deviceError = e_2;\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.initCamera = function (constraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stream, e_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!constraints) {\n                            constraints = this.defaultConstraints;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(Object.assign({ video: true, audio: false }, constraints))];\n                    case 2:\n                        stream = _a.sent();\n                        this.initStream(stream);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_3 = _a.sent();\n                        this.deviceError = e_3;\n                        this.handleNoDeviceError && this.handleNoDeviceError(e_3);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.initStream = function (stream) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.stream = stream;\n                        this.videoElement.srcObject = stream;\n                        if (!this.hasImageCapture()) return [3 /*break*/, 2];\n                        this.imageCapture = new window.ImageCapture(stream.getVideoTracks()[0]);\n                        return [4 /*yield*/, this.initPhotoCapabilities(this.imageCapture)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        this.deviceError = 'No image capture';\n                        this.handleNoDeviceError && this.handleNoDeviceError();\n                        _a.label = 3;\n                    case 3:\n                        // Always re-render\n                        this.el.forceUpdate();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.initPhotoCapabilities = function (imageCapture) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, imageCapture.getPhotoCapabilities()];\n                    case 1:\n                        c = _a.sent();\n                        if (c.fillLightMode && c.fillLightMode.length > 1) {\n                            this.flashModes = c.fillLightMode.map(function (m) { return m; });\n                            // Try to recall the current flash mode\n                            if (this.flashMode) {\n                                this.flashMode = this.flashModes[this.flashModes.indexOf(this.flashMode)] || 'off';\n                                this.flashIndex = this.flashModes.indexOf(this.flashMode) || 0;\n                            }\n                            else {\n                                this.flashIndex = 0;\n                            }\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.stopStream = function () {\n        if (this.videoElement) {\n            this.videoElement.srcObject = null;\n        }\n        this.stream && this.stream.getTracks().forEach(function (track) { return track.stop(); });\n    };\n    class_1.prototype.capture = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var photo, e_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.hasImageCapture()) return [3 /*break*/, 5];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.imageCapture.takePhoto({\n                                fillLightMode: this.flashModes.length > 1 ? this.flashMode : undefined\n                            })];\n                    case 2:\n                        photo = _a.sent();\n                        return [4 /*yield*/, this.flashScreen()];\n                    case 3:\n                        _a.sent();\n                        this.promptAccept(photo);\n                        return [3 /*break*/, 5];\n                    case 4:\n                        e_4 = _a.sent();\n                        console.error('Unable to take photo!', e_4);\n                        return [3 /*break*/, 5];\n                    case 5:\n                        this.stopStream();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.promptAccept = function (photo) {\n        return __awaiter(this, void 0, void 0, function () {\n            var orientation;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.photo = photo;\n                        return [4 /*yield*/, this.getOrientation(photo)];\n                    case 1:\n                        orientation = _a.sent();\n                        console.debug('Got orientation', orientation);\n                        this.photoOrientation = orientation;\n                        if (orientation) {\n                            switch (orientation) {\n                                case 1:\n                                case 2:\n                                    this.rotation = 0;\n                                    break;\n                                case 3:\n                                case 4:\n                                    this.rotation = 180;\n                                    break;\n                                case 5:\n                                case 6:\n                                    this.rotation = 90;\n                                    break;\n                                case 7:\n                                case 8:\n                                    this.rotation = 270;\n                                    break;\n                            }\n                        }\n                        this.photoSrc = URL.createObjectURL(photo);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.getOrientation = function (file) {\n        return new Promise(function (resolve) {\n            var reader = new FileReader();\n            reader.onload = function (event) {\n                var view = new DataView(event.target.result);\n                if (view.getUint16(0, false) !== 0xFFD8) {\n                    return resolve(-2);\n                }\n                var length = view.byteLength;\n                var offset = 2;\n                while (offset < length) {\n                    var marker = view.getUint16(offset, false);\n                    offset += 2;\n                    if (marker === 0xFFE1) {\n                        if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                            return resolve(-1);\n                        }\n                        var little = view.getUint16(offset += 6, false) === 0x4949;\n                        offset += view.getUint32(offset + 4, little);\n                        var tags = view.getUint16(offset, little);\n                        offset += 2;\n                        for (var i = 0; i < tags; i++) {\n                            if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                                return resolve(view.getUint16(offset + (i * 12) + 8, little));\n                            }\n                        }\n                    }\n                    else if ((marker & 0xFF00) !== 0xFF00) {\n                        break;\n                    }\n                    else {\n                        offset += view.getUint16(offset, false);\n                    }\n                }\n                return resolve(-1);\n            };\n            reader.readAsArrayBuffer(file.slice(0, 64 * 1024));\n        });\n    };\n    class_1.prototype.rotate = function () {\n        this.stopStream();\n        var track = this.stream && this.stream.getTracks()[0];\n        if (!track) {\n            return;\n        }\n        var c = track.getConstraints();\n        var facingMode = c.facingMode;\n        if (!facingMode) {\n            var c_1 = track.getCapabilities();\n            if (c_1.facingMode) {\n                facingMode = c_1.facingMode[0];\n            }\n        }\n        if (facingMode === 'environment') {\n            this.initCamera({\n                video: {\n                    facingMode: 'user'\n                }\n            });\n        }\n        else {\n            this.initCamera({\n                video: {\n                    facingMode: 'environment'\n                }\n            });\n        }\n    };\n    class_1.prototype.setFlashMode = function (mode) {\n        console.debug('New flash mode: ', mode);\n        this.flashMode = mode;\n    };\n    class_1.prototype.cycleFlash = function () {\n        if (this.flashModes.length > 0) {\n            this.flashIndex = (this.flashIndex + 1) % this.flashModes.length;\n            this.setFlashMode(this.flashModes[this.flashIndex]);\n        }\n    };\n    class_1.prototype.flashScreen = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, _reject) {\n                        _this.showShutterOverlay = true;\n                        setTimeout(function () {\n                            _this.showShutterOverlay = false;\n                            resolve();\n                        }, 100);\n                    })];\n            });\n        });\n    };\n    class_1.prototype.iconExit = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' enable-background='new 0 0 512 512' xml:space='preserve'%3E%3Cg id='Icon_5_'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' d='M402.2,134L378,109.8c-1.6-1.6-4.1-1.6-5.7,0L258.8,223.4c-1.6,1.6-4.1,1.6-5.7,0L139.6,109.8 c-1.6-1.6-4.1-1.6-5.7,0L109.8,134c-1.6,1.6-1.6,4.1,0,5.7l113.5,113.5c1.6,1.6,1.6,4.1,0,5.7L109.8,372.4c-1.6,1.6-1.6,4.1,0,5.7 l24.1,24.1c1.6,1.6,4.1,1.6,5.7,0l113.5-113.5c1.6-1.6,4.1-1.6,5.7,0l113.5,113.5c1.6,1.6,4.1,1.6,5.7,0l24.1-24.1 c1.6-1.6,1.6-4.1,0-5.7L288.6,258.8c-1.6-1.6-1.6-4.1,0-5.7l113.5-113.5C403.7,138.1,403.7,135.5,402.2,134z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconPhotos = function () {\n        return ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"svg\", { xmlns: 'http://www.w3.org/2000/svg', width: '512', height: '512', viewBox: '0 0 512 512' }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"path\", { d: 'M450.29,112H142c-34,0-62,27.51-62,61.33V418.67C80,452.49,108,480,142,480H450c34,0,62-26.18,62-60V173.33C512,139.51,484.32,112,450.29,112Zm-77.15,61.34a46,46,0,1,1-46.28,46A46.19,46.19,0,0,1,373.14,173.33Zm-231.55,276c-17,0-29.86-13.75-29.86-30.66V353.85l90.46-80.79a46.54,46.54,0,0,1,63.44,1.83L328.27,337l-113,112.33ZM480,418.67a30.67,30.67,0,0,1-30.71,30.66H259L376.08,333a46.24,46.24,0,0,1,59.44-.16L480,370.59Z' }), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"path\", { d: 'M384,32H64A64,64,0,0,0,0,96V352a64.11,64.11,0,0,0,48,62V152a72,72,0,0,1,72-72H446A64.11,64.11,0,0,0,384,32Z' })));\n    };\n    class_1.prototype.iconConfirm = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' enable-background='new 0 0 512 512' xml:space='preserve'%3E%3Ccircle fill='%232CD865' cx='256' cy='256' r='256'/%3E%3Cg id='Icon_1_'%3E%3Cg%3E%3Cg%3E%3Cpath fill='%23FFFFFF' d='M208,301.4l-55.4-55.5c-1.5-1.5-4-1.6-5.6-0.1l-23.4,22.3c-1.6,1.6-1.7,4.1-0.1,5.7l81.6,81.4 c3.1,3.1,8.2,3.1,11.3,0l171.8-171.7c1.6-1.6,1.6-4.2-0.1-5.7l-23.4-22.3c-1.6-1.5-4.1-1.5-5.6,0.1L213.7,301.4 C212.1,303,209.6,303,208,301.4z'/%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconReverseCamera = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' enable-background='new 0 0 512 512' xml:space='preserve'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' d='M352,0H160C72,0,0,72,0,160v192c0,88,72,160,160,160h192c88,0,160-72,160-160V160C512,72,440,0,352,0z M356.7,365.8l-3.7,3.3c-27,23.2-61.4,35.9-96.8,35.9c-72.4,0-135.8-54.7-147-125.6c-0.3-1.9-2-3.3-3.9-3.3H64 c-3.3,0-5.2-3.8-3.2-6.4l61.1-81.4c1.6-2.1,4.7-2.1,6.4-0.1l63.3,81.4c2,2.6,0.2,6.5-3.2,6.5h-40.6c-2.5,0-4.5,2.4-3.9,4.8 c11.5,51.5,59.2,90.6,112.4,90.6c26.4,0,51.8-9.7,73.7-27.9l3.1-2.5c1.6-1.3,3.9-1.1,5.3,0.3l18.5,18.6 C358.5,361.6,358.4,364.3,356.7,365.8z M451.4,245.6l-61,83.5c-1.6,2.2-4.8,2.2-6.4,0.1l-63.3-83.3c-2-2.6-0.1-6.4,3.2-6.4h40.8 c2.5,0,4.4-2.3,3.9-4.8c-5.1-24.2-17.8-46.5-36.5-63.7c-21.2-19.4-48.2-30.1-76-30.1c-26.5,0-52.6,9.7-73.7,27.3l-3.1,2.5 c-1.6,1.3-3.9,1.2-5.4-0.3l-18.5-18.5c-1.6-1.6-1.5-4.3,0.2-5.9l3.5-3.1c27-23.2,61.4-35.9,96.8-35.9c38,0,73.9,13.7,101.2,38.7 c23.2,21.1,40.3,55.2,45.7,90.1c0.3,1.9,1.9,3.4,3.9,3.4h41.3C451.4,239.2,453.3,243,451.4,245.6z'/%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconRetake = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' enable-background='new 0 0 512 512' xml:space='preserve'%3E%3Ccircle fill='%23727A87' cx='256' cy='256' r='256'/%3E%3Cg id='Icon_5_'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' d='M394.2,142L370,117.8c-1.6-1.6-4.1-1.6-5.7,0L258.8,223.4c-1.6,1.6-4.1,1.6-5.7,0L147.6,117.8 c-1.6-1.6-4.1-1.6-5.7,0L117.8,142c-1.6,1.6-1.6,4.1,0,5.7l105.5,105.5c1.6,1.6,1.6,4.1,0,5.7L117.8,364.4c-1.6,1.6-1.6,4.1,0,5.7 l24.1,24.1c1.6,1.6,4.1,1.6,5.7,0l105.5-105.5c1.6-1.6,4.1-1.6,5.7,0l105.5,105.5c1.6,1.6,4.1,1.6,5.7,0l24.1-24.1 c1.6-1.6,1.6-4.1,0-5.7L288.6,258.8c-1.6-1.6-1.6-4.1,0-5.7l105.5-105.5C395.7,146.1,395.7,143.5,394.2,142z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconFlashOff = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' style='enable-background:new 0 0 512 512;' xml:space='preserve'%3E%3Cstyle type='text/css'%3E .st0%7Bfill:%23FFFFFF;%7D%0A%3C/style%3E%3Cg%3E%3Cpath class='st0' d='M498,483.7L42.3,28L14,56.4l149.8,149.8L91,293.8c-2.5,3-0.1,7.2,3.9,7.2h143.9c1.6,0,2.7,1.3,2.4,2.7 L197.6,507c-1,4.4,5.8,6.9,8.9,3.2l118.6-142.8L469.6,512L498,483.7z'/%3E%3Cpath class='st0' d='M449,218.2c2.5-3,0.1-7.2-3.9-7.2H301.2c-1.6,0-2.7-1.3-2.4-2.7L342.4,5c1-4.4-5.8-6.9-8.9-3.2L214.9,144.6 l161.3,161.3L449,218.2z'/%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconFlashOn = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' style='enable-background:new 0 0 512 512;' xml:space='preserve'%3E%3Cstyle type='text/css'%3E .st0%7Bfill:%23FFFFFF;%7D%0A%3C/style%3E%3Cpath class='st0' d='M287.2,211c-1.6,0-2.7-1.3-2.4-2.7L328.4,5c1-4.4-5.8-6.9-8.9-3.2L77,293.8c-2.5,3-0.1,7.2,3.9,7.2h143.9 c1.6,0,2.7,1.3,2.4,2.7L183.6,507c-1,4.4,5.8,6.9,8.9,3.2l242.5-292c2.5-3,0.1-7.2-3.9-7.2L287.2,211L287.2,211z'/%3E%3C/svg%3E\";\n    };\n    class_1.prototype.iconFlashAuto = function () {\n        return \"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' style='enable-background:new 0 0 512 512;' xml:space='preserve'%3E%3Cstyle type='text/css'%3E .st0%7Bfill:%23FFFFFF;%7D%0A%3C/style%3E%3Cpath class='st0' d='M287.2,211c-1.6,0-2.7-1.3-2.4-2.7L328.4,5c1-4.4-5.8-6.9-8.9-3.2L77,293.8c-2.5,3-0.1,7.2,3.9,7.2h143.9 c1.6,0,2.7,1.3,2.4,2.7L183.6,507c-1,4.4,5.8,6.9,8.9,3.2l242.5-292c2.5-3,0.1-7.2-3.9-7.2L287.2,211L287.2,211z'/%3E%3Cg%3E%3Cpath class='st0' d='M321.3,186l74-186H438l74,186h-43.5l-11.9-32.5h-80.9l-12,32.5H321.3z M415.8,47.9l-27.2,70.7h54.9l-27.2-70.7 H415.8z'/%3E%3C/g%3E%3C/svg%3E\";\n    };\n    class_1.prototype.render = function () {\n        var _this = this;\n        // const acceptStyles = { transform: `rotate(${-this.rotation}deg)` };\n        var acceptStyles = {};\n        return ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"camera-wrapper\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"camera-header\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"section\", { class: \"items\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"item close\", onClick: function (e) { return _this.handleClose(e); } }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconExit() })), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"item flash\", onClick: function (e) { return _this.handleFlashClick(e); } }, this.flashModes.length > 0 && ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", null, this.flashMode == 'off' ? (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconFlashOff() }) : '', this.flashMode == 'auto' ? (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconFlashAuto() }) : '', this.flashMode == 'flash' ? (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconFlashOn() }) : ''))))), (this.hasCamera === false || !!this.deviceError) && ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"no-device\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"h2\", null, this.noDevicesText), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { htmlFor: \"_pwa-elements-camera-input\" }, this.noDevicesButtonText), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"file\", id: \"_pwa-elements-camera-input\", onChange: this.handleFileInputChange, accept: \"image/*\", class: \"select-file-button\" }))), this.photoSrc ? ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"accept\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"accept-image\", style: Object.assign({ backgroundImage: \"url(\" + this.photoSrc + \")\" }, acceptStyles) }))) : ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"camera-video\" }, this.showShutterOverlay && ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"shutter-overlay\" })), this.hasImageCapture() ? ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"video\", { ref: function (el) { return _this.videoElement = el; }, onLoadedMetaData: this.handleVideoMetadata, autoplay: true, playsinline: true })) : ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"canvas\", { ref: function (el) { return _this.canvasElement = el; }, width: \"100%\", height: \"100%\" })), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"canvas\", { class: \"offscreen-image-render\", ref: function (e) { return _this.offscreenCanvas = e; }, width: \"100%\", height: \"100%\" }))), this.hasCamera && ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"camera-footer\" }, !this.photo ? ([\n            (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"pick-image\", onClick: this.handlePickFile }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { htmlFor: \"_pwa-elements-file-pick\" }, this.iconPhotos()), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"file\", id: \"_pwa-elements-file-pick\", onChange: this.handleFileInputChange, accept: \"image/*\", class: \"pick-image-button\" })),\n            (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"shutter\", onClick: this.handleShutterClick }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"shutter-button\" })),\n            (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rotate\", onClick: this.handleRotateClick }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconReverseCamera() })),\n        ]) : ((0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"section\", { class: \"items\" }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"item accept-cancel\", onClick: function (e) { return _this.handleCancelPhoto(e); } }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconRetake() })), (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"item accept-use\", onClick: function (e) { return _this.handleAcceptPhoto(e); } }, (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.iconConfirm() }))))))));\n    };\n    Object.defineProperty(class_1, \"assetsDirs\", {\n        get: function () { return [\"icons\"]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return (0,_core_f86805ad_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"style\", {\n        get: function () { return \":host{--header-height:4em;--footer-height:9em;--header-height-landscape:3em;--footer-height-landscape:6em;--shutter-size:6em;--icon-size-header:1.5em;--icon-size-footer:2.5em;--margin-size-header:1.5em;--margin-size-footer:2.0em;font-family:-apple-system,BlinkMacSystemFont,“Segoe UI”,“Roboto”,“Droid Sans”,“Helvetica Neue”,sans-serif;display:block}.items,:host{width:100%;height:100%}.items{-webkit-box-sizing:border-box;box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.items .item{-ms-flex:1;flex:1;text-align:center}.items .item:first-child{text-align:left}.items .item:last-child{text-align:right}.camera-wrapper{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%}.camera-header{color:#fff;background-color:#000;height:var(--header-height)}.camera-header .items{padding:var(--margin-size-header)}.camera-footer{position:relative;color:#fff;background-color:#000;height:var(--footer-height)}.camera-footer .items{padding:var(--margin-size-footer)}\\@media (max-height:375px){.camera-header{--header-height:var(--header-height-landscape)}.camera-footer{--footer-height:var(--footer-height-landscape)}.camera-footer .shutter{--shutter-size:4em}}.camera-video{position:relative;-ms-flex:1;flex:1;overflow:hidden}.camera-video,video{background-color:#000}video{width:100%;height:100%;max-height:100%;min-height:100%;-o-object-fit:cover;object-fit:cover}.pick-image{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:absolute;left:var(--margin-size-footer);top:0;height:100%;width:var(--icon-size-footer);color:#fff}.pick-image input{visibility:hidden}.pick-image svg{cursor:pointer;fill:#fff;width:var(--icon-size-footer);height:var(--icon-size-footer)}.shutter{position:absolute;left:50%;top:50%;width:var(--shutter-size);height:var(--shutter-size);margin-top:calc(var(--shutter-size) / -2);margin-left:calc(var(--shutter-size) / -2);border-radius:100%;background-color:#c6cdd8;padding:12px;-webkit-box-sizing:border-box;box-sizing:border-box}.shutter:active .shutter-button{background-color:#9da9bb}.shutter-button{background-color:#fff;border-radius:100%;width:100%;height:100%}.rotate{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:absolute;right:var(--margin-size-footer);top:0;height:100%;color:#fff}.rotate,.rotate img{width:var(--icon-size-footer)}.rotate img{height:var(--icon-size-footer)}.shutter-overlay{z-index:5;position:absolute;width:100%;height:100%;background-color:#000}.error{width:100%;height:100%;-ms-flex-pack:center;-ms-flex-align:center}.error,.no-device{color:#fff;display:-ms-flexbox;display:flex;justify-content:center;align-items:center}.no-device{background-color:#000;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;-ms-flex-pack:center}.no-device label{cursor:pointer;background:#fff;border-radius:6px;padding:6px 8px;color:#000}.no-device input{visibility:hidden;height:0;margin-top:16px}.accept{background-color:#000;-ms-flex:1;flex:1;overflow:hidden}.accept .accept-image{width:100%;height:100%;max-height:100%;background-position:50%;background-size:cover;background-repeat:no-repeat}.close img{cursor:pointer}.close img,.flash img{width:var(--icon-size-header);height:var(--icon-size-header)}.accept-cancel img,.accept-use img{width:var(--icon-size-footer);height:var(--icon-size-footer)}.offscreen-image-render{top:0;left:0;visibility:hidden;pointer-events:none;width:100%;height:100%}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53099\n")}}]);