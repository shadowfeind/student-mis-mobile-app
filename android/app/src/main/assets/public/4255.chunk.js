"use strict";(self.webpackChunkstudent_mis_mobile_app=self.webpackChunkstudent_mis_mobile_app||[]).push([[4255],{29895:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"xz\": () => (/* binding */ CapacitorException),\n/* harmony export */   \"Uw\": () => (/* binding */ WebPlugin),\n/* harmony export */   \"fo\": () => (/* binding */ registerPlugin)\n/* harmony export */ });\n/* unused harmony exports Capacitor, CapacitorPlatforms, ExceptionCode, Plugins, WebView, addPlatform, registerWebPlugin, setPlatform */\n/*! Capacitor: https://capacitorjs.com/ - MIT License */\nconst createCapacitorPlatforms = (win) => {\n    const defaultPlatformMap = new Map();\n    defaultPlatformMap.set('web', { name: 'web' });\n    const capPlatforms = win.CapacitorPlatforms || {\n        currentPlatform: { name: 'web' },\n        platforms: defaultPlatformMap,\n    };\n    const addPlatform = (name, platform) => {\n        capPlatforms.platforms.set(name, platform);\n    };\n    const setPlatform = (name) => {\n        if (capPlatforms.platforms.has(name)) {\n            capPlatforms.currentPlatform = capPlatforms.platforms.get(name);\n        }\n    };\n    capPlatforms.addPlatform = addPlatform;\n    capPlatforms.setPlatform = setPlatform;\n    return capPlatforms;\n};\nconst initPlatforms = (win) => (win.CapacitorPlatforms = createCapacitorPlatforms(win));\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\nconst CapacitorPlatforms = /*#__PURE__*/ initPlatforms((typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n        ? self\n        : typeof window !== 'undefined'\n            ? window\n            : typeof __webpack_require__.g !== 'undefined'\n                ? __webpack_require__.g\n                : {}));\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\nconst addPlatform = CapacitorPlatforms.addPlatform;\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\nconst setPlatform = CapacitorPlatforms.setPlatform;\n\nconst legacyRegisterWebPlugin = (cap, webPlugin) => {\n    var _a;\n    const config = webPlugin.config;\n    const Plugins = cap.Plugins;\n    if (!config || !config.name) {\n        // TODO: add link to upgrade guide\n        throw new Error(`Capacitor WebPlugin is using the deprecated \"registerWebPlugin()\" function, but without the config. Please use \"registerPlugin()\" instead to register this web plugin.\"`);\n    }\n    // TODO: add link to upgrade guide\n    console.warn(`Capacitor plugin \"${config.name}\" is using the deprecated \"registerWebPlugin()\" function`);\n    if (!Plugins[config.name] || ((_a = config === null || config === void 0 ? void 0 : config.platforms) === null || _a === void 0 ? void 0 : _a.includes(cap.getPlatform()))) {\n        // Add the web plugin into the plugins registry if there already isn't\n        // an existing one. If it doesn't already exist, that means\n        // there's no existing native implementation for it.\n        // - OR -\n        // If we already have a plugin registered (meaning it was defined in the native layer),\n        // then we should only overwrite it if the corresponding web plugin activates on\n        // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n        Plugins[config.name] = webPlugin;\n    }\n};\n\nvar ExceptionCode;\n(function (ExceptionCode) {\n    /**\n     * API is not implemented.\n     *\n     * This usually means the API can't be used because it is not implemented for\n     * the current platform.\n     */\n    ExceptionCode[\"Unimplemented\"] = \"UNIMPLEMENTED\";\n    /**\n     * API is not available.\n     *\n     * This means the API can't be used right now because:\n     *   - it is currently missing a prerequisite, such as network connectivity\n     *   - it requires a particular platform or browser version\n     */\n    ExceptionCode[\"Unavailable\"] = \"UNAVAILABLE\";\n})(ExceptionCode || (ExceptionCode = {}));\nclass CapacitorException extends Error {\n    constructor(message, code) {\n        super(message);\n        this.message = message;\n        this.code = code;\n    }\n}\nconst getPlatformId = (win) => {\n    var _a, _b;\n    if (win === null || win === void 0 ? void 0 : win.androidBridge) {\n        return 'android';\n    }\n    else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {\n        return 'ios';\n    }\n    else {\n        return 'web';\n    }\n};\n\nconst createCapacitor = (win) => {\n    var _a, _b, _c, _d, _e;\n    const capCustomPlatform = win.CapacitorCustomPlatform || null;\n    const cap = win.Capacitor || {};\n    const Plugins = (cap.Plugins = cap.Plugins || {});\n    /**\n     * @deprecated Use `capCustomPlatform` instead, default functions like registerPlugin will function with the new object.\n     */\n    const capPlatforms = win.CapacitorPlatforms;\n    const defaultGetPlatform = () => {\n        return capCustomPlatform !== null\n            ? capCustomPlatform.name\n            : getPlatformId(win);\n    };\n    const getPlatform = ((_a = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _a === void 0 ? void 0 : _a.getPlatform) || defaultGetPlatform;\n    const defaultIsNativePlatform = () => getPlatform() !== 'web';\n    const isNativePlatform = ((_b = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _b === void 0 ? void 0 : _b.isNativePlatform) || defaultIsNativePlatform;\n    const defaultIsPluginAvailable = (pluginName) => {\n        const plugin = registeredPlugins.get(pluginName);\n        if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {\n            // JS implementation available for the current platform.\n            return true;\n        }\n        if (getPluginHeader(pluginName)) {\n            // Native implementation available.\n            return true;\n        }\n        return false;\n    };\n    const isPluginAvailable = ((_c = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _c === void 0 ? void 0 : _c.isPluginAvailable) ||\n        defaultIsPluginAvailable;\n    const defaultGetPluginHeader = (pluginName) => { var _a; return (_a = cap.PluginHeaders) === null || _a === void 0 ? void 0 : _a.find(h => h.name === pluginName); };\n    const getPluginHeader = ((_d = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _d === void 0 ? void 0 : _d.getPluginHeader) || defaultGetPluginHeader;\n    const handleError = (err) => win.console.error(err);\n    const pluginMethodNoop = (_target, prop, pluginName) => {\n        return Promise.reject(`${pluginName} does not have an implementation of \"${prop}\".`);\n    };\n    const registeredPlugins = new Map();\n    const defaultRegisterPlugin = (pluginName, jsImplementations = {}) => {\n        const registeredPlugin = registeredPlugins.get(pluginName);\n        if (registeredPlugin) {\n            console.warn(`Capacitor plugin \"${pluginName}\" already registered. Cannot register plugins twice.`);\n            return registeredPlugin.proxy;\n        }\n        const platform = getPlatform();\n        const pluginHeader = getPluginHeader(pluginName);\n        let jsImplementation;\n        const loadPluginImplementation = async () => {\n            if (!jsImplementation && platform in jsImplementations) {\n                jsImplementation =\n                    typeof jsImplementations[platform] === 'function'\n                        ? (jsImplementation = await jsImplementations[platform]())\n                        : (jsImplementation = jsImplementations[platform]);\n            }\n            else if (capCustomPlatform !== null &&\n                !jsImplementation &&\n                'web' in jsImplementations) {\n                jsImplementation =\n                    typeof jsImplementations['web'] === 'function'\n                        ? (jsImplementation = await jsImplementations['web']())\n                        : (jsImplementation = jsImplementations['web']);\n            }\n            return jsImplementation;\n        };\n        const createPluginMethod = (impl, prop) => {\n            var _a, _b;\n            if (pluginHeader) {\n                const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find(m => prop === m.name);\n                if (methodHeader) {\n                    if (methodHeader.rtype === 'promise') {\n                        return (options) => cap.nativePromise(pluginName, prop.toString(), options);\n                    }\n                    else {\n                        return (options, callback) => cap.nativeCallback(pluginName, prop.toString(), options, callback);\n                    }\n                }\n                else if (impl) {\n                    return (_a = impl[prop]) === null || _a === void 0 ? void 0 : _a.bind(impl);\n                }\n            }\n            else if (impl) {\n                return (_b = impl[prop]) === null || _b === void 0 ? void 0 : _b.bind(impl);\n            }\n            else {\n                throw new CapacitorException(`\"${pluginName}\" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n            }\n        };\n        const createPluginMethodWrapper = (prop) => {\n            let remove;\n            const wrapper = (...args) => {\n                const p = loadPluginImplementation().then(impl => {\n                    const fn = createPluginMethod(impl, prop);\n                    if (fn) {\n                        const p = fn(...args);\n                        remove = p === null || p === void 0 ? void 0 : p.remove;\n                        return p;\n                    }\n                    else {\n                        throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n                    }\n                });\n                if (prop === 'addListener') {\n                    p.remove = async () => remove();\n                }\n                return p;\n            };\n            // Some flair ✨\n            wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;\n            Object.defineProperty(wrapper, 'name', {\n                value: prop,\n                writable: false,\n                configurable: false,\n            });\n            return wrapper;\n        };\n        const addListener = createPluginMethodWrapper('addListener');\n        const removeListener = createPluginMethodWrapper('removeListener');\n        const addListenerNative = (eventName, callback) => {\n            const call = addListener({ eventName }, callback);\n            const remove = async () => {\n                const callbackId = await call;\n                removeListener({\n                    eventName,\n                    callbackId,\n                }, callback);\n            };\n            const p = new Promise(resolve => call.then(() => resolve({ remove })));\n            p.remove = async () => {\n                console.warn(`Using addListener() without 'await' is deprecated.`);\n                await remove();\n            };\n            return p;\n        };\n        const proxy = new Proxy({}, {\n            get(_, prop) {\n                switch (prop) {\n                    // https://github.com/facebook/react/issues/20030\n                    case '$$typeof':\n                        return undefined;\n                    case 'toJSON':\n                        return () => ({});\n                    case 'addListener':\n                        return pluginHeader ? addListenerNative : addListener;\n                    case 'removeListener':\n                        return removeListener;\n                    default:\n                        return createPluginMethodWrapper(prop);\n                }\n            },\n        });\n        Plugins[pluginName] = proxy;\n        registeredPlugins.set(pluginName, {\n            name: pluginName,\n            proxy,\n            platforms: new Set([\n                ...Object.keys(jsImplementations),\n                ...(pluginHeader ? [platform] : []),\n            ]),\n        });\n        return proxy;\n    };\n    const registerPlugin = ((_e = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _e === void 0 ? void 0 : _e.registerPlugin) || defaultRegisterPlugin;\n    // Add in convertFileSrc for web, it will already be available in native context\n    if (!cap.convertFileSrc) {\n        cap.convertFileSrc = filePath => filePath;\n    }\n    cap.getPlatform = getPlatform;\n    cap.handleError = handleError;\n    cap.isNativePlatform = isNativePlatform;\n    cap.isPluginAvailable = isPluginAvailable;\n    cap.pluginMethodNoop = pluginMethodNoop;\n    cap.registerPlugin = registerPlugin;\n    cap.Exception = CapacitorException;\n    cap.DEBUG = !!cap.DEBUG;\n    cap.isLoggingEnabled = !!cap.isLoggingEnabled;\n    // Deprecated props\n    cap.platform = cap.getPlatform();\n    cap.isNative = cap.isNativePlatform();\n    return cap;\n};\nconst initCapacitorGlobal = (win) => (win.Capacitor = createCapacitor(win));\n\nconst Capacitor = /*#__PURE__*/ initCapacitorGlobal(typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n        ? self\n        : typeof window !== 'undefined'\n            ? window\n            : typeof __webpack_require__.g !== 'undefined'\n                ? __webpack_require__.g\n                : {});\nconst registerPlugin = Capacitor.registerPlugin;\n/**\n * @deprecated Provided for backwards compatibility for Capacitor v2 plugins.\n * Capacitor v3 plugins should import the plugin directly. This \"Plugins\"\n * export is deprecated in v3, and will be removed in v4.\n */\nconst Plugins = Capacitor.Plugins;\n/**\n * Provided for backwards compatibility. Use the registerPlugin() API\n * instead, and provide the web plugin as the \"web\" implmenetation.\n * For example\n *\n * export const Example = registerPlugin('Example', {\n *   web: () => import('./web').then(m => new m.Example())\n * })\n *\n * @deprecated Deprecated in v3, will be removed from v4.\n */\nconst registerWebPlugin = (plugin) => legacyRegisterWebPlugin(Capacitor, plugin);\n\n/**\n * Base class web plugins should extend.\n */\nclass WebPlugin {\n    constructor(config) {\n        this.listeners = {};\n        this.windowListeners = {};\n        if (config) {\n            // TODO: add link to upgrade guide\n            console.warn(`Capacitor WebPlugin \"${config.name}\" config object was deprecated in v3 and will be removed in v4.`);\n            this.config = config;\n        }\n    }\n    addListener(eventName, listenerFunc) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            this.listeners[eventName] = [];\n        }\n        this.listeners[eventName].push(listenerFunc);\n        // If we haven't added a window listener for this event and it requires one,\n        // go ahead and add it\n        const windowListener = this.windowListeners[eventName];\n        if (windowListener && !windowListener.registered) {\n            this.addWindowListener(windowListener);\n        }\n        const remove = async () => this.removeListener(eventName, listenerFunc);\n        const p = Promise.resolve({ remove });\n        Object.defineProperty(p, 'remove', {\n            value: async () => {\n                console.warn(`Using addListener() without 'await' is deprecated.`);\n                await remove();\n            },\n        });\n        return p;\n    }\n    async removeAllListeners() {\n        this.listeners = {};\n        for (const listener in this.windowListeners) {\n            this.removeWindowListener(this.windowListeners[listener]);\n        }\n        this.windowListeners = {};\n    }\n    notifyListeners(eventName, data) {\n        const listeners = this.listeners[eventName];\n        if (listeners) {\n            listeners.forEach(listener => listener(data));\n        }\n    }\n    hasListeners(eventName) {\n        return !!this.listeners[eventName].length;\n    }\n    registerWindowListener(windowEventName, pluginEventName) {\n        this.windowListeners[pluginEventName] = {\n            registered: false,\n            windowEventName,\n            pluginEventName,\n            handler: event => {\n                this.notifyListeners(pluginEventName, event);\n            },\n        };\n    }\n    unimplemented(msg = 'not implemented') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);\n    }\n    unavailable(msg = 'not available') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unavailable);\n    }\n    async removeListener(eventName, listenerFunc) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        const index = listeners.indexOf(listenerFunc);\n        this.listeners[eventName].splice(index, 1);\n        // If there are no more listeners for this type of event,\n        // remove the window listener\n        if (!this.listeners[eventName].length) {\n            this.removeWindowListener(this.windowListeners[eventName]);\n        }\n    }\n    addWindowListener(handle) {\n        window.addEventListener(handle.windowEventName, handle.handler);\n        handle.registered = true;\n    }\n    removeWindowListener(handle) {\n        if (!handle) {\n            return;\n        }\n        window.removeEventListener(handle.windowEventName, handle.handler);\n        handle.registered = false;\n    }\n}\n\nconst WebView = /*#__PURE__*/ (/* unused pure expression or super */ null && (registerPlugin('WebView')));\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29895\n")},60773:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"V\": () => (/* binding */ PushNotifications)\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29895);\n\nconst PushNotifications = (0,_capacitor_core__WEBPACK_IMPORTED_MODULE_0__/* .registerPlugin */ .fo)('PushNotifications', {});\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA3NzMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFpRDtBQUNqRCwwQkFBMEIseUVBQWMsd0JBQXdCO0FBQ2xDO0FBQ0Q7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0BjYXBhY2l0b3IvcHVzaC1ub3RpZmljYXRpb25zL2Rpc3QvZXNtL2luZGV4LmpzPzZhYzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXJQbHVnaW4gfSBmcm9tICdAY2FwYWNpdG9yL2NvcmUnO1xuY29uc3QgUHVzaE5vdGlmaWNhdGlvbnMgPSByZWdpc3RlclBsdWdpbignUHVzaE5vdGlmaWNhdGlvbnMnLCB7fSk7XG5leHBvcnQgKiBmcm9tICcuL2RlZmluaXRpb25zJztcbmV4cG9ydCB7IFB1c2hOb3RpZmljYXRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60773\n")},12634:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* unused harmony export Toast */\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29895);\n\nconst Toast = (0,_capacitor_core__WEBPACK_IMPORTED_MODULE_0__/* .registerPlugin */ .fo)('Toast', {\n    web: () => __webpack_require__.e(/* import() */ 5056).then(__webpack_require__.bind(__webpack_require__, 15056)).then(m => new m.ToastWeb()),\n});\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2MzQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBaUQ7QUFDakQsY0FBYyx5RUFBYztBQUM1QixlQUFlLHFHQUFlO0FBQzlCLENBQUM7QUFDNkI7QUFDYjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGNhcGFjaXRvci90b2FzdC9kaXN0L2VzbS9pbmRleC5qcz9hZjRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlZ2lzdGVyUGx1Z2luIH0gZnJvbSAnQGNhcGFjaXRvci9jb3JlJztcbmNvbnN0IFRvYXN0ID0gcmVnaXN0ZXJQbHVnaW4oJ1RvYXN0Jywge1xuICAgIHdlYjogKCkgPT4gaW1wb3J0KCcuL3dlYicpLnRoZW4obSA9PiBuZXcgbS5Ub2FzdFdlYigpKSxcbn0pO1xuZXhwb3J0ICogZnJvbSAnLi9kZWZpbml0aW9ucyc7XG5leHBvcnQgeyBUb2FzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12634\n")},96587:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": () => (/* binding */ componentOnReady),\n/* harmony export */   \"j\": () => (/* binding */ clamp),\n/* harmony export */   \"r\": () => (/* binding */ raf),\n/* harmony export */   \"s\": () => (/* binding */ shallowEqualStringMap)\n/* harmony export */ });\n/* unused harmony exports a, b, d, e, f, g, h, i, k, l, m, n, o, p, q, t */\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst transitionEndAsync = (el, expectedDuration = 0) => {\n  return new Promise(resolve => {\n    transitionEnd(el, expectedDuration, resolve);\n  });\n};\n/**\n * Allows developer to wait for a transition\n * to finish and fallback to a timer if the\n * transition is cancelled or otherwise\n * never finishes. Also see transitionEndAsync\n * which is an await-able version of this.\n */\nconst transitionEnd = (el, expectedDuration = 0, callback) => {\n  let unRegTrans;\n  let animationTimeout;\n  const opts = { passive: true };\n  const ANIMATION_FALLBACK_TIMEOUT = 500;\n  const unregister = () => {\n    if (unRegTrans) {\n      unRegTrans();\n    }\n  };\n  const onTransitionEnd = (ev) => {\n    if (ev === undefined || el === ev.target) {\n      unregister();\n      callback(ev);\n    }\n  };\n  if (el) {\n    el.addEventListener('webkitTransitionEnd', onTransitionEnd, opts);\n    el.addEventListener('transitionend', onTransitionEnd, opts);\n    animationTimeout = setTimeout(onTransitionEnd, expectedDuration + ANIMATION_FALLBACK_TIMEOUT);\n    unRegTrans = () => {\n      if (animationTimeout) {\n        clearTimeout(animationTimeout);\n        animationTimeout = undefined;\n      }\n      el.removeEventListener('webkitTransitionEnd', onTransitionEnd, opts);\n      el.removeEventListener('transitionend', onTransitionEnd, opts);\n    };\n  }\n  return unregister;\n};\n/**\n * Waits for a component to be ready for\n * both custom element and non-custom element builds.\n * If non-custom element build, el.componentOnReady\n * will be used.\n * For custom element builds, we wait a frame\n * so that the inner contents of the component\n * have a chance to render.\n *\n * Use this utility rather than calling\n * el.componentOnReady yourself.\n */\nconst componentOnReady = (el, callback) => {\n  if (el.componentOnReady) {\n    el.componentOnReady().then((resolvedEl) => callback(resolvedEl));\n  }\n  else {\n    raf(() => callback(el));\n  }\n};\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\nconst addEventListener = (el, eventName, callback, opts) => {\n  if (typeof window !== 'undefined') {\n    const win = window;\n    const config = win && win.Ionic && win.Ionic.config;\n    if (config) {\n      const ael = config.get('_ael');\n      if (ael) {\n        return ael(el, eventName, callback, opts);\n      }\n      else if (config._ael) {\n        return config._ael(el, eventName, callback, opts);\n      }\n    }\n  }\n  return el.addEventListener(eventName, callback, opts);\n};\nconst removeEventListener = (el, eventName, callback, opts) => {\n  if (typeof window !== 'undefined') {\n    const win = window;\n    const config = win && win.Ionic && win.Ionic.config;\n    if (config) {\n      const rel = config.get('_rel');\n      if (rel) {\n        return rel(el, eventName, callback, opts);\n      }\n      else if (config._rel) {\n        return config._rel(el, eventName, callback, opts);\n      }\n    }\n  }\n  return el.removeEventListener(eventName, callback, opts);\n};\n/**\n * Gets the root context of a shadow dom element\n * On newer browsers this will be the shadowRoot,\n * but for older browser this may just be the\n * element itself.\n *\n * Useful for whenever you need to explicitly\n * do \"myElement.shadowRoot!.querySelector(...)\".\n */\nconst getElementRoot = (el, fallback = el) => {\n  return el.shadowRoot || fallback;\n};\n/**\n * Patched version of requestAnimationFrame that avoids ngzone\n * Use only when you know ngzone should not run\n */\nconst raf = (h) => {\n  if (typeof __zone_symbol__requestAnimationFrame === 'function') {\n    return __zone_symbol__requestAnimationFrame(h);\n  }\n  if (typeof requestAnimationFrame === 'function') {\n    return requestAnimationFrame(h);\n  }\n  return setTimeout(h);\n};\nconst hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\nconst findItemLabel = (componentEl) => {\n  const itemEl = componentEl.closest('ion-item');\n  if (itemEl) {\n    return itemEl.querySelector('ion-label');\n  }\n  return null;\n};\nconst focusElement = (el) => {\n  el.focus();\n  /**\n   * When programmatically focusing an element,\n   * the focus-visible utility will not run because\n   * it is expecting a keyboard event to have triggered this;\n   * however, there are times when we need to manually control\n   * this behavior so we call the `setFocus` method on ion-app\n   * which will let us explicitly set the elements to focus.\n   */\n  if (el.classList.contains('ion-focusable')) {\n    const app = el.closest('ion-app');\n    if (app) {\n      app.setFocus([el]);\n    }\n  }\n};\n/**\n * This method is used for Ionic's input components that use Shadow DOM. In\n * order to properly label the inputs to work with screen readers, we need\n * to get the text content of the label outside of the shadow root and pass\n * it to the input inside of the shadow root.\n *\n * Referencing label elements by id from outside of the component is\n * impossible due to the shadow boundary, read more here:\n * https://developer.salesforce.com/blogs/2020/01/accessibility-for-web-components.html\n *\n * @param componentEl The shadow element that needs the aria label\n * @param inputId The unique identifier for the input\n */\nconst getAriaLabel = (componentEl, inputId) => {\n  let labelText;\n  // If the user provides their own label via the aria-labelledby attr\n  // we should use that instead of looking for an ion-label\n  const labelledBy = componentEl.getAttribute('aria-labelledby');\n  // Grab the id off of the component in case they are using\n  // a custom label using the label element\n  const componentId = componentEl.id;\n  let labelId = labelledBy !== null && labelledBy.trim() !== ''\n    ? labelledBy\n    : inputId + '-lbl';\n  let label = labelledBy !== null && labelledBy.trim() !== ''\n    ? document.getElementById(labelledBy)\n    : findItemLabel(componentEl);\n  if (label) {\n    if (labelledBy === null) {\n      label.id = labelId;\n    }\n    labelText = label.textContent;\n    label.setAttribute('aria-hidden', 'true');\n    // if there is no label, check to see if the user has provided\n    // one by setting an id on the component and using the label element\n  }\n  else if (componentId.trim() !== '') {\n    label = document.querySelector(`label[for=\"${componentId}\"]`);\n    if (label) {\n      if (label.id !== '') {\n        labelId = label.id;\n      }\n      else {\n        label.id = labelId = `${componentId}-lbl`;\n      }\n      labelText = label.textContent;\n    }\n  }\n  return { label, labelId, labelText };\n};\n/**\n * This method is used to add a hidden input to a host element that contains\n * a Shadow DOM. It does not add the input inside of the Shadow root which\n * allows it to be picked up inside of forms. It should contain the same\n * values as the host element.\n *\n * @param always Add a hidden input even if the container does not use Shadow\n * @param container The element where the input will be added\n * @param name The name of the input\n * @param value The value of the input\n * @param disabled If true, the input is disabled\n */\nconst renderHiddenInput = (always, container, name, value, disabled) => {\n  if (always || hasShadowDom(container)) {\n    let input = container.querySelector('input.aux-input');\n    if (!input) {\n      input = container.ownerDocument.createElement('input');\n      input.type = 'hidden';\n      input.classList.add('aux-input');\n      container.appendChild(input);\n    }\n    input.disabled = disabled;\n    input.name = name;\n    input.value = value || '';\n  }\n};\nconst clamp = (min, n, max) => {\n  return Math.max(min, Math.min(n, max));\n};\nconst assert = (actual, reason) => {\n  if (!actual) {\n    const message = 'ASSERT: ' + reason;\n    console.error(message);\n    debugger; // tslint:disable-line\n    throw new Error(message);\n  }\n};\nconst now = (ev) => {\n  return ev.timeStamp || Date.now();\n};\nconst pointerCoord = (ev) => {\n  // get X coordinates for either a mouse click\n  // or a touch depending on the given event\n  if (ev) {\n    const changedTouches = ev.changedTouches;\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      return { x: touch.clientX, y: touch.clientY };\n    }\n    if (ev.pageX !== undefined) {\n      return { x: ev.pageX, y: ev.pageY };\n    }\n  }\n  return { x: 0, y: 0 };\n};\n/**\n * @hidden\n * Given a side, return if it should be on the end\n * based on the value of dir\n * @param side the side\n * @param isRTL whether the application dir is rtl\n */\nconst isEndSide = (side) => {\n  const isRTL = document.dir === 'rtl';\n  switch (side) {\n    case 'start': return isRTL;\n    case 'end': return !isRTL;\n    default:\n      throw new Error(`\"${side}\" is not a valid value for [side]. Use \"start\" or \"end\" instead.`);\n  }\n};\nconst debounceEvent = (event, wait) => {\n  const original = event._original || event;\n  return {\n    _original: event,\n    emit: debounce(original.emit.bind(original), wait)\n  };\n};\nconst debounce = (func, wait = 0) => {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(func, wait, ...args);\n  };\n};\n/**\n * Check whether the two string maps are shallow equal.\n *\n * undefined is treated as an empty map.\n *\n * @returns whether the keys are the same and the values are shallow equal.\n */\nconst shallowEqualStringMap = (map1, map2) => {\n  map1 !== null && map1 !== void 0 ? map1 : (map1 = {});\n  map2 !== null && map2 !== void 0 ? map2 : (map2 = {});\n  if (map1 === map2) {\n    return true;\n  }\n  const keys1 = Object.keys(map1);\n  if (keys1.length !== Object.keys(map2).length) {\n    return false;\n  }\n  for (const k1 of keys1) {\n    if (!(k1 in map2)) {\n      return false;\n    }\n    if (map1[k1] !== map2[k1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96587\n")},55026:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"g\": () => (/* binding */ getIonPageElement),\n/* harmony export */   \"t\": () => (/* binding */ transition)\n/* harmony export */ });\n/* unused harmony exports L, a, b, c, d, e, l, s */\n/* harmony import */ var _stencil_core_internal_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77210);\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96587);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\nconst LIFECYCLE_WILL_ENTER = 'ionViewWillEnter';\nconst LIFECYCLE_DID_ENTER = 'ionViewDidEnter';\nconst LIFECYCLE_WILL_LEAVE = 'ionViewWillLeave';\nconst LIFECYCLE_DID_LEAVE = 'ionViewDidLeave';\nconst LIFECYCLE_WILL_UNLOAD = 'ionViewWillUnload';\n\nconst iosTransitionAnimation = () => Promise.all(/* import() */[__webpack_require__.e(5980), __webpack_require__.e(6338)]).then(__webpack_require__.bind(__webpack_require__, 56338));\nconst mdTransitionAnimation = () => Promise.all(/* import() */[__webpack_require__.e(5980), __webpack_require__.e(4753)]).then(__webpack_require__.bind(__webpack_require__, 74753));\nconst transition = (opts) => {\n  return new Promise((resolve, reject) => {\n    (0,_stencil_core_internal_client__WEBPACK_IMPORTED_MODULE_0__/* .writeTask */ .Iu)(() => {\n      beforeTransition(opts);\n      runTransition(opts).then(result => {\n        if (result.animation) {\n          result.animation.destroy();\n        }\n        afterTransition(opts);\n        resolve(result);\n      }, error => {\n        afterTransition(opts);\n        reject(error);\n      });\n    });\n  });\n};\nconst beforeTransition = (opts) => {\n  const enteringEl = opts.enteringEl;\n  const leavingEl = opts.leavingEl;\n  setZIndex(enteringEl, leavingEl, opts.direction);\n  if (opts.showGoBack) {\n    enteringEl.classList.add('can-go-back');\n  }\n  else {\n    enteringEl.classList.remove('can-go-back');\n  }\n  setPageHidden(enteringEl, false);\n  /**\n   * When transitioning, the page should not\n   * respond to click events. This resolves small\n   * issues like users double tapping the ion-back-button.\n   * These pointer events are removed in `afterTransition`.\n   */\n  enteringEl.style.setProperty('pointer-events', 'none');\n  if (leavingEl) {\n    setPageHidden(leavingEl, false);\n    leavingEl.style.setProperty('pointer-events', 'none');\n  }\n};\nconst runTransition = async (opts) => {\n  const animationBuilder = await getAnimationBuilder(opts);\n  const ani = (animationBuilder && _stencil_core_internal_client__WEBPACK_IMPORTED_MODULE_0__/* .Build.isBrowser */ .Z5.isBrowser)\n    ? animation(animationBuilder, opts)\n    : noAnimation(opts); // fast path for no animation\n  return ani;\n};\nconst afterTransition = (opts) => {\n  const enteringEl = opts.enteringEl;\n  const leavingEl = opts.leavingEl;\n  enteringEl.classList.remove('ion-page-invisible');\n  enteringEl.style.removeProperty('pointer-events');\n  if (leavingEl !== undefined) {\n    leavingEl.classList.remove('ion-page-invisible');\n    leavingEl.style.removeProperty('pointer-events');\n  }\n};\nconst getAnimationBuilder = async (opts) => {\n  if (!opts.leavingEl || !opts.animated || opts.duration === 0) {\n    return undefined;\n  }\n  if (opts.animationBuilder) {\n    return opts.animationBuilder;\n  }\n  const getAnimation = (opts.mode === 'ios')\n    ? (await iosTransitionAnimation()).iosTransitionAnimation\n    : (await mdTransitionAnimation()).mdTransitionAnimation;\n  return getAnimation;\n};\nconst animation = async (animationBuilder, opts) => {\n  await waitForReady(opts, true);\n  const trans = animationBuilder(opts.baseEl, opts);\n  fireWillEvents(opts.enteringEl, opts.leavingEl);\n  const didComplete = await playTransition(trans, opts);\n  if (opts.progressCallback) {\n    opts.progressCallback(undefined);\n  }\n  if (didComplete) {\n    fireDidEvents(opts.enteringEl, opts.leavingEl);\n  }\n  return {\n    hasCompleted: didComplete,\n    animation: trans\n  };\n};\nconst noAnimation = async (opts) => {\n  const enteringEl = opts.enteringEl;\n  const leavingEl = opts.leavingEl;\n  await waitForReady(opts, false);\n  fireWillEvents(enteringEl, leavingEl);\n  fireDidEvents(enteringEl, leavingEl);\n  return {\n    hasCompleted: true\n  };\n};\nconst waitForReady = async (opts, defaultDeep) => {\n  const deep = opts.deepWait !== undefined ? opts.deepWait : defaultDeep;\n  const promises = deep ? [\n    deepReady(opts.enteringEl),\n    deepReady(opts.leavingEl),\n  ] : [\n    shallowReady(opts.enteringEl),\n    shallowReady(opts.leavingEl),\n  ];\n  await Promise.all(promises);\n  await notifyViewReady(opts.viewIsReady, opts.enteringEl);\n};\nconst notifyViewReady = async (viewIsReady, enteringEl) => {\n  if (viewIsReady) {\n    await viewIsReady(enteringEl);\n  }\n};\nconst playTransition = (trans, opts) => {\n  const progressCallback = opts.progressCallback;\n  const promise = new Promise(resolve => {\n    trans.onFinish((currentStep) => resolve(currentStep === 1));\n  });\n  // cool, let's do this, start the transition\n  if (progressCallback) {\n    // this is a swipe to go back, just get the transition progress ready\n    // kick off the swipe animation start\n    trans.progressStart(true);\n    progressCallback(trans);\n  }\n  else {\n    // only the top level transition should actually start \"play\"\n    // kick it off and let it play through\n    // ******** DOM WRITE ****************\n    trans.play();\n  }\n  // create a callback for when the animation is done\n  return promise;\n};\nconst fireWillEvents = (enteringEl, leavingEl) => {\n  lifecycle(leavingEl, LIFECYCLE_WILL_LEAVE);\n  lifecycle(enteringEl, LIFECYCLE_WILL_ENTER);\n};\nconst fireDidEvents = (enteringEl, leavingEl) => {\n  lifecycle(enteringEl, LIFECYCLE_DID_ENTER);\n  lifecycle(leavingEl, LIFECYCLE_DID_LEAVE);\n};\nconst lifecycle = (el, eventName) => {\n  if (el) {\n    const ev = new CustomEvent(eventName, {\n      bubbles: false,\n      cancelable: false,\n    });\n    el.dispatchEvent(ev);\n  }\n};\nconst shallowReady = (el) => {\n  if (el) {\n    return new Promise(resolve => (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, resolve));\n  }\n  return Promise.resolve();\n};\nconst deepReady = async (el) => {\n  const element = el;\n  if (element) {\n    if (element.componentOnReady != null) {\n      const stencilEl = await element.componentOnReady();\n      if (stencilEl != null) {\n        return;\n      }\n      /**\n       * Custom elements in Stencil will have __registerHost.\n       */\n    }\n    else if (element.__registerHost != null) {\n      /**\n       * Non-lazy loaded custom elements need to wait\n       * one frame for component to be loaded.\n       */\n      const waitForCustomElement = new Promise(resolve => (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.r)(resolve));\n      await waitForCustomElement;\n      return;\n    }\n    await Promise.all(Array.from(element.children).map(deepReady));\n  }\n};\nconst setPageHidden = (el, hidden) => {\n  if (hidden) {\n    el.setAttribute('aria-hidden', 'true');\n    el.classList.add('ion-page-hidden');\n  }\n  else {\n    el.hidden = false;\n    el.removeAttribute('aria-hidden');\n    el.classList.remove('ion-page-hidden');\n  }\n};\nconst setZIndex = (enteringEl, leavingEl, direction) => {\n  if (enteringEl !== undefined) {\n    enteringEl.style.zIndex = (direction === 'back')\n      ? '99'\n      : '101';\n  }\n  if (leavingEl !== undefined) {\n    leavingEl.style.zIndex = '100';\n  }\n};\nconst getIonPageElement = (element) => {\n  if (element.classList.contains('ion-page')) {\n    return element;\n  }\n  const ionPage = element.querySelector(':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs');\n  if (ionPage) {\n    return ionPage;\n  }\n  // idk, return the original element so at least something animates and we don't have a null pointer\n  return element;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55026\n")},27434:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "c": () => (/* binding */ createAnimation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70655);\n/* harmony import */ var _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17504);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var animationPrefix;var processKeyframes=function(e){e.forEach((function(e){for(var n in e){if(e.hasOwnProperty(n)){var r=e[n];if(n==="easing"){var t="animation-timing-function";e[t]=r;delete e[n]}else{var t=convertCamelCaseToHypen(n);if(t!==n){e[t]=r;delete e[n]}}}}}));return e};var convertCamelCaseToHypen=function(e){return e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()};var getAnimationPrefix=function(e){if(animationPrefix===undefined){var n=e.style.animationName!==undefined;var r=e.style.webkitAnimationName!==undefined;animationPrefix=!n&&r?"-webkit-":""}return animationPrefix};var setStyleProperty=function(e,n,r){var t=n.startsWith("animation")?getAnimationPrefix(e):"";e.style.setProperty(t+n,r)};var removeStyleProperty=function(e,n){var r=n.startsWith("animation")?getAnimationPrefix(e):"";e.style.removeProperty(r+n)};var animationEnd=function(e,n){var r;var t={passive:true};var a=function(){if(r){r()}};var i=function(r){if(e===r.target){a();n(r)}};if(e){e.addEventListener("webkitAnimationEnd",i,t);e.addEventListener("animationend",i,t);r=function(){e.removeEventListener("webkitAnimationEnd",i,t);e.removeEventListener("animationend",i,t)}}return a};var generateKeyframeRules=function(e){if(e===void 0){e=[]}return e.map((function(e){var n=e.offset;var r=[];for(var t in e){if(e.hasOwnProperty(t)&&t!=="offset"){r.push("".concat(t,": ").concat(e[t],";"))}}return"".concat(n*100,"% { ").concat(r.join(" ")," }")})).join(" ")};var keyframeIds=[];var generateKeyframeName=function(e){var n=keyframeIds.indexOf(e);if(n<0){n=keyframeIds.push(e)-1}return"ion-animation-".concat(n)};var getStyleContainer=function(e){var n=e.getRootNode();return n.head||n};var createKeyframeStylesheet=function(e,n,r){var t=getStyleContainer(r);var a=getAnimationPrefix(r);var i=t.querySelector("#"+e);if(i){return i}var o=(r.ownerDocument||document).createElement("style");o.id=e;o.textContent="@".concat(a,"keyframes ").concat(e," { ").concat(n," } @").concat(a,"keyframes ").concat(e,"-alt { ").concat(n," }");t.appendChild(o);return o};var addClassToArray=function(e,n){if(e===void 0){e=[]}if(n!==undefined){var r=Array.isArray(n)?n:[n];return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)((0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([],e,true),r,true)}return e};var createAnimation=function(e){var n;var r;var t;var a;var i;var o;var f=[];var u=[];var c=[];var s=false;var v;var l={};var d=[];var y=[];var m={};var p=0;var h=false;var g=false;var E;var P;var S;var A;var C=true;var T=false;var b=true;var k;var w;var x=e;var K=[];var _=[];var I=[];var D=[];var L=[];var N=[];var R=[];var F=[];var O=[];var W=[];var j=typeof AnimationEffect==="function"||typeof window.AnimationEffect==="function";var H=typeof Element==="function"&&typeof Element.prototype.animate==="function"&&j;var M=100;var $=function(){return W};var q=function(e){D.forEach((function(n){n.destroy(e)}));z(e);I.length=0;D.length=0;f.length=0;G();s=false;b=true;return w};var z=function(e){J();if(e){Q()}};var Z=function(){h=false;g=false;b=true;P=undefined;S=undefined;A=undefined;p=0;T=false;C=true};var B=function(e,n){var r=n&&n.oneTimeCallback?_:K;r.push({c:e,o:n});return w};var G=function(){K.length=0;_.length=0;return w};var J=function(){if(H){W.forEach((function(e){e.cancel()}));W.length=0}else{var e=I.slice();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){e.forEach((function(e){removeStyleProperty(e,"animation-name");removeStyleProperty(e,"animation-duration");removeStyleProperty(e,"animation-timing-function");removeStyleProperty(e,"animation-iteration-count");removeStyleProperty(e,"animation-delay");removeStyleProperty(e,"animation-play-state");removeStyleProperty(e,"animation-fill-mode");removeStyleProperty(e,"animation-direction")}))}))}};var Q=function(){L.forEach((function(e){if(e&&e.parentNode){e.parentNode.removeChild(e)}}));L.length=0};var U=function(e){N.push(e);return w};var V=function(e){R.push(e);return w};var X=function(e){F.push(e);return w};var Y=function(e){O.push(e);return w};var ee=function(e){u=addClassToArray(u,e);return w};var ne=function(e){c=addClassToArray(c,e);return w};var re=function(e){if(e===void 0){e={}}l=e;return w};var te=function(e){if(e===void 0){e=[]}for(var n=0,r=e;n<r.length;n++){var t=r[n];l[t]=""}return w};var ae=function(e){d=addClassToArray(d,e);return w};var ie=function(e){y=addClassToArray(y,e);return w};var oe=function(e){if(e===void 0){e={}}m=e;return w};var fe=function(e){if(e===void 0){e=[]}for(var n=0,r=e;n<r.length;n++){var t=r[n];m[t]=""}return w};var ue=function(){if(i!==undefined){return i}if(v){return v.getFill()}return"both"};var ce=function(){if(P!==undefined){return P}if(o!==undefined){return o}if(v){return v.getDirection()}return"normal"};var se=function(){if(h){return"linear"}if(t!==undefined){return t}if(v){return v.getEasing()}return"linear"};var ve=function(){if(g){return 0}if(S!==undefined){return S}if(r!==undefined){return r}if(v){return v.getDuration()}return 0};var le=function(){if(a!==undefined){return a}if(v){return v.getIterations()}return 1};var de=function(){if(A!==undefined){return A}if(n!==undefined){return n}if(v){return v.getDelay()}return 0};var ye=function(){return f};var me=function(e){o=e;Re(true);return w};var pe=function(e){i=e;Re(true);return w};var he=function(e){n=e;Re(true);return w};var ge=function(e){t=e;Re(true);return w};var Ee=function(e){if(!H&&e===0){e=1}r=e;Re(true);return w};var Pe=function(e){a=e;Re(true);return w};var Se=function(e){v=e;return w};var Ae=function(e){if(e!=null){if(e.nodeType===1){I.push(e)}else if(e.length>=0){for(var n=0;n<e.length;n++){I.push(e[n])}}else{console.error("Invalid addElement value")}}return w};var Ce=function(e){if(e!=null){if(Array.isArray(e)){for(var n=0,r=e;n<r.length;n++){var t=r[n];t.parent(w);D.push(t)}}else{e.parent(w);D.push(e)}}return w};var Te=function(e){var n=f!==e;f=e;if(n){be(f)}return w};var be=function(e){if(H){$().forEach((function(n){if(n.effect.setKeyframes){n.effect.setKeyframes(e)}else{var r=new KeyframeEffect(n.effect.target,e,n.effect.getTiming());n.effect=r}}))}else{Ke()}};var ke=function(){N.forEach((function(e){return e()}));R.forEach((function(e){return e()}));var e=u;var n=c;var r=l;I.forEach((function(t){var a=t.classList;e.forEach((function(e){return a.add(e)}));n.forEach((function(e){return a.remove(e)}));for(var i in r){if(r.hasOwnProperty(i)){setStyleProperty(t,i,r[i])}}}))};var we=function(){$e();F.forEach((function(e){return e()}));O.forEach((function(e){return e()}));var e=C?1:0;var n=d;var r=y;var t=m;I.forEach((function(e){var a=e.classList;n.forEach((function(e){return a.add(e)}));r.forEach((function(e){return a.remove(e)}));for(var i in t){if(t.hasOwnProperty(i)){setStyleProperty(e,i,t[i])}}}));K.forEach((function(n){return n.c(e,w)}));_.forEach((function(n){return n.c(e,w)}));_.length=0;b=true;if(C){T=true}C=true};var xe=function(){if(p===0){return}p--;if(p===0){we();if(v){v.animationFinish()}}};var Ke=function(n){if(n===void 0){n=true}Q();var r=processKeyframes(f);I.forEach((function(t){if(r.length>0){var a=generateKeyframeRules(r);k=e!==undefined?e:generateKeyframeName(a);var i=createKeyframeStylesheet(k,a,t);L.push(i);setStyleProperty(t,"animation-duration","".concat(ve(),"ms"));setStyleProperty(t,"animation-timing-function",se());setStyleProperty(t,"animation-delay","".concat(de(),"ms"));setStyleProperty(t,"animation-fill-mode",ue());setStyleProperty(t,"animation-direction",ce());var o=le()===Infinity?"infinite":le().toString();setStyleProperty(t,"animation-iteration-count",o);setStyleProperty(t,"animation-play-state","paused");if(n){setStyleProperty(t,"animation-name","".concat(i.id,"-alt"))}(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){setStyleProperty(t,"animation-name",i.id||null)}))}}))};var _e=function(){I.forEach((function(e){var n=e.animate(f,{id:x,delay:de(),duration:ve(),easing:se(),iterations:le(),fill:ue(),direction:ce()});n.pause();W.push(n)}));if(W.length>0){W[0].onfinish=function(){xe()}}};var Ie=function(e){if(e===void 0){e=true}ke();if(f.length>0){if(H){_e()}else{Ke(e)}}s=true};var De=function(e){e=Math.min(Math.max(e,0),.9999);if(H){W.forEach((function(n){n.currentTime=n.effect.getComputedTiming().delay+ve()*e;n.pause()}))}else{var n="-".concat(ve()*e,"ms");I.forEach((function(e){if(f.length>0){setStyleProperty(e,"animation-delay",n);setStyleProperty(e,"animation-play-state","paused")}}))}};var Le=function(e){W.forEach((function(e){e.effect.updateTiming({delay:de(),duration:ve(),easing:se(),iterations:le(),fill:ue(),direction:ce()})}));if(e!==undefined){De(e)}};var Ne=function(e,n){if(e===void 0){e=true}(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){I.forEach((function(r){setStyleProperty(r,"animation-name",k||null);setStyleProperty(r,"animation-duration","".concat(ve(),"ms"));setStyleProperty(r,"animation-timing-function",se());setStyleProperty(r,"animation-delay",n!==undefined?"-".concat(n*ve(),"ms"):"".concat(de(),"ms"));setStyleProperty(r,"animation-fill-mode",ue()||null);setStyleProperty(r,"animation-direction",ce()||null);var t=le()===Infinity?"infinite":le().toString();setStyleProperty(r,"animation-iteration-count",t);if(e){setStyleProperty(r,"animation-name","".concat(k,"-alt"))}(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){setStyleProperty(r,"animation-name",k||null)}))}))}))};var Re=function(e,n,r){if(e===void 0){e=false}if(n===void 0){n=true}if(e){D.forEach((function(t){t.update(e,n,r)}))}if(H){Le(r)}else{Ne(n,r)}return w};var Fe=function(e,n){if(e===void 0){e=false}D.forEach((function(r){r.progressStart(e,n)}));je();h=e;if(!s){Ie()}Re(false,true,n);return w};var Oe=function(e){D.forEach((function(n){n.progressStep(e)}));De(e);return w};var We=function(e,n,r){h=false;D.forEach((function(t){t.progressEnd(e,n,r)}));if(r!==undefined){S=r}T=false;C=true;if(e===0){P=ce()==="reverse"?"normal":"reverse";if(P==="reverse"){C=false}if(H){Re();De(1-n)}else{A=(1-n)*ve()*-1;Re(false,false)}}else if(e===1){if(H){Re();De(n)}else{A=n*ve()*-1;Re(false,false)}}if(e!==undefined){B((function(){S=undefined;P=undefined;A=undefined}),{oneTimeCallback:true});if(!v){Ge()}}return w};var je=function(){if(s){if(H){W.forEach((function(e){e.pause()}))}else{I.forEach((function(e){setStyleProperty(e,"animation-play-state","paused")}))}}};var He=function(){D.forEach((function(e){e.pause()}));je();return w};var Me=function(){E=undefined;xe()};var $e=function(){if(E){clearTimeout(E)}};var qe=function(){$e();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){I.forEach((function(e){if(f.length>0){setStyleProperty(e,"animation-play-state","running")}}))}));if(f.length===0||I.length===0){xe()}else{var e=de()||0;var n=ve()||0;var r=le()||1;if(isFinite(r)){E=setTimeout(Me,e+n*r+M)}animationEnd(I[0],(function(){$e();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)((function(){ze();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_1__.r)(xe)}))}))}};var ze=function(){I.forEach((function(e){removeStyleProperty(e,"animation-duration");removeStyleProperty(e,"animation-delay");removeStyleProperty(e,"animation-play-state")}))};var Ze=function(){W.forEach((function(e){e.play()}));if(f.length===0||I.length===0){xe()}};var Be=function(){if(H){De(0);Le()}else{Ne()}};var Ge=function(e){return new Promise((function(n){if(e&&e.sync){g=true;B((function(){return g=false}),{oneTimeCallback:true})}if(!s){Ie()}if(T){Be();T=false}if(b){p=D.length+1;b=false}B((function(){return n()}),{oneTimeCallback:true});D.forEach((function(e){e.play()}));if(H){Ze()}else{qe()}}))};var Je=function(){D.forEach((function(e){e.stop()}));if(s){J();s=false}Z()};var Qe=function(e,n){var r;var t=f[0];if(t!==undefined&&(t.offset===undefined||t.offset===0)){t[e]=n}else{f=(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([(r={offset:0},r[e]=n,r)],f,true)}return w};var Ue=function(e,n){var r;var t=f[f.length-1];if(t!==undefined&&(t.offset===undefined||t.offset===1)){t[e]=n}else{f=(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)((0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([],f,true),[(r={offset:1},r[e]=n,r)],false)}return w};var Ve=function(e,n,r){return Qe(e,n).to(e,r)};return w={parentAnimation:v,elements:I,childAnimations:D,id:x,animationFinish:xe,from:Qe,to:Ue,fromTo:Ve,parent:Se,play:Ge,pause:He,stop:Je,destroy:q,keyframes:Te,addAnimation:Ce,addElement:Ae,update:Re,fill:pe,direction:me,iterations:Pe,duration:Ee,easing:ge,delay:he,getWebAnimations:$,getKeyframes:ye,getFill:ue,getDirection:ce,getDelay:de,getIterations:le,getEasing:se,getDuration:ve,afterAddRead:X,afterAddWrite:Y,afterClearStyles:fe,afterStyles:oe,afterRemoveClass:ie,afterAddClass:ae,beforeAddRead:U,beforeAddWrite:V,beforeClearStyles:te,beforeStyles:re,beforeRemoveClass:ne,beforeAddClass:ee,onFinish:B,progressStart:Fe,progressStep:Oe,progressEnd:We}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0MzQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxHQUErQyxvQkFBb0IsaUNBQWlDLHVCQUF1QixnQkFBZ0Isd0JBQXdCLFdBQVcsaUJBQWlCLGtDQUFrQyxPQUFPLFlBQVksS0FBSyxpQ0FBaUMsVUFBVSxPQUFPLGdCQUFnQixHQUFHLFVBQVUsd0NBQXdDLDhEQUE4RCxtQ0FBbUMsZ0NBQWdDLHdDQUF3Qyw4Q0FBOEMsb0NBQW9DLHdCQUF3QixxQ0FBcUMseURBQXlELDRCQUE0QixzQ0FBc0MseURBQXlELDZCQUE2QiwrQkFBK0IsTUFBTSxPQUFPLGNBQWMsaUJBQWlCLE1BQU0sTUFBTSxrQkFBa0IsaUJBQWlCLElBQUksT0FBTyxNQUFNLDZDQUE2Qyx1Q0FBdUMsYUFBYSxnREFBZ0QsMkNBQTJDLFVBQVUsc0NBQXNDLGVBQWUsS0FBSywwQkFBMEIsZUFBZSxTQUFTLGdCQUFnQixzQ0FBc0MsdUNBQXVDLEtBQUssMkJBQTJCLHlCQUF5QixHQUFHLGNBQWMsbUJBQW1CLHFDQUFxQyw2QkFBNkIsUUFBUSx3QkFBd0Isa0NBQWtDLGtDQUFrQyxzQkFBc0Isa0JBQWtCLDZDQUE2QywyQkFBMkIsNEJBQTRCLDZCQUE2QixNQUFNLFNBQVMseURBQXlELE9BQU8sc0RBQXNELGdCQUFnQiw0Q0FBNEMsZUFBZSxHQUFHLGlCQUFpQixVQUFVLGtDQUFrQyxlQUFlLEtBQUssa0JBQWtCLDZCQUE2QixPQUFPLDhEQUFhLENBQUMsOERBQWEsb0JBQW9CLFVBQVUsZ0NBQWdDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLFNBQVMsU0FBUyxTQUFTLFlBQVksTUFBTSxTQUFTLFNBQVMsU0FBUyxTQUFTLFFBQVEsWUFBWSxZQUFZLE1BQU0sTUFBTSxNQUFNLE1BQU0sV0FBVyxZQUFZLFdBQVcsTUFBTSxNQUFNLFFBQVEsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxzRkFBc0Ysb0ZBQW9GLFVBQVUsaUJBQWlCLFVBQVUsa0JBQWtCLHVCQUF1QixhQUFhLEdBQUcsS0FBSyxXQUFXLFdBQVcsV0FBVyxJQUFJLFFBQVEsT0FBTyxVQUFVLGtCQUFrQixJQUFJLE1BQU0sTUFBTSxpQkFBaUIsUUFBUSxRQUFRLE9BQU8sWUFBWSxZQUFZLFlBQVksSUFBSSxRQUFRLFFBQVEsb0JBQW9CLCtCQUErQixRQUFRLFFBQVEsRUFBRSxVQUFVLGlCQUFpQixXQUFXLFdBQVcsVUFBVSxpQkFBaUIsTUFBTSx1QkFBdUIsV0FBVyxHQUFHLFdBQVcsS0FBSyxnQkFBZ0IsdURBQUcsYUFBYSx1QkFBdUIsd0NBQXdDLDRDQUE0QyxtREFBbUQsbURBQW1ELHlDQUF5Qyw4Q0FBOEMsNkNBQTZDLDZDQUE2QyxHQUFHLEtBQUssaUJBQWlCLHVCQUF1QixvQkFBb0IsNkJBQTZCLEdBQUcsWUFBWSxrQkFBa0IsVUFBVSxVQUFVLGtCQUFrQixVQUFVLFVBQVUsa0JBQWtCLFVBQVUsVUFBVSxrQkFBa0IsVUFBVSxVQUFVLG1CQUFtQix1QkFBdUIsVUFBVSxtQkFBbUIsdUJBQXVCLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxJQUFJLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxnQkFBZ0IsV0FBVyxLQUFLLFdBQVcsUUFBUSxVQUFVLG1CQUFtQix1QkFBdUIsVUFBVSxtQkFBbUIsdUJBQXVCLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxJQUFJLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxnQkFBZ0IsV0FBVyxLQUFLLFdBQVcsUUFBUSxVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxNQUFNLG1CQUFtQixjQUFjLGtCQUFrQixrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLHdCQUF3QixnQkFBZ0Isa0JBQWtCLE1BQU0sZUFBZSxrQkFBa0IsU0FBUyxNQUFNLHFCQUFxQixnQkFBZ0Isa0JBQWtCLE1BQU0sU0FBUyxrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLHVCQUF1QixVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxNQUFNLHlCQUF5QixVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLG9CQUFvQixVQUFVLGtCQUFrQixVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsSUFBSSxTQUFTLFVBQVUsbUJBQW1CLElBQUksU0FBUyxVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsY0FBYyxJQUFJLElBQUksU0FBUyxVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsSUFBSSxVQUFVLG1CQUFtQixZQUFZLG1CQUFtQixVQUFVLHFCQUFxQixZQUFZLFdBQVcsS0FBSyxjQUFjLEtBQUssMkNBQTJDLFVBQVUsbUJBQW1CLFlBQVkscUJBQXFCLGdCQUFnQixXQUFXLEtBQUssV0FBVyxZQUFZLFdBQVcsS0FBSyxZQUFZLFdBQVcsVUFBVSxtQkFBbUIsWUFBWSxJQUFJLE1BQU0sTUFBTSxVQUFVLG1CQUFtQixNQUFNLHlCQUF5QiwwQkFBMEIseUJBQXlCLEtBQUssaUVBQWlFLFlBQVksR0FBRyxLQUFLLE9BQU8sa0JBQWtCLHVCQUF1QixXQUFXLEdBQUcsdUJBQXVCLFdBQVcsR0FBRyxRQUFRLFFBQVEsUUFBUSx1QkFBdUIsa0JBQWtCLHVCQUF1QixnQkFBZ0IsR0FBRyx1QkFBdUIsbUJBQW1CLEdBQUcsZ0JBQWdCLHdCQUF3Qiw2QkFBNkIsSUFBSSxrQkFBa0IsS0FBSyx1QkFBdUIsV0FBVyxHQUFHLHVCQUF1QixXQUFXLEdBQUcsWUFBWSxRQUFRLFFBQVEsUUFBUSx1QkFBdUIsa0JBQWtCLHVCQUF1QixnQkFBZ0IsR0FBRyx1QkFBdUIsbUJBQW1CLEdBQUcsZ0JBQWdCLHdCQUF3Qiw2QkFBNkIsR0FBRyx1QkFBdUIsZ0JBQWdCLEdBQUcsdUJBQXVCLGdCQUFnQixHQUFHLFdBQVcsT0FBTyxNQUFNLE9BQU8sUUFBUSxrQkFBa0IsVUFBVSxPQUFPLElBQUksVUFBVSxLQUFLLE1BQU0sdUJBQXVCLG1CQUFtQixlQUFlLE9BQU8sSUFBSSwwQkFBMEIsdUJBQXVCLGVBQWUsK0JBQStCLDBDQUEwQyxzQ0FBc0MsVUFBVSw4REFBOEQscURBQXFELDJEQUEyRCwrQ0FBK0MsK0NBQStDLGlEQUFpRCxrREFBa0Qsb0RBQW9ELE1BQU0sNERBQTRELHVEQUFHLGFBQWEsZ0RBQWdELElBQUksSUFBSSxrQkFBa0IsdUJBQXVCLG1CQUFtQixtRkFBbUYsRUFBRSxVQUFVLFVBQVUsR0FBRyxlQUFlLHlCQUF5QixRQUFRLG1CQUFtQixlQUFlLE9BQU8sS0FBSyxlQUFlLE1BQU0sS0FBSyxLQUFLLE9BQU8sUUFBUSxtQkFBbUIsZ0NBQWdDLE1BQU0sdUJBQXVCLHdEQUF3RCxVQUFVLEdBQUcsS0FBSyw4QkFBOEIsdUJBQXVCLGVBQWUsd0NBQXdDLHFEQUFxRCxLQUFLLG1CQUFtQix1QkFBdUIsdUJBQXVCLDhFQUE4RSxFQUFFLEdBQUcsa0JBQWtCLFFBQVEscUJBQXFCLGVBQWUsT0FBTyx1REFBRyxhQUFhLHVCQUF1Qiw2Q0FBNkMsOERBQThELHFEQUFxRCxpR0FBaUcscURBQXFELHFEQUFxRCxpREFBaUQsa0RBQWtELE1BQU0seURBQXlELHVEQUFHLGFBQWEsNkNBQTZDLEdBQUcsR0FBRyxJQUFJLHVCQUF1QixlQUFlLFFBQVEsZUFBZSxPQUFPLE1BQU0sdUJBQXVCLGdCQUFnQixHQUFHLE1BQU0sTUFBTSxLQUFLLFFBQVEsVUFBVSxxQkFBcUIsZUFBZSxRQUFRLHVCQUF1QixxQkFBcUIsR0FBRyxLQUFLLElBQUksT0FBTyxLQUFLLGlCQUFpQixVQUFVLG1CQUFtQix1QkFBdUIsa0JBQWtCLEdBQUcsTUFBTSxVQUFVLHVCQUF1QixRQUFRLHVCQUF1QixxQkFBcUIsR0FBRyxrQkFBa0IsSUFBSSxRQUFRLE9BQU8sVUFBVSxzQ0FBc0Msa0JBQWtCLFFBQVEsTUFBTSxLQUFLLFFBQVEsS0FBSyxnQkFBZ0IsaUJBQWlCLGVBQWUsTUFBTSxLQUFLLE1BQU0sS0FBSyxZQUFZLGlCQUFpQixrQkFBa0IsY0FBYyxZQUFZLFlBQVksWUFBWSxHQUFHLHFCQUFxQixFQUFFLE9BQU8sTUFBTSxVQUFVLGtCQUFrQixNQUFNLE1BQU0sdUJBQXVCLFVBQVUsR0FBRyxLQUFLLHVCQUF1QixvREFBb0QsTUFBTSxrQkFBa0IsdUJBQXVCLFVBQVUsR0FBRyxLQUFLLFVBQVUsa0JBQWtCLFlBQVksTUFBTSxrQkFBa0IsTUFBTSxrQkFBa0Isa0JBQWtCLEtBQUssdURBQUcsYUFBYSx1QkFBdUIsZUFBZSxzREFBc0QsR0FBRyxHQUFHLCtCQUErQixLQUFLLEtBQUssY0FBYyxjQUFjLGNBQWMsZ0JBQWdCLHlCQUF5Qiw4QkFBOEIsS0FBSyx1REFBRyxhQUFhLEtBQUssdURBQUcsS0FBSyxHQUFHLEtBQUssa0JBQWtCLHVCQUF1Qiw0Q0FBNEMseUNBQXlDLDhDQUE4QyxJQUFJLGtCQUFrQix1QkFBdUIsU0FBUyxHQUFHLCtCQUErQixPQUFPLGtCQUFrQixNQUFNLE1BQU0sS0FBSyxLQUFLLE9BQU8sbUJBQW1CLGdDQUFnQyxjQUFjLE9BQU8sY0FBYyxlQUFlLEdBQUcscUJBQXFCLEVBQUUsT0FBTyxLQUFLLE1BQU0sS0FBSyxRQUFRLE1BQU0sYUFBYSxRQUFRLGNBQWMsV0FBVyxHQUFHLHFCQUFxQixFQUFFLHVCQUF1QixTQUFTLEdBQUcsTUFBTSxLQUFLLEtBQUssTUFBTSxJQUFJLGtCQUFrQix1QkFBdUIsU0FBUyxHQUFHLE1BQU0sSUFBSSxRQUFRLEtBQUsscUJBQXFCLE1BQU0sV0FBVyx3REFBd0QsT0FBTyxLQUFLLEVBQUUsOERBQWEsTUFBTSxTQUFTLG9CQUFvQixVQUFVLHFCQUFxQixNQUFNLG9CQUFvQix3REFBd0QsT0FBTyxLQUFLLEVBQUUsOERBQWEsQ0FBQyw4REFBYSxpQkFBaUIsU0FBUyxtQkFBbUIsVUFBVSx1QkFBdUIsd0JBQXdCLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9hbmltYXRpb24tMTlkYmY5YmYuanM/N2UwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7X19zcHJlYWRBcnJheX1mcm9tXCJ0c2xpYlwiO1xuLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9pbXBvcnR7ciBhcyByYWZ9ZnJvbVwiLi9oZWxwZXJzLTZlMWU1YjY1LmpzXCI7dmFyIGFuaW1hdGlvblByZWZpeDt2YXIgcHJvY2Vzc0tleWZyYW1lcz1mdW5jdGlvbihlKXtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Zvcih2YXIgbiBpbiBlKXtpZihlLmhhc093blByb3BlcnR5KG4pKXt2YXIgcj1lW25dO2lmKG49PT1cImVhc2luZ1wiKXt2YXIgdD1cImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIjtlW3RdPXI7ZGVsZXRlIGVbbl19ZWxzZXt2YXIgdD1jb252ZXJ0Q2FtZWxDYXNlVG9IeXBlbihuKTtpZih0IT09bil7ZVt0XT1yO2RlbGV0ZSBlW25dfX19fX0pKTtyZXR1cm4gZX07dmFyIGNvbnZlcnRDYW1lbENhc2VUb0h5cGVuPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpfTt2YXIgZ2V0QW5pbWF0aW9uUHJlZml4PWZ1bmN0aW9uKGUpe2lmKGFuaW1hdGlvblByZWZpeD09PXVuZGVmaW5lZCl7dmFyIG49ZS5zdHlsZS5hbmltYXRpb25OYW1lIT09dW5kZWZpbmVkO3ZhciByPWUuc3R5bGUud2Via2l0QW5pbWF0aW9uTmFtZSE9PXVuZGVmaW5lZDthbmltYXRpb25QcmVmaXg9IW4mJnI/XCItd2Via2l0LVwiOlwiXCJ9cmV0dXJuIGFuaW1hdGlvblByZWZpeH07dmFyIHNldFN0eWxlUHJvcGVydHk9ZnVuY3Rpb24oZSxuLHIpe3ZhciB0PW4uc3RhcnRzV2l0aChcImFuaW1hdGlvblwiKT9nZXRBbmltYXRpb25QcmVmaXgoZSk6XCJcIjtlLnN0eWxlLnNldFByb3BlcnR5KHQrbixyKX07dmFyIHJlbW92ZVN0eWxlUHJvcGVydHk9ZnVuY3Rpb24oZSxuKXt2YXIgcj1uLnN0YXJ0c1dpdGgoXCJhbmltYXRpb25cIik/Z2V0QW5pbWF0aW9uUHJlZml4KGUpOlwiXCI7ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShyK24pfTt2YXIgYW5pbWF0aW9uRW5kPWZ1bmN0aW9uKGUsbil7dmFyIHI7dmFyIHQ9e3Bhc3NpdmU6dHJ1ZX07dmFyIGE9ZnVuY3Rpb24oKXtpZihyKXtyKCl9fTt2YXIgaT1mdW5jdGlvbihyKXtpZihlPT09ci50YXJnZXQpe2EoKTtuKHIpfX07aWYoZSl7ZS5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0QW5pbWF0aW9uRW5kXCIsaSx0KTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIixpLHQpO3I9ZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRBbmltYXRpb25FbmRcIixpLHQpO2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLGksdCl9fXJldHVybiBhfTt2YXIgZ2VuZXJhdGVLZXlmcmFtZVJ1bGVzPWZ1bmN0aW9uKGUpe2lmKGU9PT12b2lkIDApe2U9W119cmV0dXJuIGUubWFwKChmdW5jdGlvbihlKXt2YXIgbj1lLm9mZnNldDt2YXIgcj1bXTtmb3IodmFyIHQgaW4gZSl7aWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSYmdCE9PVwib2Zmc2V0XCIpe3IucHVzaChcIlwiLmNvbmNhdCh0LFwiOiBcIikuY29uY2F0KGVbdF0sXCI7XCIpKX19cmV0dXJuXCJcIi5jb25jYXQobioxMDAsXCIlIHsgXCIpLmNvbmNhdChyLmpvaW4oXCIgXCIpLFwiIH1cIil9KSkuam9pbihcIiBcIil9O3ZhciBrZXlmcmFtZUlkcz1bXTt2YXIgZ2VuZXJhdGVLZXlmcmFtZU5hbWU9ZnVuY3Rpb24oZSl7dmFyIG49a2V5ZnJhbWVJZHMuaW5kZXhPZihlKTtpZihuPDApe249a2V5ZnJhbWVJZHMucHVzaChlKS0xfXJldHVyblwiaW9uLWFuaW1hdGlvbi1cIi5jb25jYXQobil9O3ZhciBnZXRTdHlsZUNvbnRhaW5lcj1mdW5jdGlvbihlKXt2YXIgbj1lLmdldFJvb3ROb2RlKCk7cmV0dXJuIG4uaGVhZHx8bn07dmFyIGNyZWF0ZUtleWZyYW1lU3R5bGVzaGVldD1mdW5jdGlvbihlLG4scil7dmFyIHQ9Z2V0U3R5bGVDb250YWluZXIocik7dmFyIGE9Z2V0QW5pbWF0aW9uUHJlZml4KHIpO3ZhciBpPXQucXVlcnlTZWxlY3RvcihcIiNcIitlKTtpZihpKXtyZXR1cm4gaX12YXIgbz0oci5vd25lckRvY3VtZW50fHxkb2N1bWVudCkuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO28uaWQ9ZTtvLnRleHRDb250ZW50PVwiQFwiLmNvbmNhdChhLFwia2V5ZnJhbWVzIFwiKS5jb25jYXQoZSxcIiB7IFwiKS5jb25jYXQobixcIiB9IEBcIikuY29uY2F0KGEsXCJrZXlmcmFtZXMgXCIpLmNvbmNhdChlLFwiLWFsdCB7IFwiKS5jb25jYXQobixcIiB9XCIpO3QuYXBwZW5kQ2hpbGQobyk7cmV0dXJuIG99O3ZhciBhZGRDbGFzc1RvQXJyYXk9ZnVuY3Rpb24oZSxuKXtpZihlPT09dm9pZCAwKXtlPVtdfWlmKG4hPT11bmRlZmluZWQpe3ZhciByPUFycmF5LmlzQXJyYXkobik/bjpbbl07cmV0dXJuIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSxlLHRydWUpLHIsdHJ1ZSl9cmV0dXJuIGV9O3ZhciBjcmVhdGVBbmltYXRpb249ZnVuY3Rpb24oZSl7dmFyIG47dmFyIHI7dmFyIHQ7dmFyIGE7dmFyIGk7dmFyIG87dmFyIGY9W107dmFyIHU9W107dmFyIGM9W107dmFyIHM9ZmFsc2U7dmFyIHY7dmFyIGw9e307dmFyIGQ9W107dmFyIHk9W107dmFyIG09e307dmFyIHA9MDt2YXIgaD1mYWxzZTt2YXIgZz1mYWxzZTt2YXIgRTt2YXIgUDt2YXIgUzt2YXIgQTt2YXIgQz10cnVlO3ZhciBUPWZhbHNlO3ZhciBiPXRydWU7dmFyIGs7dmFyIHc7dmFyIHg9ZTt2YXIgSz1bXTt2YXIgXz1bXTt2YXIgST1bXTt2YXIgRD1bXTt2YXIgTD1bXTt2YXIgTj1bXTt2YXIgUj1bXTt2YXIgRj1bXTt2YXIgTz1bXTt2YXIgVz1bXTt2YXIgaj10eXBlb2YgQW5pbWF0aW9uRWZmZWN0PT09XCJmdW5jdGlvblwifHx0eXBlb2Ygd2luZG93LkFuaW1hdGlvbkVmZmVjdD09PVwiZnVuY3Rpb25cIjt2YXIgSD10eXBlb2YgRWxlbWVudD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIEVsZW1lbnQucHJvdG90eXBlLmFuaW1hdGU9PT1cImZ1bmN0aW9uXCImJmo7dmFyIE09MTAwO3ZhciAkPWZ1bmN0aW9uKCl7cmV0dXJuIFd9O3ZhciBxPWZ1bmN0aW9uKGUpe0QuZm9yRWFjaCgoZnVuY3Rpb24obil7bi5kZXN0cm95KGUpfSkpO3ooZSk7SS5sZW5ndGg9MDtELmxlbmd0aD0wO2YubGVuZ3RoPTA7RygpO3M9ZmFsc2U7Yj10cnVlO3JldHVybiB3fTt2YXIgej1mdW5jdGlvbihlKXtKKCk7aWYoZSl7USgpfX07dmFyIFo9ZnVuY3Rpb24oKXtoPWZhbHNlO2c9ZmFsc2U7Yj10cnVlO1A9dW5kZWZpbmVkO1M9dW5kZWZpbmVkO0E9dW5kZWZpbmVkO3A9MDtUPWZhbHNlO0M9dHJ1ZX07dmFyIEI9ZnVuY3Rpb24oZSxuKXt2YXIgcj1uJiZuLm9uZVRpbWVDYWxsYmFjaz9fOks7ci5wdXNoKHtjOmUsbzpufSk7cmV0dXJuIHd9O3ZhciBHPWZ1bmN0aW9uKCl7Sy5sZW5ndGg9MDtfLmxlbmd0aD0wO3JldHVybiB3fTt2YXIgSj1mdW5jdGlvbigpe2lmKEgpe1cuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5jYW5jZWwoKX0pKTtXLmxlbmd0aD0wfWVsc2V7dmFyIGU9SS5zbGljZSgpO3JhZigoZnVuY3Rpb24oKXtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1uYW1lXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1kdXJhdGlvblwiKTtyZW1vdmVTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1pdGVyYXRpb24tY291bnRcIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWRlbGF5XCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1maWxsLW1vZGVcIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWRpcmVjdGlvblwiKX0pKX0pKX19O3ZhciBRPWZ1bmN0aW9uKCl7TC5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihlJiZlLnBhcmVudE5vZGUpe2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX19KSk7TC5sZW5ndGg9MH07dmFyIFU9ZnVuY3Rpb24oZSl7Ti5wdXNoKGUpO3JldHVybiB3fTt2YXIgVj1mdW5jdGlvbihlKXtSLnB1c2goZSk7cmV0dXJuIHd9O3ZhciBYPWZ1bmN0aW9uKGUpe0YucHVzaChlKTtyZXR1cm4gd307dmFyIFk9ZnVuY3Rpb24oZSl7Ty5wdXNoKGUpO3JldHVybiB3fTt2YXIgZWU9ZnVuY3Rpb24oZSl7dT1hZGRDbGFzc1RvQXJyYXkodSxlKTtyZXR1cm4gd307dmFyIG5lPWZ1bmN0aW9uKGUpe2M9YWRkQ2xhc3NUb0FycmF5KGMsZSk7cmV0dXJuIHd9O3ZhciByZT1mdW5jdGlvbihlKXtpZihlPT09dm9pZCAwKXtlPXt9fWw9ZTtyZXR1cm4gd307dmFyIHRlPWZ1bmN0aW9uKGUpe2lmKGU9PT12b2lkIDApe2U9W119Zm9yKHZhciBuPTAscj1lO248ci5sZW5ndGg7bisrKXt2YXIgdD1yW25dO2xbdF09XCJcIn1yZXR1cm4gd307dmFyIGFlPWZ1bmN0aW9uKGUpe2Q9YWRkQ2xhc3NUb0FycmF5KGQsZSk7cmV0dXJuIHd9O3ZhciBpZT1mdW5jdGlvbihlKXt5PWFkZENsYXNzVG9BcnJheSh5LGUpO3JldHVybiB3fTt2YXIgb2U9ZnVuY3Rpb24oZSl7aWYoZT09PXZvaWQgMCl7ZT17fX1tPWU7cmV0dXJuIHd9O3ZhciBmZT1mdW5jdGlvbihlKXtpZihlPT09dm9pZCAwKXtlPVtdfWZvcih2YXIgbj0wLHI9ZTtuPHIubGVuZ3RoO24rKyl7dmFyIHQ9cltuXTttW3RdPVwiXCJ9cmV0dXJuIHd9O3ZhciB1ZT1mdW5jdGlvbigpe2lmKGkhPT11bmRlZmluZWQpe3JldHVybiBpfWlmKHYpe3JldHVybiB2LmdldEZpbGwoKX1yZXR1cm5cImJvdGhcIn07dmFyIGNlPWZ1bmN0aW9uKCl7aWYoUCE9PXVuZGVmaW5lZCl7cmV0dXJuIFB9aWYobyE9PXVuZGVmaW5lZCl7cmV0dXJuIG99aWYodil7cmV0dXJuIHYuZ2V0RGlyZWN0aW9uKCl9cmV0dXJuXCJub3JtYWxcIn07dmFyIHNlPWZ1bmN0aW9uKCl7aWYoaCl7cmV0dXJuXCJsaW5lYXJcIn1pZih0IT09dW5kZWZpbmVkKXtyZXR1cm4gdH1pZih2KXtyZXR1cm4gdi5nZXRFYXNpbmcoKX1yZXR1cm5cImxpbmVhclwifTt2YXIgdmU9ZnVuY3Rpb24oKXtpZihnKXtyZXR1cm4gMH1pZihTIT09dW5kZWZpbmVkKXtyZXR1cm4gU31pZihyIT09dW5kZWZpbmVkKXtyZXR1cm4gcn1pZih2KXtyZXR1cm4gdi5nZXREdXJhdGlvbigpfXJldHVybiAwfTt2YXIgbGU9ZnVuY3Rpb24oKXtpZihhIT09dW5kZWZpbmVkKXtyZXR1cm4gYX1pZih2KXtyZXR1cm4gdi5nZXRJdGVyYXRpb25zKCl9cmV0dXJuIDF9O3ZhciBkZT1mdW5jdGlvbigpe2lmKEEhPT11bmRlZmluZWQpe3JldHVybiBBfWlmKG4hPT11bmRlZmluZWQpe3JldHVybiBufWlmKHYpe3JldHVybiB2LmdldERlbGF5KCl9cmV0dXJuIDB9O3ZhciB5ZT1mdW5jdGlvbigpe3JldHVybiBmfTt2YXIgbWU9ZnVuY3Rpb24oZSl7bz1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgcGU9ZnVuY3Rpb24oZSl7aT1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgaGU9ZnVuY3Rpb24oZSl7bj1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgZ2U9ZnVuY3Rpb24oZSl7dD1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgRWU9ZnVuY3Rpb24oZSl7aWYoIUgmJmU9PT0wKXtlPTF9cj1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgUGU9ZnVuY3Rpb24oZSl7YT1lO1JlKHRydWUpO3JldHVybiB3fTt2YXIgU2U9ZnVuY3Rpb24oZSl7dj1lO3JldHVybiB3fTt2YXIgQWU9ZnVuY3Rpb24oZSl7aWYoZSE9bnVsbCl7aWYoZS5ub2RlVHlwZT09PTEpe0kucHVzaChlKX1lbHNlIGlmKGUubGVuZ3RoPj0wKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7SS5wdXNoKGVbbl0pfX1lbHNle2NvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGFkZEVsZW1lbnQgdmFsdWVcIil9fXJldHVybiB3fTt2YXIgQ2U9ZnVuY3Rpb24oZSl7aWYoZSE9bnVsbCl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciBuPTAscj1lO248ci5sZW5ndGg7bisrKXt2YXIgdD1yW25dO3QucGFyZW50KHcpO0QucHVzaCh0KX19ZWxzZXtlLnBhcmVudCh3KTtELnB1c2goZSl9fXJldHVybiB3fTt2YXIgVGU9ZnVuY3Rpb24oZSl7dmFyIG49ZiE9PWU7Zj1lO2lmKG4pe2JlKGYpfXJldHVybiB3fTt2YXIgYmU9ZnVuY3Rpb24oZSl7aWYoSCl7JCgpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKG4uZWZmZWN0LnNldEtleWZyYW1lcyl7bi5lZmZlY3Quc2V0S2V5ZnJhbWVzKGUpfWVsc2V7dmFyIHI9bmV3IEtleWZyYW1lRWZmZWN0KG4uZWZmZWN0LnRhcmdldCxlLG4uZWZmZWN0LmdldFRpbWluZygpKTtuLmVmZmVjdD1yfX0pKX1lbHNle0tlKCl9fTt2YXIga2U9ZnVuY3Rpb24oKXtOLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlKCl9KSk7Ui5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSkpO3ZhciBlPXU7dmFyIG49Yzt2YXIgcj1sO0kuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGE9dC5jbGFzc0xpc3Q7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gYS5hZGQoZSl9KSk7bi5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gYS5yZW1vdmUoZSl9KSk7Zm9yKHZhciBpIGluIHIpe2lmKHIuaGFzT3duUHJvcGVydHkoaSkpe3NldFN0eWxlUHJvcGVydHkodCxpLHJbaV0pfX19KSl9O3ZhciB3ZT1mdW5jdGlvbigpeyRlKCk7Ri5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSkpO08uZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUoKX0pKTt2YXIgZT1DPzE6MDt2YXIgbj1kO3ZhciByPXk7dmFyIHQ9bTtJLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBhPWUuY2xhc3NMaXN0O24uZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGEuYWRkKGUpfSkpO3IuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGEucmVtb3ZlKGUpfSkpO2Zvcih2YXIgaSBpbiB0KXtpZih0Lmhhc093blByb3BlcnR5KGkpKXtzZXRTdHlsZVByb3BlcnR5KGUsaSx0W2ldKX19fSkpO0suZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIG4uYyhlLHcpfSkpO18uZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIG4uYyhlLHcpfSkpO18ubGVuZ3RoPTA7Yj10cnVlO2lmKEMpe1Q9dHJ1ZX1DPXRydWV9O3ZhciB4ZT1mdW5jdGlvbigpe2lmKHA9PT0wKXtyZXR1cm59cC0tO2lmKHA9PT0wKXt3ZSgpO2lmKHYpe3YuYW5pbWF0aW9uRmluaXNoKCl9fX07dmFyIEtlPWZ1bmN0aW9uKG4pe2lmKG49PT12b2lkIDApe249dHJ1ZX1RKCk7dmFyIHI9cHJvY2Vzc0tleWZyYW1lcyhmKTtJLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKHIubGVuZ3RoPjApe3ZhciBhPWdlbmVyYXRlS2V5ZnJhbWVSdWxlcyhyKTtrPWUhPT11bmRlZmluZWQ/ZTpnZW5lcmF0ZUtleWZyYW1lTmFtZShhKTt2YXIgaT1jcmVhdGVLZXlmcmFtZVN0eWxlc2hlZXQoayxhLHQpO0wucHVzaChpKTtzZXRTdHlsZVByb3BlcnR5KHQsXCJhbmltYXRpb24tZHVyYXRpb25cIixcIlwiLmNvbmNhdCh2ZSgpLFwibXNcIikpO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIixzZSgpKTtzZXRTdHlsZVByb3BlcnR5KHQsXCJhbmltYXRpb24tZGVsYXlcIixcIlwiLmNvbmNhdChkZSgpLFwibXNcIikpO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1maWxsLW1vZGVcIix1ZSgpKTtzZXRTdHlsZVByb3BlcnR5KHQsXCJhbmltYXRpb24tZGlyZWN0aW9uXCIsY2UoKSk7dmFyIG89bGUoKT09PUluZmluaXR5P1wiaW5maW5pdGVcIjpsZSgpLnRvU3RyaW5nKCk7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiLG8pO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIsXCJwYXVzZWRcIik7aWYobil7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLW5hbWVcIixcIlwiLmNvbmNhdChpLmlkLFwiLWFsdFwiKSl9cmFmKChmdW5jdGlvbigpe3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1uYW1lXCIsaS5pZHx8bnVsbCl9KSl9fSkpfTt2YXIgX2U9ZnVuY3Rpb24oKXtJLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWUuYW5pbWF0ZShmLHtpZDp4LGRlbGF5OmRlKCksZHVyYXRpb246dmUoKSxlYXNpbmc6c2UoKSxpdGVyYXRpb25zOmxlKCksZmlsbDp1ZSgpLGRpcmVjdGlvbjpjZSgpfSk7bi5wYXVzZSgpO1cucHVzaChuKX0pKTtpZihXLmxlbmd0aD4wKXtXWzBdLm9uZmluaXNoPWZ1bmN0aW9uKCl7eGUoKX19fTt2YXIgSWU9ZnVuY3Rpb24oZSl7aWYoZT09PXZvaWQgMCl7ZT10cnVlfWtlKCk7aWYoZi5sZW5ndGg+MCl7aWYoSCl7X2UoKX1lbHNle0tlKGUpfX1zPXRydWV9O3ZhciBEZT1mdW5jdGlvbihlKXtlPU1hdGgubWluKE1hdGgubWF4KGUsMCksLjk5OTkpO2lmKEgpe1cuZm9yRWFjaCgoZnVuY3Rpb24obil7bi5jdXJyZW50VGltZT1uLmVmZmVjdC5nZXRDb21wdXRlZFRpbWluZygpLmRlbGF5K3ZlKCkqZTtuLnBhdXNlKCl9KSl9ZWxzZXt2YXIgbj1cIi1cIi5jb25jYXQodmUoKSplLFwibXNcIik7SS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihmLmxlbmd0aD4wKXtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tZGVsYXlcIixuKTtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiLFwicGF1c2VkXCIpfX0pKX19O3ZhciBMZT1mdW5jdGlvbihlKXtXLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuZWZmZWN0LnVwZGF0ZVRpbWluZyh7ZGVsYXk6ZGUoKSxkdXJhdGlvbjp2ZSgpLGVhc2luZzpzZSgpLGl0ZXJhdGlvbnM6bGUoKSxmaWxsOnVlKCksZGlyZWN0aW9uOmNlKCl9KX0pKTtpZihlIT09dW5kZWZpbmVkKXtEZShlKX19O3ZhciBOZT1mdW5jdGlvbihlLG4pe2lmKGU9PT12b2lkIDApe2U9dHJ1ZX1yYWYoKGZ1bmN0aW9uKCl7SS5mb3JFYWNoKChmdW5jdGlvbihyKXtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tbmFtZVwiLGt8fG51bGwpO3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1kdXJhdGlvblwiLFwiXCIuY29uY2F0KHZlKCksXCJtc1wiKSk7c2V0U3R5bGVQcm9wZXJ0eShyLFwiYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiLHNlKCkpO3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1kZWxheVwiLG4hPT11bmRlZmluZWQ/XCItXCIuY29uY2F0KG4qdmUoKSxcIm1zXCIpOlwiXCIuY29uY2F0KGRlKCksXCJtc1wiKSk7c2V0U3R5bGVQcm9wZXJ0eShyLFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiLHVlKCl8fG51bGwpO3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1kaXJlY3Rpb25cIixjZSgpfHxudWxsKTt2YXIgdD1sZSgpPT09SW5maW5pdHk/XCJpbmZpbml0ZVwiOmxlKCkudG9TdHJpbmcoKTtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIsdCk7aWYoZSl7c2V0U3R5bGVQcm9wZXJ0eShyLFwiYW5pbWF0aW9uLW5hbWVcIixcIlwiLmNvbmNhdChrLFwiLWFsdFwiKSl9cmFmKChmdW5jdGlvbigpe3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1uYW1lXCIsa3x8bnVsbCl9KSl9KSl9KSl9O3ZhciBSZT1mdW5jdGlvbihlLG4scil7aWYoZT09PXZvaWQgMCl7ZT1mYWxzZX1pZihuPT09dm9pZCAwKXtuPXRydWV9aWYoZSl7RC5mb3JFYWNoKChmdW5jdGlvbih0KXt0LnVwZGF0ZShlLG4scil9KSl9aWYoSCl7TGUocil9ZWxzZXtOZShuLHIpfXJldHVybiB3fTt2YXIgRmU9ZnVuY3Rpb24oZSxuKXtpZihlPT09dm9pZCAwKXtlPWZhbHNlfUQuZm9yRWFjaCgoZnVuY3Rpb24ocil7ci5wcm9ncmVzc1N0YXJ0KGUsbil9KSk7amUoKTtoPWU7aWYoIXMpe0llKCl9UmUoZmFsc2UsdHJ1ZSxuKTtyZXR1cm4gd307dmFyIE9lPWZ1bmN0aW9uKGUpe0QuZm9yRWFjaCgoZnVuY3Rpb24obil7bi5wcm9ncmVzc1N0ZXAoZSl9KSk7RGUoZSk7cmV0dXJuIHd9O3ZhciBXZT1mdW5jdGlvbihlLG4scil7aD1mYWxzZTtELmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucHJvZ3Jlc3NFbmQoZSxuLHIpfSkpO2lmKHIhPT11bmRlZmluZWQpe1M9cn1UPWZhbHNlO0M9dHJ1ZTtpZihlPT09MCl7UD1jZSgpPT09XCJyZXZlcnNlXCI/XCJub3JtYWxcIjpcInJldmVyc2VcIjtpZihQPT09XCJyZXZlcnNlXCIpe0M9ZmFsc2V9aWYoSCl7UmUoKTtEZSgxLW4pfWVsc2V7QT0oMS1uKSp2ZSgpKi0xO1JlKGZhbHNlLGZhbHNlKX19ZWxzZSBpZihlPT09MSl7aWYoSCl7UmUoKTtEZShuKX1lbHNle0E9bip2ZSgpKi0xO1JlKGZhbHNlLGZhbHNlKX19aWYoZSE9PXVuZGVmaW5lZCl7QigoZnVuY3Rpb24oKXtTPXVuZGVmaW5lZDtQPXVuZGVmaW5lZDtBPXVuZGVmaW5lZH0pLHtvbmVUaW1lQ2FsbGJhY2s6dHJ1ZX0pO2lmKCF2KXtHZSgpfX1yZXR1cm4gd307dmFyIGplPWZ1bmN0aW9uKCl7aWYocyl7aWYoSCl7Vy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlKCl9KSl9ZWxzZXtJLmZvckVhY2goKGZ1bmN0aW9uKGUpe3NldFN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIsXCJwYXVzZWRcIil9KSl9fX07dmFyIEhlPWZ1bmN0aW9uKCl7RC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlKCl9KSk7amUoKTtyZXR1cm4gd307dmFyIE1lPWZ1bmN0aW9uKCl7RT11bmRlZmluZWQ7eGUoKX07dmFyICRlPWZ1bmN0aW9uKCl7aWYoRSl7Y2xlYXJUaW1lb3V0KEUpfX07dmFyIHFlPWZ1bmN0aW9uKCl7JGUoKTtyYWYoKGZ1bmN0aW9uKCl7SS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihmLmxlbmd0aD4wKXtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiLFwicnVubmluZ1wiKX19KSl9KSk7aWYoZi5sZW5ndGg9PT0wfHxJLmxlbmd0aD09PTApe3hlKCl9ZWxzZXt2YXIgZT1kZSgpfHwwO3ZhciBuPXZlKCl8fDA7dmFyIHI9bGUoKXx8MTtpZihpc0Zpbml0ZShyKSl7RT1zZXRUaW1lb3V0KE1lLGUrbipyK00pfWFuaW1hdGlvbkVuZChJWzBdLChmdW5jdGlvbigpeyRlKCk7cmFmKChmdW5jdGlvbigpe3plKCk7cmFmKHhlKX0pKX0pKX19O3ZhciB6ZT1mdW5jdGlvbigpe0kuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1kZWxheVwiKTtyZW1vdmVTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiKX0pKX07dmFyIFplPWZ1bmN0aW9uKCl7Vy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBsYXkoKX0pKTtpZihmLmxlbmd0aD09PTB8fEkubGVuZ3RoPT09MCl7eGUoKX19O3ZhciBCZT1mdW5jdGlvbigpe2lmKEgpe0RlKDApO0xlKCl9ZWxzZXtOZSgpfX07dmFyIEdlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7aWYoZSYmZS5zeW5jKXtnPXRydWU7QigoZnVuY3Rpb24oKXtyZXR1cm4gZz1mYWxzZX0pLHtvbmVUaW1lQ2FsbGJhY2s6dHJ1ZX0pfWlmKCFzKXtJZSgpfWlmKFQpe0JlKCk7VD1mYWxzZX1pZihiKXtwPUQubGVuZ3RoKzE7Yj1mYWxzZX1CKChmdW5jdGlvbigpe3JldHVybiBuKCl9KSx7b25lVGltZUNhbGxiYWNrOnRydWV9KTtELmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucGxheSgpfSkpO2lmKEgpe1plKCl9ZWxzZXtxZSgpfX0pKX07dmFyIEplPWZ1bmN0aW9uKCl7RC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnN0b3AoKX0pKTtpZihzKXtKKCk7cz1mYWxzZX1aKCl9O3ZhciBRZT1mdW5jdGlvbihlLG4pe3ZhciByO3ZhciB0PWZbMF07aWYodCE9PXVuZGVmaW5lZCYmKHQub2Zmc2V0PT09dW5kZWZpbmVkfHx0Lm9mZnNldD09PTApKXt0W2VdPW59ZWxzZXtmPV9fc3ByZWFkQXJyYXkoWyhyPXtvZmZzZXQ6MH0scltlXT1uLHIpXSxmLHRydWUpfXJldHVybiB3fTt2YXIgVWU9ZnVuY3Rpb24oZSxuKXt2YXIgcjt2YXIgdD1mW2YubGVuZ3RoLTFdO2lmKHQhPT11bmRlZmluZWQmJih0Lm9mZnNldD09PXVuZGVmaW5lZHx8dC5vZmZzZXQ9PT0xKSl7dFtlXT1ufWVsc2V7Zj1fX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sZix0cnVlKSxbKHI9e29mZnNldDoxfSxyW2VdPW4scildLGZhbHNlKX1yZXR1cm4gd307dmFyIFZlPWZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gUWUoZSxuKS50byhlLHIpfTtyZXR1cm4gdz17cGFyZW50QW5pbWF0aW9uOnYsZWxlbWVudHM6SSxjaGlsZEFuaW1hdGlvbnM6RCxpZDp4LGFuaW1hdGlvbkZpbmlzaDp4ZSxmcm9tOlFlLHRvOlVlLGZyb21UbzpWZSxwYXJlbnQ6U2UscGxheTpHZSxwYXVzZTpIZSxzdG9wOkplLGRlc3Ryb3k6cSxrZXlmcmFtZXM6VGUsYWRkQW5pbWF0aW9uOkNlLGFkZEVsZW1lbnQ6QWUsdXBkYXRlOlJlLGZpbGw6cGUsZGlyZWN0aW9uOm1lLGl0ZXJhdGlvbnM6UGUsZHVyYXRpb246RWUsZWFzaW5nOmdlLGRlbGF5OmhlLGdldFdlYkFuaW1hdGlvbnM6JCxnZXRLZXlmcmFtZXM6eWUsZ2V0RmlsbDp1ZSxnZXREaXJlY3Rpb246Y2UsZ2V0RGVsYXk6ZGUsZ2V0SXRlcmF0aW9uczpsZSxnZXRFYXNpbmc6c2UsZ2V0RHVyYXRpb246dmUsYWZ0ZXJBZGRSZWFkOlgsYWZ0ZXJBZGRXcml0ZTpZLGFmdGVyQ2xlYXJTdHlsZXM6ZmUsYWZ0ZXJTdHlsZXM6b2UsYWZ0ZXJSZW1vdmVDbGFzczppZSxhZnRlckFkZENsYXNzOmFlLGJlZm9yZUFkZFJlYWQ6VSxiZWZvcmVBZGRXcml0ZTpWLGJlZm9yZUNsZWFyU3R5bGVzOnRlLGJlZm9yZVN0eWxlczpyZSxiZWZvcmVSZW1vdmVDbGFzczpuZSxiZWZvcmVBZGRDbGFzczplZSxvbkZpbmlzaDpCLHByb2dyZXNzU3RhcnQ6RmUscHJvZ3Jlc3NTdGVwOk9lLHByb2dyZXNzRW5kOldlfX07ZXhwb3J0e2NyZWF0ZUFuaW1hdGlvbiBhcyBjfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27434\n')},93544:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "g": () => (/* binding */ getTimeGivenProgression)\n/* harmony export */ });\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar getTimeGivenProgression=function(t,r,a,e,o){return solveCubicBezier(t[1],r[1],a[1],e[1],o).map((function(o){return solveCubicParametricEquation(t[0],r[0],a[0],e[0],o)}))};var solveCubicParametricEquation=function(t,r,a,e,o){var i=3*r*Math.pow(o-1,2);var n=-3*a*o+3*a+e*o;var u=t*Math.pow(o-1,3);return o*(i+o*n)-u};var solveCubicBezier=function(t,r,a,e,o){t-=o;r-=o;a-=o;e-=o;var i=solveCubicEquation(e-3*a+3*r-t,3*a-6*r+3*t,3*r-3*t,t);return i.filter((function(t){return t>=0&&t<=1}))};var solveQuadraticEquation=function(t,r,a){var e=r*r-4*t*a;if(e<0){return[]}else{return[(-r+Math.sqrt(e))/(2*t),(-r-Math.sqrt(e))/(2*t)]}};var solveCubicEquation=function(t,r,a,e){if(t===0){return solveQuadraticEquation(r,a,e)}r/=t;a/=t;e/=t;var o=(3*a-r*r)/3;var i=(2*r*r*r-9*r*a+27*e)/27;if(o===0){return[Math.pow(-i,1/3)]}else if(i===0){return[Math.sqrt(-o),-Math.sqrt(-o)]}var n=Math.pow(i/2,2)+Math.pow(o/3,3);if(n===0){return[Math.pow(i/2,1/2)-r/3]}else if(n>0){return[Math.pow(-(i/2)+Math.sqrt(n),1/3)-Math.pow(i/2+Math.sqrt(n),1/3)-r/3]}var u=Math.sqrt(Math.pow(-(o/3),3));var s=Math.acos(-(i/(2*Math.sqrt(Math.pow(-(o/3),3)))));var v=2*Math.pow(u,1/3);return[v*Math.cos(s/3)-r/3,v*Math.cos((s+2*Math.PI)/3)-r/3,v*Math.cos((s+4*Math.PI)/3)-r/3]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM1NDQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxnRUFBZ0UsMkRBQTJELElBQUkscURBQXFELDBCQUEwQixxQkFBcUIsd0JBQXdCLG9CQUFvQix5Q0FBeUMsS0FBSyxLQUFLLEtBQUssS0FBSyw0REFBNEQsNkJBQTZCLGtCQUFrQixJQUFJLDJDQUEyQyxnQkFBZ0IsUUFBUSxTQUFTLEtBQUssMERBQTBELHlDQUF5QyxVQUFVLHFDQUFxQyxLQUFLLEtBQUssS0FBSyxrQkFBa0IsOEJBQThCLFVBQVUseUJBQXlCLGVBQWUscUNBQXFDLHNDQUFzQyxVQUFVLDhCQUE4QixhQUFhLDZFQUE2RSxvQ0FBb0Msd0RBQXdELHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2N1YmljLWJlemllci0xNTRhNTNhNS5qcz8wNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG52YXIgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb249ZnVuY3Rpb24odCxyLGEsZSxvKXtyZXR1cm4gc29sdmVDdWJpY0Jlemllcih0WzFdLHJbMV0sYVsxXSxlWzFdLG8pLm1hcCgoZnVuY3Rpb24obyl7cmV0dXJuIHNvbHZlQ3ViaWNQYXJhbWV0cmljRXF1YXRpb24odFswXSxyWzBdLGFbMF0sZVswXSxvKX0pKX07dmFyIHNvbHZlQ3ViaWNQYXJhbWV0cmljRXF1YXRpb249ZnVuY3Rpb24odCxyLGEsZSxvKXt2YXIgaT0zKnIqTWF0aC5wb3coby0xLDIpO3ZhciBuPS0zKmEqbyszKmErZSpvO3ZhciB1PXQqTWF0aC5wb3coby0xLDMpO3JldHVybiBvKihpK28qbiktdX07dmFyIHNvbHZlQ3ViaWNCZXppZXI9ZnVuY3Rpb24odCxyLGEsZSxvKXt0LT1vO3ItPW87YS09bztlLT1vO3ZhciBpPXNvbHZlQ3ViaWNFcXVhdGlvbihlLTMqYSszKnItdCwzKmEtNipyKzMqdCwzKnItMyp0LHQpO3JldHVybiBpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQ+PTAmJnQ8PTF9KSl9O3ZhciBzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uPWZ1bmN0aW9uKHQscixhKXt2YXIgZT1yKnItNCp0KmE7aWYoZTwwKXtyZXR1cm5bXX1lbHNle3JldHVyblsoLXIrTWF0aC5zcXJ0KGUpKS8oMip0KSwoLXItTWF0aC5zcXJ0KGUpKS8oMip0KV19fTt2YXIgc29sdmVDdWJpY0VxdWF0aW9uPWZ1bmN0aW9uKHQscixhLGUpe2lmKHQ9PT0wKXtyZXR1cm4gc29sdmVRdWFkcmF0aWNFcXVhdGlvbihyLGEsZSl9ci89dDthLz10O2UvPXQ7dmFyIG89KDMqYS1yKnIpLzM7dmFyIGk9KDIqcipyKnItOSpyKmErMjcqZSkvMjc7aWYobz09PTApe3JldHVybltNYXRoLnBvdygtaSwxLzMpXX1lbHNlIGlmKGk9PT0wKXtyZXR1cm5bTWF0aC5zcXJ0KC1vKSwtTWF0aC5zcXJ0KC1vKV19dmFyIG49TWF0aC5wb3coaS8yLDIpK01hdGgucG93KG8vMywzKTtpZihuPT09MCl7cmV0dXJuW01hdGgucG93KGkvMiwxLzIpLXIvM119ZWxzZSBpZihuPjApe3JldHVybltNYXRoLnBvdygtKGkvMikrTWF0aC5zcXJ0KG4pLDEvMyktTWF0aC5wb3coaS8yK01hdGguc3FydChuKSwxLzMpLXIvM119dmFyIHU9TWF0aC5zcXJ0KE1hdGgucG93KC0oby8zKSwzKSk7dmFyIHM9TWF0aC5hY29zKC0oaS8oMipNYXRoLnNxcnQoTWF0aC5wb3coLShvLzMpLDMpKSkpKTt2YXIgdj0yKk1hdGgucG93KHUsMS8zKTtyZXR1cm5bdipNYXRoLmNvcyhzLzMpLXIvMyx2Kk1hdGguY29zKChzKzIqTWF0aC5QSSkvMyktci8zLHYqTWF0aC5jb3MoKHMrNCpNYXRoLlBJKS8zKS1yLzNdfTtleHBvcnR7Z2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24gYXMgZ307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///93544\n')},4988:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "G": () => (/* binding */ GESTURE_CONTROLLER)\n/* harmony export */ });\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar GestureController=function(){function t(){this.gestureId=0;this.requestedStart=new Map;this.disabledGestures=new Map;this.disabledScroll=new Set}t.prototype.createGesture=function(t){return new GestureDelegate(this,this.newID(),t.name,t.priority||0,!!t.disableScroll)};t.prototype.createBlocker=function(t){if(t===void 0){t={}}return new BlockerDelegate(this,this.newID(),t.disable,!!t.disableScroll)};t.prototype.start=function(t,e,r){if(!this.canStart(t)){this.requestedStart.delete(e);return false}this.requestedStart.set(e,r);return true};t.prototype.capture=function(t,e,r){if(!this.start(t,e,r)){return false}var i=this.requestedStart;var s=-1e4;i.forEach((function(t){s=Math.max(s,t)}));if(s===r){this.capturedId=e;i.clear();var l=new CustomEvent("ionGestureCaptured",{detail:{gestureName:t}});document.dispatchEvent(l);return true}i.delete(e);return false};t.prototype.release=function(t){this.requestedStart.delete(t);if(this.capturedId===t){this.capturedId=undefined}};t.prototype.disableGesture=function(t,e){var r=this.disabledGestures.get(t);if(r===undefined){r=new Set;this.disabledGestures.set(t,r)}r.add(e)};t.prototype.enableGesture=function(t,e){var r=this.disabledGestures.get(t);if(r!==undefined){r.delete(e)}};t.prototype.disableScroll=function(t){this.disabledScroll.add(t);if(this.disabledScroll.size===1){document.body.classList.add(BACKDROP_NO_SCROLL)}};t.prototype.enableScroll=function(t){this.disabledScroll.delete(t);if(this.disabledScroll.size===0){document.body.classList.remove(BACKDROP_NO_SCROLL)}};t.prototype.canStart=function(t){if(this.capturedId!==undefined){return false}if(this.isDisabled(t)){return false}return true};t.prototype.isCaptured=function(){return this.capturedId!==undefined};t.prototype.isScrollDisabled=function(){return this.disabledScroll.size>0};t.prototype.isDisabled=function(t){var e=this.disabledGestures.get(t);if(e&&e.size>0){return true}return false};t.prototype.newID=function(){this.gestureId++;return this.gestureId};return t}();var GestureDelegate=function(){function t(t,e,r,i,s){this.id=e;this.name=r;this.disableScroll=s;this.priority=i*1e6+e;this.ctrl=t}t.prototype.canStart=function(){if(!this.ctrl){return false}return this.ctrl.canStart(this.name)};t.prototype.start=function(){if(!this.ctrl){return false}return this.ctrl.start(this.name,this.id,this.priority)};t.prototype.capture=function(){if(!this.ctrl){return false}var t=this.ctrl.capture(this.name,this.id,this.priority);if(t&&this.disableScroll){this.ctrl.disableScroll(this.id)}return t};t.prototype.release=function(){if(this.ctrl){this.ctrl.release(this.id);if(this.disableScroll){this.ctrl.enableScroll(this.id)}}};t.prototype.destroy=function(){this.release();this.ctrl=undefined};return t}();var BlockerDelegate=function(){function t(t,e,r,i){this.id=e;this.disable=r;this.disableScroll=i;this.ctrl=t}t.prototype.block=function(){if(!this.ctrl){return}if(this.disable){for(var t=0,e=this.disable;t<e.length;t++){var r=e[t];this.ctrl.disableGesture(r,this.id)}}if(this.disableScroll){this.ctrl.disableScroll(this.id)}};t.prototype.unblock=function(){if(!this.ctrl){return}if(this.disable){for(var t=0,e=this.disable;t<e.length;t++){var r=e[t];this.ctrl.enableGesture(r,this.id)}}if(this.disableScroll){this.ctrl.enableScroll(this.id)}};t.prototype.destroy=function(){this.unblock();this.ctrl=undefined};return t}();var BACKDROP_NO_SCROLL="backdrop-no-scroll";var GESTURE_CONTROLLER=new GestureController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk4OC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGFBQWEsaUJBQWlCLDRCQUE0Qiw4QkFBOEIsNEJBQTRCLHNDQUFzQyxzRkFBc0Ysc0NBQXNDLGVBQWUsS0FBSywyRUFBMkUsa0NBQWtDLHNCQUFzQiw4QkFBOEIsYUFBYSw2QkFBNkIsYUFBYSxvQ0FBb0MsdUJBQXVCLGFBQWEsMEJBQTBCLFdBQVcsdUJBQXVCLGdCQUFnQixHQUFHLFVBQVUsa0JBQWtCLFVBQVUsNENBQTRDLFFBQVEsZUFBZSxFQUFFLDBCQUEwQixZQUFZLFlBQVksY0FBYyxnQ0FBZ0MsOEJBQThCLHdCQUF3Qiw0QkFBNEIseUNBQXlDLG1DQUFtQyxrQkFBa0IsVUFBVSwrQkFBK0IsVUFBVSx3Q0FBd0MsbUNBQW1DLGtCQUFrQixjQUFjLHNDQUFzQywyQkFBMkIsaUNBQWlDLGtEQUFrRCxxQ0FBcUMsOEJBQThCLGlDQUFpQyxxREFBcUQsaUNBQWlDLGdDQUFnQyxhQUFhLHVCQUF1QixhQUFhLGFBQWEsa0NBQWtDLG9DQUFvQyx3Q0FBd0MsbUNBQW1DLG1DQUFtQyxtQ0FBbUMsZ0JBQWdCLFlBQVksY0FBYyw2QkFBNkIsaUJBQWlCLHVCQUF1QixTQUFTLEdBQUcsK0JBQStCLHNCQUFzQixVQUFVLFlBQVkscUJBQXFCLHNCQUFzQixZQUFZLGdDQUFnQyxlQUFlLGFBQWEsc0NBQXNDLDZCQUE2QixlQUFlLGFBQWEseURBQXlELCtCQUErQixlQUFlLGFBQWEseURBQXlELDBCQUEwQixpQ0FBaUMsVUFBVSwrQkFBK0IsY0FBYywyQkFBMkIsdUJBQXVCLG1DQUFtQywrQkFBK0IsZUFBZSxxQkFBcUIsU0FBUyxHQUFHLCtCQUErQixvQkFBb0IsVUFBVSxlQUFlLHFCQUFxQixZQUFZLDZCQUE2QixlQUFlLE9BQU8saUJBQWlCLDJCQUEyQixXQUFXLEtBQUssV0FBVyxxQ0FBcUMsdUJBQXVCLG1DQUFtQywrQkFBK0IsZUFBZSxPQUFPLGlCQUFpQiwyQkFBMkIsV0FBVyxLQUFLLFdBQVcsb0NBQW9DLHVCQUF1QixrQ0FBa0MsK0JBQStCLGVBQWUscUJBQXFCLFNBQVMsR0FBRyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9nZXN0dXJlLWNvbnRyb2xsZXItNjhjMDIzYTQuanM/NGFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xudmFyIEdlc3R1cmVDb250cm9sbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuZ2VzdHVyZUlkPTA7dGhpcy5yZXF1ZXN0ZWRTdGFydD1uZXcgTWFwO3RoaXMuZGlzYWJsZWRHZXN0dXJlcz1uZXcgTWFwO3RoaXMuZGlzYWJsZWRTY3JvbGw9bmV3IFNldH10LnByb3RvdHlwZS5jcmVhdGVHZXN0dXJlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgR2VzdHVyZURlbGVnYXRlKHRoaXMsdGhpcy5uZXdJRCgpLHQubmFtZSx0LnByaW9yaXR5fHwwLCEhdC5kaXNhYmxlU2Nyb2xsKX07dC5wcm90b3R5cGUuY3JlYXRlQmxvY2tlcj1mdW5jdGlvbih0KXtpZih0PT09dm9pZCAwKXt0PXt9fXJldHVybiBuZXcgQmxvY2tlckRlbGVnYXRlKHRoaXMsdGhpcy5uZXdJRCgpLHQuZGlzYWJsZSwhIXQuZGlzYWJsZVNjcm9sbCl9O3QucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKHQsZSxyKXtpZighdGhpcy5jYW5TdGFydCh0KSl7dGhpcy5yZXF1ZXN0ZWRTdGFydC5kZWxldGUoZSk7cmV0dXJuIGZhbHNlfXRoaXMucmVxdWVzdGVkU3RhcnQuc2V0KGUscik7cmV0dXJuIHRydWV9O3QucHJvdG90eXBlLmNhcHR1cmU9ZnVuY3Rpb24odCxlLHIpe2lmKCF0aGlzLnN0YXJ0KHQsZSxyKSl7cmV0dXJuIGZhbHNlfXZhciBpPXRoaXMucmVxdWVzdGVkU3RhcnQ7dmFyIHM9LTFlNDtpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3M9TWF0aC5tYXgocyx0KX0pKTtpZihzPT09cil7dGhpcy5jYXB0dXJlZElkPWU7aS5jbGVhcigpO3ZhciBsPW5ldyBDdXN0b21FdmVudChcImlvbkdlc3R1cmVDYXB0dXJlZFwiLHtkZXRhaWw6e2dlc3R1cmVOYW1lOnR9fSk7ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChsKTtyZXR1cm4gdHJ1ZX1pLmRlbGV0ZShlKTtyZXR1cm4gZmFsc2V9O3QucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24odCl7dGhpcy5yZXF1ZXN0ZWRTdGFydC5kZWxldGUodCk7aWYodGhpcy5jYXB0dXJlZElkPT09dCl7dGhpcy5jYXB0dXJlZElkPXVuZGVmaW5lZH19O3QucHJvdG90eXBlLmRpc2FibGVHZXN0dXJlPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5kaXNhYmxlZEdlc3R1cmVzLmdldCh0KTtpZihyPT09dW5kZWZpbmVkKXtyPW5ldyBTZXQ7dGhpcy5kaXNhYmxlZEdlc3R1cmVzLnNldCh0LHIpfXIuYWRkKGUpfTt0LnByb3RvdHlwZS5lbmFibGVHZXN0dXJlPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5kaXNhYmxlZEdlc3R1cmVzLmdldCh0KTtpZihyIT09dW5kZWZpbmVkKXtyLmRlbGV0ZShlKX19O3QucHJvdG90eXBlLmRpc2FibGVTY3JvbGw9ZnVuY3Rpb24odCl7dGhpcy5kaXNhYmxlZFNjcm9sbC5hZGQodCk7aWYodGhpcy5kaXNhYmxlZFNjcm9sbC5zaXplPT09MSl7ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKEJBQ0tEUk9QX05PX1NDUk9MTCl9fTt0LnByb3RvdHlwZS5lbmFibGVTY3JvbGw9ZnVuY3Rpb24odCl7dGhpcy5kaXNhYmxlZFNjcm9sbC5kZWxldGUodCk7aWYodGhpcy5kaXNhYmxlZFNjcm9sbC5zaXplPT09MCl7ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKEJBQ0tEUk9QX05PX1NDUk9MTCl9fTt0LnByb3RvdHlwZS5jYW5TdGFydD1mdW5jdGlvbih0KXtpZih0aGlzLmNhcHR1cmVkSWQhPT11bmRlZmluZWQpe3JldHVybiBmYWxzZX1pZih0aGlzLmlzRGlzYWJsZWQodCkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX07dC5wcm90b3R5cGUuaXNDYXB0dXJlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhcHR1cmVkSWQhPT11bmRlZmluZWR9O3QucHJvdG90eXBlLmlzU2Nyb2xsRGlzYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNhYmxlZFNjcm9sbC5zaXplPjB9O3QucHJvdG90eXBlLmlzRGlzYWJsZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5kaXNhYmxlZEdlc3R1cmVzLmdldCh0KTtpZihlJiZlLnNpemU+MCl7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTt0LnByb3RvdHlwZS5uZXdJRD1mdW5jdGlvbigpe3RoaXMuZ2VzdHVyZUlkKys7cmV0dXJuIHRoaXMuZ2VzdHVyZUlkfTtyZXR1cm4gdH0oKTt2YXIgR2VzdHVyZURlbGVnYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUscixpLHMpe3RoaXMuaWQ9ZTt0aGlzLm5hbWU9cjt0aGlzLmRpc2FibGVTY3JvbGw9czt0aGlzLnByaW9yaXR5PWkqMWU2K2U7dGhpcy5jdHJsPXR9dC5wcm90b3R5cGUuY2FuU3RhcnQ9ZnVuY3Rpb24oKXtpZighdGhpcy5jdHJsKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRoaXMuY3RybC5jYW5TdGFydCh0aGlzLm5hbWUpfTt0LnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe2lmKCF0aGlzLmN0cmwpe3JldHVybiBmYWxzZX1yZXR1cm4gdGhpcy5jdHJsLnN0YXJ0KHRoaXMubmFtZSx0aGlzLmlkLHRoaXMucHJpb3JpdHkpfTt0LnByb3RvdHlwZS5jYXB0dXJlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuY3RybCl7cmV0dXJuIGZhbHNlfXZhciB0PXRoaXMuY3RybC5jYXB0dXJlKHRoaXMubmFtZSx0aGlzLmlkLHRoaXMucHJpb3JpdHkpO2lmKHQmJnRoaXMuZGlzYWJsZVNjcm9sbCl7dGhpcy5jdHJsLmRpc2FibGVTY3JvbGwodGhpcy5pZCl9cmV0dXJuIHR9O3QucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24oKXtpZih0aGlzLmN0cmwpe3RoaXMuY3RybC5yZWxlYXNlKHRoaXMuaWQpO2lmKHRoaXMuZGlzYWJsZVNjcm9sbCl7dGhpcy5jdHJsLmVuYWJsZVNjcm9sbCh0aGlzLmlkKX19fTt0LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5yZWxlYXNlKCk7dGhpcy5jdHJsPXVuZGVmaW5lZH07cmV0dXJuIHR9KCk7dmFyIEJsb2NrZXJEZWxlZ2F0ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLHIsaSl7dGhpcy5pZD1lO3RoaXMuZGlzYWJsZT1yO3RoaXMuZGlzYWJsZVNjcm9sbD1pO3RoaXMuY3RybD10fXQucHJvdG90eXBlLmJsb2NrPWZ1bmN0aW9uKCl7aWYoIXRoaXMuY3RybCl7cmV0dXJufWlmKHRoaXMuZGlzYWJsZSl7Zm9yKHZhciB0PTAsZT10aGlzLmRpc2FibGU7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWVbdF07dGhpcy5jdHJsLmRpc2FibGVHZXN0dXJlKHIsdGhpcy5pZCl9fWlmKHRoaXMuZGlzYWJsZVNjcm9sbCl7dGhpcy5jdHJsLmRpc2FibGVTY3JvbGwodGhpcy5pZCl9fTt0LnByb3RvdHlwZS51bmJsb2NrPWZ1bmN0aW9uKCl7aWYoIXRoaXMuY3RybCl7cmV0dXJufWlmKHRoaXMuZGlzYWJsZSl7Zm9yKHZhciB0PTAsZT10aGlzLmRpc2FibGU7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWVbdF07dGhpcy5jdHJsLmVuYWJsZUdlc3R1cmUocix0aGlzLmlkKX19aWYodGhpcy5kaXNhYmxlU2Nyb2xsKXt0aGlzLmN0cmwuZW5hYmxlU2Nyb2xsKHRoaXMuaWQpfX07dC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMudW5ibG9jaygpO3RoaXMuY3RybD11bmRlZmluZWR9O3JldHVybiB0fSgpO3ZhciBCQUNLRFJPUF9OT19TQ1JPTEw9XCJiYWNrZHJvcC1uby1zY3JvbGxcIjt2YXIgR0VTVFVSRV9DT05UUk9MTEVSPW5ldyBHZXN0dXJlQ29udHJvbGxlcjtleHBvcnR7R0VTVFVSRV9DT05UUk9MTEVSIGFzIEd9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4988\n')},47292:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "MENU_BACK_BUTTON_PRIORITY": () => (/* binding */ MENU_BACK_BUTTON_PRIORITY),\n/* harmony export */   "OVERLAY_BACK_BUTTON_PRIORITY": () => (/* binding */ OVERLAY_BACK_BUTTON_PRIORITY),\n/* harmony export */   "blockHardwareBackButton": () => (/* binding */ blockHardwareBackButton),\n/* harmony export */   "startHardwareBackButton": () => (/* binding */ startHardwareBackButton)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70655);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var blockHardwareBackButton=function(){document.addEventListener("backbutton",(function(){}))};var startHardwareBackButton=function(){var r=document;var t=false;r.addEventListener("backbutton",(function(){if(t){return}var n=0;var e=[];var a=new CustomEvent("ionBackButton",{bubbles:false,detail:{register:function(r,t){e.push({priority:r,handler:t,id:n++})}}});r.dispatchEvent(a);var i=function(r){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var t,n;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__generator */ .Jh)(this,(function(e){switch(e.label){case 0:e.trys.push([0,3,,4]);if(!(r&&r.handler))return[3,2];t=r.handler(o);if(!(t!=null))return[3,2];return[4,t];case 1:e.sent();e.label=2;case 2:return[3,4];case 3:n=e.sent();console.error(n);return[3,4];case 4:return[2]}}))}))};var o=function(){if(e.length>0){var r={priority:Number.MIN_SAFE_INTEGER,handler:function(){return undefined},id:-1};e.forEach((function(t){if(t.priority>=r.priority){r=t}}));t=true;e=e.filter((function(t){return t.id!==r.id}));i(r).then((function(){return t=false}))}};o()}))};var OVERLAY_BACK_BUTTON_PRIORITY=100;var MENU_BACK_BUTTON_PRIORITY=99;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyOTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBeUM7QUFDekM7QUFDQTtBQUNBLDBDQUEwQyxvREFBb0QsSUFBSSx1Q0FBdUMsZUFBZSxZQUFZLDRDQUE0QyxNQUFNLE9BQU8sUUFBUSxTQUFTLHVDQUF1QyxzQkFBc0IsdUJBQXVCLFFBQVEsNEJBQTRCLElBQUksRUFBRSxtQkFBbUIsa0JBQWtCLE9BQU8sMERBQVMsa0NBQWtDLFFBQVEsT0FBTyw0REFBVyxtQkFBbUIsZ0JBQWdCLDZCQUE2QiwrQkFBK0IsZUFBZSwwQkFBMEIsWUFBWSxnQkFBZ0IsVUFBVSxtQkFBbUIsa0JBQWtCLGlCQUFpQixZQUFZLGtCQUFrQixHQUFHLElBQUksaUJBQWlCLGVBQWUsT0FBTyxvREFBb0QsaUJBQWlCLFFBQVEsdUJBQXVCLDJCQUEyQixLQUFLLEdBQUcsT0FBTyx3QkFBd0IsbUJBQW1CLEdBQUcsc0JBQXNCLGVBQWUsS0FBSyxJQUFJLElBQUkscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGVudC1taXMtbW9iaWxlLWFwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS1lczUvaGFyZHdhcmUtYmFjay1idXR0b24tYWNlNmE3MWIuanM/OTVkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7X19hd2FpdGVyLF9fZ2VuZXJhdG9yfWZyb21cInRzbGliXCI7XG4vKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL3ZhciBibG9ja0hhcmR3YXJlQmFja0J1dHRvbj1mdW5jdGlvbigpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJiYWNrYnV0dG9uXCIsKGZ1bmN0aW9uKCl7fSkpfTt2YXIgc3RhcnRIYXJkd2FyZUJhY2tCdXR0b249ZnVuY3Rpb24oKXt2YXIgcj1kb2N1bWVudDt2YXIgdD1mYWxzZTtyLmFkZEV2ZW50TGlzdGVuZXIoXCJiYWNrYnV0dG9uXCIsKGZ1bmN0aW9uKCl7aWYodCl7cmV0dXJufXZhciBuPTA7dmFyIGU9W107dmFyIGE9bmV3IEN1c3RvbUV2ZW50KFwiaW9uQmFja0J1dHRvblwiLHtidWJibGVzOmZhbHNlLGRldGFpbDp7cmVnaXN0ZXI6ZnVuY3Rpb24ocix0KXtlLnB1c2goe3ByaW9yaXR5OnIsaGFuZGxlcjp0LGlkOm4rK30pfX19KTtyLmRpc3BhdGNoRXZlbnQoYSk7dmFyIGk9ZnVuY3Rpb24ocil7cmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxuO3JldHVybiBfX2dlbmVyYXRvcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOmUudHJ5cy5wdXNoKFswLDMsLDRdKTtpZighKHImJnIuaGFuZGxlcikpcmV0dXJuWzMsMl07dD1yLmhhbmRsZXIobyk7aWYoISh0IT1udWxsKSlyZXR1cm5bMywyXTtyZXR1cm5bNCx0XTtjYXNlIDE6ZS5zZW50KCk7ZS5sYWJlbD0yO2Nhc2UgMjpyZXR1cm5bMyw0XTtjYXNlIDM6bj1lLnNlbnQoKTtjb25zb2xlLmVycm9yKG4pO3JldHVyblszLDRdO2Nhc2UgNDpyZXR1cm5bMl19fSkpfSkpfTt2YXIgbz1mdW5jdGlvbigpe2lmKGUubGVuZ3RoPjApe3ZhciByPXtwcmlvcml0eTpOdW1iZXIuTUlOX1NBRkVfSU5URUdFUixoYW5kbGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHVuZGVmaW5lZH0saWQ6LTF9O2UuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYodC5wcmlvcml0eT49ci5wcmlvcml0eSl7cj10fX0pKTt0PXRydWU7ZT1lLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWQhPT1yLmlkfSkpO2kocikudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gdD1mYWxzZX0pKX19O28oKX0pKX07dmFyIE9WRVJMQVlfQkFDS19CVVRUT05fUFJJT1JJVFk9MTAwO3ZhciBNRU5VX0JBQ0tfQlVUVE9OX1BSSU9SSVRZPTk5O2V4cG9ydHtNRU5VX0JBQ0tfQlVUVE9OX1BSSU9SSVRZLE9WRVJMQVlfQkFDS19CVVRUT05fUFJJT1JJVFksYmxvY2tIYXJkd2FyZUJhY2tCdXR0b24sc3RhcnRIYXJkd2FyZUJhY2tCdXR0b259OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47292\n')},17504:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ addEventListener),\n/* harmony export */   "b": () => (/* binding */ removeEventListener),\n/* harmony export */   "c": () => (/* binding */ componentOnReady),\n/* harmony export */   "d": () => (/* binding */ getAriaLabel),\n/* harmony export */   "e": () => (/* binding */ renderHiddenInput),\n/* harmony export */   "f": () => (/* binding */ focusElement),\n/* harmony export */   "g": () => (/* binding */ getElementRoot),\n/* harmony export */   "h": () => (/* binding */ debounceEvent),\n/* harmony export */   "i": () => (/* binding */ inheritAttributes),\n/* harmony export */   "j": () => (/* binding */ findItemLabel),\n/* harmony export */   "k": () => (/* binding */ clamp),\n/* harmony export */   "l": () => (/* binding */ hasShadowDom),\n/* harmony export */   "m": () => (/* binding */ assert),\n/* harmony export */   "n": () => (/* binding */ isEndSide),\n/* harmony export */   "o": () => (/* binding */ debounce),\n/* harmony export */   "p": () => (/* binding */ pointerCoord),\n/* harmony export */   "q": () => (/* binding */ now),\n/* harmony export */   "r": () => (/* binding */ raf),\n/* harmony export */   "s": () => (/* binding */ shallowEqualStringMap),\n/* harmony export */   "t": () => (/* binding */ transitionEndAsync)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70655);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var transitionEndAsync=function(e,n){if(n===void 0){n=0}return new Promise((function(t){transitionEnd(e,n,t)}))};var transitionEnd=function(e,n,t){if(n===void 0){n=0}var r;var i;var a={passive:true};var o=500;var u=function(){if(r){r()}};var s=function(n){if(n===undefined||e===n.target){u();t(n)}};if(e){e.addEventListener("webkitTransitionEnd",s,a);e.addEventListener("transitionend",s,a);i=setTimeout(s,n+o);r=function(){if(i){clearTimeout(i);i=undefined}e.removeEventListener("webkitTransitionEnd",s,a);e.removeEventListener("transitionend",s,a)}}return u};var componentOnReady=function(e,n){if(e.componentOnReady){e.componentOnReady().then((function(e){return n(e)}))}else{raf((function(){return n(e)}))}};var inheritAttributes=function(e,n){if(n===void 0){n=[]}var t={};n.forEach((function(n){if(e.hasAttribute(n)){var r=e.getAttribute(n);if(r!==null){t[n]=e.getAttribute(n)}e.removeAttribute(n)}}));return t};var addEventListener=function(e,n,t,r){if(typeof window!=="undefined"){var i=window;var a=i&&i.Ionic&&i.Ionic.config;if(a){var o=a.get("_ael");if(o){return o(e,n,t,r)}else if(a._ael){return a._ael(e,n,t,r)}}}return e.addEventListener(n,t,r)};var removeEventListener=function(e,n,t,r){if(typeof window!=="undefined"){var i=window;var a=i&&i.Ionic&&i.Ionic.config;if(a){var o=a.get("_rel");if(o){return o(e,n,t,r)}else if(a._rel){return a._rel(e,n,t,r)}}}return e.removeEventListener(n,t,r)};var getElementRoot=function(e,n){if(n===void 0){n=e}return e.shadowRoot||n};var raf=function(e){if(typeof __zone_symbol__requestAnimationFrame==="function"){return __zone_symbol__requestAnimationFrame(e)}if(typeof requestAnimationFrame==="function"){return requestAnimationFrame(e)}return setTimeout(e)};var hasShadowDom=function(e){return!!e.shadowRoot&&!!e.attachShadow};var findItemLabel=function(e){var n=e.closest("ion-item");if(n){return n.querySelector("ion-label")}return null};var focusElement=function(e){e.focus();if(e.classList.contains("ion-focusable")){var n=e.closest("ion-app");if(n){n.setFocus([e])}}};var getAriaLabel=function(e,n){var t;var r=e.getAttribute("aria-labelledby");var i=e.id;var a=r!==null&&r.trim()!==""?r:n+"-lbl";var o=r!==null&&r.trim()!==""?document.getElementById(r):findItemLabel(e);if(o){if(r===null){o.id=a}t=o.textContent;o.setAttribute("aria-hidden","true")}else if(i.trim()!==""){o=document.querySelector(\'label[for="\'.concat(i,\'"]\'));if(o){if(o.id!==""){a=o.id}else{o.id=a="".concat(i,"-lbl")}t=o.textContent}}return{label:o,labelId:a,labelText:t}};var renderHiddenInput=function(e,n,t,r,i){if(e||hasShadowDom(n)){var a=n.querySelector("input.aux-input");if(!a){a=n.ownerDocument.createElement("input");a.type="hidden";a.classList.add("aux-input");n.appendChild(a)}a.disabled=i;a.name=t;a.value=r||""}};var clamp=function(e,n,t){return Math.max(e,Math.min(n,t))};var assert=function(e,n){if(!e){var t="ASSERT: "+n;console.error(t);debugger;throw new Error(t)}};var now=function(e){return e.timeStamp||Date.now()};var pointerCoord=function(e){if(e){var n=e.changedTouches;if(n&&n.length>0){var t=n[0];return{x:t.clientX,y:t.clientY}}if(e.pageX!==undefined){return{x:e.pageX,y:e.pageY}}}return{x:0,y:0}};var isEndSide=function(e){var n=document.dir==="rtl";switch(e){case"start":return n;case"end":return!n;default:throw new Error(\'"\'.concat(e,\'" is not a valid value for [side]. Use "start" or "end" instead.\'))}};var debounceEvent=function(e,n){var t=e._original||e;return{_original:e,emit:debounce(t.emit.bind(t),n)}};var debounce=function(e,n){if(n===void 0){n=0}var t;return function(){var r=[];for(var i=0;i<arguments.length;i++){r[i]=arguments[i]}clearTimeout(t);t=setTimeout.apply(void 0,(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([e,n],r,false))}};var shallowEqualStringMap=function(e,n){e!==null&&e!==void 0?e:e={};n!==null&&n!==void 0?n:n={};if(e===n){return true}var t=Object.keys(e);if(t.length!==Object.keys(n).length){return false}for(var r=0,i=t;r<i.length;r++){var a=i[r];if(!(a in n)){return false}if(e[a]!==n[a]){return false}}return true};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1MDQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ2pDO0FBQ0E7QUFDQSx3Q0FBd0MsZUFBZSxJQUFJLGdDQUFnQyxxQkFBcUIsSUFBSSxrQ0FBa0MsZUFBZSxJQUFJLE1BQU0sTUFBTSxPQUFPLGNBQWMsVUFBVSxpQkFBaUIsTUFBTSxNQUFNLGtCQUFrQixnQ0FBZ0MsSUFBSSxPQUFPLE1BQU0sOENBQThDLHdDQUF3QyxvQkFBb0IsYUFBYSxNQUFNLGdCQUFnQixZQUFZLGlEQUFpRCw0Q0FBNEMsVUFBVSxtQ0FBbUMsdUJBQXVCLHVDQUF1QyxZQUFZLEdBQUcsS0FBSyxnQkFBZ0IsWUFBWSxLQUFLLG9DQUFvQyxlQUFlLEtBQUssU0FBUyx1QkFBdUIsc0JBQXNCLHdCQUF3QixhQUFhLHVCQUF1QixzQkFBc0IsR0FBRyxVQUFVLHVDQUF1QyxnQ0FBZ0MsYUFBYSxpQ0FBaUMsTUFBTSxvQkFBb0IsTUFBTSxrQkFBa0IsZ0JBQWdCLHlCQUF5QixrQ0FBa0MsMENBQTBDLGdDQUFnQyxhQUFhLGlDQUFpQyxNQUFNLG9CQUFvQixNQUFNLGtCQUFrQixnQkFBZ0IseUJBQXlCLHFDQUFxQyxpQ0FBaUMsZUFBZSxJQUFJLHdCQUF3QixvQkFBb0IsNkRBQTZELCtDQUErQyw4Q0FBOEMsZ0NBQWdDLHNCQUFzQiw2QkFBNkIsd0NBQXdDLDhCQUE4Qiw0QkFBNEIsTUFBTSxvQ0FBb0MsYUFBYSw2QkFBNkIsVUFBVSwwQ0FBMEMsMkJBQTJCLE1BQU0sbUJBQW1CLCtCQUErQixNQUFNLHdDQUF3QyxXQUFXLHlDQUF5QywwRUFBMEUsTUFBTSxhQUFhLE9BQU8sZ0JBQWdCLHFDQUFxQyx1QkFBdUIsdURBQXVELE1BQU0sY0FBYyxPQUFPLEtBQUssMkJBQTJCLGlCQUFpQixPQUFPLGdDQUFnQywwQ0FBMEMsdUJBQXVCLHlDQUF5QyxPQUFPLHlDQUF5QyxnQkFBZ0IsNkJBQTZCLGlCQUFpQixhQUFhLFNBQVMsZ0JBQWdCLDBCQUEwQixrQ0FBa0MseUJBQXlCLE9BQU8sbUJBQW1CLGlCQUFpQixTQUFTLHFCQUFxQixvQkFBb0IsZ0NBQWdDLDZCQUE2QixNQUFNLHVCQUF1QixrQkFBa0IsV0FBVyxPQUFPLHlCQUF5Qix3QkFBd0IsT0FBTyxzQkFBc0IsT0FBTyxVQUFVLDBCQUEwQiwyQkFBMkIsVUFBVSxxQkFBcUIsbUJBQW1CLDRHQUE0RyxnQ0FBZ0MscUJBQXFCLE9BQU8sOENBQThDLDJCQUEyQixlQUFlLElBQUksTUFBTSxrQkFBa0IsU0FBUyxZQUFZLG1CQUFtQixLQUFLLGtCQUFrQixnQkFBZ0IsMEJBQTBCLDhEQUFhLG1CQUFtQix3Q0FBd0MsNEJBQTRCLDRCQUE0QixVQUFVLFlBQVkscUJBQXFCLHFDQUFxQyxhQUFhLGdCQUFnQixXQUFXLEtBQUssV0FBVyxjQUFjLGFBQWEsZ0JBQWdCLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9oZWxwZXJzLTZlMWU1YjY1LmpzP2E4ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e19fc3ByZWFkQXJyYXl9ZnJvbVwidHNsaWJcIjtcbi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovdmFyIHRyYW5zaXRpb25FbmRBc3luYz1mdW5jdGlvbihlLG4pe2lmKG49PT12b2lkIDApe249MH1yZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3RyYW5zaXRpb25FbmQoZSxuLHQpfSkpfTt2YXIgdHJhbnNpdGlvbkVuZD1mdW5jdGlvbihlLG4sdCl7aWYobj09PXZvaWQgMCl7bj0wfXZhciByO3ZhciBpO3ZhciBhPXtwYXNzaXZlOnRydWV9O3ZhciBvPTUwMDt2YXIgdT1mdW5jdGlvbigpe2lmKHIpe3IoKX19O3ZhciBzPWZ1bmN0aW9uKG4pe2lmKG49PT11bmRlZmluZWR8fGU9PT1uLnRhcmdldCl7dSgpO3Qobil9fTtpZihlKXtlLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIscyxhKTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIscyxhKTtpPXNldFRpbWVvdXQocyxuK28pO3I9ZnVuY3Rpb24oKXtpZihpKXtjbGVhclRpbWVvdXQoaSk7aT11bmRlZmluZWR9ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLHMsYSk7ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHMsYSl9fXJldHVybiB1fTt2YXIgY29tcG9uZW50T25SZWFkeT1mdW5jdGlvbihlLG4pe2lmKGUuY29tcG9uZW50T25SZWFkeSl7ZS5jb21wb25lbnRPblJlYWR5KCkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSl9KSl9ZWxzZXtyYWYoKGZ1bmN0aW9uKCl7cmV0dXJuIG4oZSl9KSl9fTt2YXIgaW5oZXJpdEF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSxuKXtpZihuPT09dm9pZCAwKXtuPVtdfXZhciB0PXt9O24uZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoZS5oYXNBdHRyaWJ1dGUobikpe3ZhciByPWUuZ2V0QXR0cmlidXRlKG4pO2lmKHIhPT1udWxsKXt0W25dPWUuZ2V0QXR0cmlidXRlKG4pfWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pKTtyZXR1cm4gdH07dmFyIGFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSxuLHQscil7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe3ZhciBpPXdpbmRvdzt2YXIgYT1pJiZpLklvbmljJiZpLklvbmljLmNvbmZpZztpZihhKXt2YXIgbz1hLmdldChcIl9hZWxcIik7aWYobyl7cmV0dXJuIG8oZSxuLHQscil9ZWxzZSBpZihhLl9hZWwpe3JldHVybiBhLl9hZWwoZSxuLHQscil9fX1yZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKG4sdCxyKX07dmFyIHJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSxuLHQscil7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe3ZhciBpPXdpbmRvdzt2YXIgYT1pJiZpLklvbmljJiZpLklvbmljLmNvbmZpZztpZihhKXt2YXIgbz1hLmdldChcIl9yZWxcIik7aWYobyl7cmV0dXJuIG8oZSxuLHQscil9ZWxzZSBpZihhLl9yZWwpe3JldHVybiBhLl9yZWwoZSxuLHQscil9fX1yZXR1cm4gZS5yZW1vdmVFdmVudExpc3RlbmVyKG4sdCxyKX07dmFyIGdldEVsZW1lbnRSb290PWZ1bmN0aW9uKGUsbil7aWYobj09PXZvaWQgMCl7bj1lfXJldHVybiBlLnNoYWRvd1Jvb3R8fG59O3ZhciByYWY9ZnVuY3Rpb24oZSl7aWYodHlwZW9mIF9fem9uZV9zeW1ib2xfX3JlcXVlc3RBbmltYXRpb25GcmFtZT09PVwiZnVuY3Rpb25cIil7cmV0dXJuIF9fem9uZV9zeW1ib2xfX3JlcXVlc3RBbmltYXRpb25GcmFtZShlKX1pZih0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUpfXJldHVybiBzZXRUaW1lb3V0KGUpfTt2YXIgaGFzU2hhZG93RG9tPWZ1bmN0aW9uKGUpe3JldHVybiEhZS5zaGFkb3dSb290JiYhIWUuYXR0YWNoU2hhZG93fTt2YXIgZmluZEl0ZW1MYWJlbD1mdW5jdGlvbihlKXt2YXIgbj1lLmNsb3Nlc3QoXCJpb24taXRlbVwiKTtpZihuKXtyZXR1cm4gbi5xdWVyeVNlbGVjdG9yKFwiaW9uLWxhYmVsXCIpfXJldHVybiBudWxsfTt2YXIgZm9jdXNFbGVtZW50PWZ1bmN0aW9uKGUpe2UuZm9jdXMoKTtpZihlLmNsYXNzTGlzdC5jb250YWlucyhcImlvbi1mb2N1c2FibGVcIikpe3ZhciBuPWUuY2xvc2VzdChcImlvbi1hcHBcIik7aWYobil7bi5zZXRGb2N1cyhbZV0pfX19O3ZhciBnZXRBcmlhTGFiZWw9ZnVuY3Rpb24oZSxuKXt2YXIgdDt2YXIgcj1lLmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiKTt2YXIgaT1lLmlkO3ZhciBhPXIhPT1udWxsJiZyLnRyaW0oKSE9PVwiXCI/cjpuK1wiLWxibFwiO3ZhciBvPXIhPT1udWxsJiZyLnRyaW0oKSE9PVwiXCI/ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocik6ZmluZEl0ZW1MYWJlbChlKTtpZihvKXtpZihyPT09bnVsbCl7by5pZD1hfXQ9by50ZXh0Q29udGVudDtvLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpfWVsc2UgaWYoaS50cmltKCkhPT1cIlwiKXtvPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsW2Zvcj1cIicuY29uY2F0KGksJ1wiXScpKTtpZihvKXtpZihvLmlkIT09XCJcIil7YT1vLmlkfWVsc2V7by5pZD1hPVwiXCIuY29uY2F0KGksXCItbGJsXCIpfXQ9by50ZXh0Q29udGVudH19cmV0dXJue2xhYmVsOm8sbGFiZWxJZDphLGxhYmVsVGV4dDp0fX07dmFyIHJlbmRlckhpZGRlbklucHV0PWZ1bmN0aW9uKGUsbix0LHIsaSl7aWYoZXx8aGFzU2hhZG93RG9tKG4pKXt2YXIgYT1uLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dC5hdXgtaW5wdXRcIik7aWYoIWEpe2E9bi5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTthLnR5cGU9XCJoaWRkZW5cIjthLmNsYXNzTGlzdC5hZGQoXCJhdXgtaW5wdXRcIik7bi5hcHBlbmRDaGlsZChhKX1hLmRpc2FibGVkPWk7YS5uYW1lPXQ7YS52YWx1ZT1yfHxcIlwifX07dmFyIGNsYW1wPWZ1bmN0aW9uKGUsbix0KXtyZXR1cm4gTWF0aC5tYXgoZSxNYXRoLm1pbihuLHQpKX07dmFyIGFzc2VydD1mdW5jdGlvbihlLG4pe2lmKCFlKXt2YXIgdD1cIkFTU0VSVDogXCIrbjtjb25zb2xlLmVycm9yKHQpO2RlYnVnZ2VyO3Rocm93IG5ldyBFcnJvcih0KX19O3ZhciBub3c9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGltZVN0YW1wfHxEYXRlLm5vdygpfTt2YXIgcG9pbnRlckNvb3JkPWZ1bmN0aW9uKGUpe2lmKGUpe3ZhciBuPWUuY2hhbmdlZFRvdWNoZXM7aWYobiYmbi5sZW5ndGg+MCl7dmFyIHQ9blswXTtyZXR1cm57eDp0LmNsaWVudFgseTp0LmNsaWVudFl9fWlmKGUucGFnZVghPT11bmRlZmluZWQpe3JldHVybnt4OmUucGFnZVgseTplLnBhZ2VZfX19cmV0dXJue3g6MCx5OjB9fTt2YXIgaXNFbmRTaWRlPWZ1bmN0aW9uKGUpe3ZhciBuPWRvY3VtZW50LmRpcj09PVwicnRsXCI7c3dpdGNoKGUpe2Nhc2VcInN0YXJ0XCI6cmV0dXJuIG47Y2FzZVwiZW5kXCI6cmV0dXJuIW47ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoJ1wiJy5jb25jYXQoZSwnXCIgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIFtzaWRlXS4gVXNlIFwic3RhcnRcIiBvciBcImVuZFwiIGluc3RlYWQuJykpfX07dmFyIGRlYm91bmNlRXZlbnQ9ZnVuY3Rpb24oZSxuKXt2YXIgdD1lLl9vcmlnaW5hbHx8ZTtyZXR1cm57X29yaWdpbmFsOmUsZW1pdDpkZWJvdW5jZSh0LmVtaXQuYmluZCh0KSxuKX19O3ZhciBkZWJvdW5jZT1mdW5jdGlvbihlLG4pe2lmKG49PT12b2lkIDApe249MH12YXIgdDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcj1bXTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXtyW2ldPWFyZ3VtZW50c1tpXX1jbGVhclRpbWVvdXQodCk7dD1zZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCxfX3NwcmVhZEFycmF5KFtlLG5dLHIsZmFsc2UpKX19O3ZhciBzaGFsbG93RXF1YWxTdHJpbmdNYXA9ZnVuY3Rpb24oZSxuKXtlIT09bnVsbCYmZSE9PXZvaWQgMD9lOmU9e307biE9PW51bGwmJm4hPT12b2lkIDA/bjpuPXt9O2lmKGU9PT1uKXtyZXR1cm4gdHJ1ZX12YXIgdD1PYmplY3Qua2V5cyhlKTtpZih0Lmxlbmd0aCE9PU9iamVjdC5rZXlzKG4pLmxlbmd0aCl7cmV0dXJuIGZhbHNlfWZvcih2YXIgcj0wLGk9dDtyPGkubGVuZ3RoO3IrKyl7dmFyIGE9aVtyXTtpZighKGEgaW4gbikpe3JldHVybiBmYWxzZX1pZihlW2FdIT09blthXSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX07ZXhwb3J0e2FkZEV2ZW50TGlzdGVuZXIgYXMgYSxyZW1vdmVFdmVudExpc3RlbmVyIGFzIGIsY29tcG9uZW50T25SZWFkeSBhcyBjLGdldEFyaWFMYWJlbCBhcyBkLHJlbmRlckhpZGRlbklucHV0IGFzIGUsZm9jdXNFbGVtZW50IGFzIGYsZ2V0RWxlbWVudFJvb3QgYXMgZyxkZWJvdW5jZUV2ZW50IGFzIGgsaW5oZXJpdEF0dHJpYnV0ZXMgYXMgaSxmaW5kSXRlbUxhYmVsIGFzIGosY2xhbXAgYXMgayxoYXNTaGFkb3dEb20gYXMgbCxhc3NlcnQgYXMgbSxpc0VuZFNpZGUgYXMgbixkZWJvdW5jZSBhcyBvLHBvaW50ZXJDb29yZCBhcyBwLG5vdyBhcyBxLHJhZiBhcyByLHNoYWxsb3dFcXVhbFN0cmluZ01hcCBhcyBzLHRyYW5zaXRpb25FbmRBc3luYyBhcyB0fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17504\n')},23876:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "GESTURE_CONTROLLER": () => (/* reexport safe */ _gesture_controller_68c023a4_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   "createGesture": () => (/* binding */ createGesture)\n/* harmony export */ });\n/* harmony import */ var _gesture_controller_68c023a4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4988);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar addEventListener=function(e,r,t,a){var n=supportsPassive(e)?{capture:!!a.capture,passive:!!a.passive}:!!a.capture;var i;var u;if(e["__zone_symbol__addEventListener"]){i="__zone_symbol__addEventListener";u="__zone_symbol__removeEventListener"}else{i="addEventListener";u="removeEventListener"}e[i](r,t,n);return function(){e[u](r,t,n)}};var supportsPassive=function(e){if(_sPassive===undefined){try{var r=Object.defineProperty({},"passive",{get:function(){_sPassive=true}});e.addEventListener("optsTest",(function(){return}),r)}catch(e){_sPassive=false}}return!!_sPassive};var _sPassive;var MOUSE_WAIT=2e3;var createPointerEvents=function(e,r,t,a,n){var i;var u;var s;var v;var f;var o;var c;var l=0;var d=function(a){l=Date.now()+MOUSE_WAIT;if(!r(a)){return}if(!u&&t){u=addEventListener(e,"touchmove",t,n)}if(!s){s=addEventListener(a.target,"touchend",p,n)}if(!v){v=addEventListener(a.target,"touchcancel",p,n)}};var m=function(a){if(l>Date.now()){return}if(!r(a)){return}if(!o&&t){o=addEventListener(getDocument(e),"mousemove",t,n)}if(!c){c=addEventListener(getDocument(e),"mouseup",E,n)}};var p=function(e){_();if(a){a(e)}};var E=function(e){g();if(a){a(e)}};var _=function(){if(u){u()}if(s){s()}if(v){v()}u=s=v=undefined};var g=function(){if(o){o()}if(c){c()}o=c=undefined};var y=function(){_();g()};var X=function(r){if(r===void 0){r=true}if(!r){if(i){i()}if(f){f()}i=f=undefined;y()}else{if(!i){i=addEventListener(e,"touchstart",d,n)}if(!f){f=addEventListener(e,"mousedown",m,n)}}};var Y=function(){X(false);a=t=r=undefined};return{enable:X,stop:y,destroy:Y}};var getDocument=function(e){return e instanceof Document?e:e.ownerDocument};var createPanRecognizer=function(e,r,t){var a=t*(Math.PI/180);var n=e==="x";var i=Math.cos(a);var u=r*r;var s=0;var v=0;var f=false;var o=0;return{start:function(e,r){s=e;v=r;o=0;f=true},detect:function(e,r){if(!f){return false}var t=e-s;var a=r-v;var c=t*t+a*a;if(c<u){return false}var l=Math.sqrt(c);var d=(n?t:a)/l;if(d>i){o=1}else if(d<-i){o=-1}else{o=0}f=false;return true},isGesture:function(){return o!==0},getDirection:function(){return o}}};var createGesture=function(e){var r=false;var t=false;var a=true;var n=false;var i=Object.assign({disableScroll:false,direction:"x",gesturePriority:0,passive:true,maxAngle:40,threshold:10},e);var u=i.canStart;var s=i.onWillStart;var v=i.onStart;var f=i.onEnd;var o=i.notCaptured;var c=i.onMove;var l=i.threshold;var d=i.passive;var m=i.blurOnStart;var p={type:"pan",startX:0,startY:0,startTime:0,currentX:0,currentY:0,velocityX:0,velocityY:0,deltaX:0,deltaY:0,currentTime:0,event:undefined,data:undefined};var E=createPanRecognizer(i.direction,i.threshold,i.maxAngle);var _=_gesture_controller_68c023a4_js__WEBPACK_IMPORTED_MODULE_0__.G.createGesture({name:e.gestureName,priority:e.gesturePriority,disableScroll:e.disableScroll});var g=function(e){var r=now(e);if(t||!a){return false}updateDetail(e,p);p.startX=p.currentX;p.startY=p.currentY;p.startTime=p.currentTime=r;p.velocityX=p.velocityY=p.deltaX=p.deltaY=0;p.event=e;if(u&&u(p)===false){return false}_.release();if(!_.start()){return false}t=true;if(l===0){return Y()}E.start(p.startX,p.startY);return true};var y=function(e){if(r){if(!n&&a){n=true;calcGestureData(p,e);requestAnimationFrame(X)}return}calcGestureData(p,e);if(E.detect(p.currentX,p.currentY)){if(!E.isGesture()||!Y()){b()}}};var X=function(){if(!r){return}n=false;if(c){c(p)}};var Y=function(){if(_&&!_.capture()){return false}r=true;a=false;p.startX=p.currentX;p.startY=p.currentY;p.startTime=p.currentTime;if(s){s(p).then(h)}else{h()}return true};var L=function(){if(typeof document!=="undefined"){var e=document.activeElement;if(e!==null&&e.blur){e.blur()}}};var h=function(){if(m){L()}if(v){v(p)}a=true};var T=function(){r=false;t=false;n=false;a=true;_.release()};var D=function(e){var t=r;var n=a;T();if(!n){return}calcGestureData(p,e);if(t){if(f){f(p)}return}if(o){o(p)}};var P=createPointerEvents(i.el,g,y,D,{capture:false,passive:d});var b=function(){T();P.stop();if(o){o(p)}};return{enable:function(e){if(e===void 0){e=true}if(!e){if(r){D(undefined)}T()}P.enable(e)},destroy:function(){_.destroy();P.destroy()}}};var calcGestureData=function(e,r){if(!r){return}var t=e.currentX;var a=e.currentY;var n=e.currentTime;updateDetail(r,e);var i=e.currentX;var u=e.currentY;var s=e.currentTime=now(r);var v=s-n;if(v>0&&v<100){var f=(i-t)/v;var o=(u-a)/v;e.velocityX=f*.7+e.velocityX*.3;e.velocityY=o*.7+e.velocityY*.3}e.deltaX=i-e.startX;e.deltaY=u-e.startY;e.event=r};var updateDetail=function(e,r){var t=0;var a=0;if(e){var n=e.changedTouches;if(n&&n.length>0){var i=n[0];t=i.clientX;a=i.clientY}else if(e.pageX!==undefined){t=e.pageX;a=e.pageY}}r.currentX=t;r.currentY=a};var now=function(e){return e.timeStamp||Date.now()};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23876\n')},82896:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "B": () => (/* binding */ Build),\n/* harmony export */   "H": () => (/* binding */ Host),\n/* harmony export */   "N": () => (/* binding */ NAMESPACE),\n/* harmony export */   "a": () => (/* binding */ setMode),\n/* harmony export */   "b": () => (/* binding */ bootstrapLazy),\n/* harmony export */   "c": () => (/* binding */ writeTask),\n/* harmony export */   "d": () => (/* binding */ doc),\n/* harmony export */   "e": () => (/* binding */ createEvent),\n/* harmony export */   "f": () => (/* binding */ readTask),\n/* harmony export */   "g": () => (/* binding */ getMode),\n/* harmony export */   "h": () => (/* binding */ h),\n/* harmony export */   "i": () => (/* binding */ getElement),\n/* harmony export */   "j": () => (/* binding */ forceUpdate),\n/* harmony export */   "k": () => (/* binding */ getAssetPath),\n/* harmony export */   "p": () => (/* binding */ promiseResolve),\n/* harmony export */   "r": () => (/* binding */ registerInstance),\n/* harmony export */   "s": () => (/* binding */ setPlatformHelpers),\n/* harmony export */   "w": () => (/* binding */ win)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70655);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var NAMESPACE="ionic";var scopeId;var contentRef;var hostTagName;var useNativeShadowDom=false;var checkSlotFallbackVisibility=false;var checkSlotRelocate=false;var isSvgMode=false;var queuePending=false;var win=typeof window!=="undefined"?window:{};var doc=win.document||{head:{}};var plt={$flags$:0,$resourcesUrl$:"",jmp:function(e){return e()},raf:function(e){return requestAnimationFrame(e)},ael:function(e,t,r,n){return e.addEventListener(t,r,n)},rel:function(e,t,r,n){return e.removeEventListener(t,r,n)},ce:function(e,t){return new CustomEvent(e,t)}};var setPlatformHelpers=function(e){Object.assign(plt,e)};var supportsShadow=true;var promiseResolve=function(e){return Promise.resolve(e)};var supportsConstructibleStylesheets=function(){try{new CSSStyleSheet;return typeof(new CSSStyleSheet).replace==="function"}catch(e){}return false}();var addHostEventListeners=function(e,t,r,n){if(r){r.map((function(r){var n=r[0],a=r[1],o=r[2];var s=getHostListenerTarget(e,n);var i=hostListenerProxy(t,o);var l=hostListenerOpts(n);plt.ael(s,a,i,l);(t.$rmListeners$=t.$rmListeners$||[]).push((function(){return plt.rel(s,a,i,l)}))}))}};var hostListenerProxy=function(e,t){return function(r){try{{if(e.$flags$&256){e.$lazyInstance$[t](r)}else{(e.$queuedListeners$=e.$queuedListeners$||[]).push([t,r])}}}catch(e){consoleError(e)}}};var getHostListenerTarget=function(e,t){if(t&4)return doc;if(t&8)return win;if(t&16)return doc.body;return e};var hostListenerOpts=function(e){return(e&2)!==0};var CONTENT_REF_ID="r";var ORG_LOCATION_ID="o";var SLOT_NODE_ID="s";var TEXT_NODE_ID="t";var HYDRATE_ID="s-id";var HYDRATED_STYLE_ID="sty-id";var HYDRATE_CHILD_ID="c-id";var HYDRATED_CSS="{visibility:hidden}.hydrated{visibility:inherit}";var XLINK_NS="http://www.w3.org/1999/xlink";var createTime=function(e,t){if(t===void 0){t=""}{return function(){return}}};var uniqueTime=function(e,t){{return function(){return}}};var rootAppliedStyles=new WeakMap;var registerStyle=function(e,t,r){var n=styles.get(e);if(supportsConstructibleStylesheets&&r){n=n||new CSSStyleSheet;n.replace(t)}else{n=t}styles.set(e,n)};var addStyle=function(e,t,r,n){var a=getScopeId(t,r);var o=styles.get(a);e=e.nodeType===11?e:doc;if(o){if(typeof o==="string"){e=e.head||e;var s=rootAppliedStyles.get(e);var i=void 0;if(!s){rootAppliedStyles.set(e,s=new Set)}if(!s.has(a)){if(e.host&&(i=e.querySelector("[".concat(HYDRATED_STYLE_ID,\'="\').concat(a,\'"]\')))){i.innerHTML=o}else{{i=doc.createElement("style");i.innerHTML=o}e.insertBefore(i,e.querySelector("link"))}if(s){s.add(a)}}}else if(!e.adoptedStyleSheets.includes(o)){e.adoptedStyleSheets=(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)((0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([],e.adoptedStyleSheets,true),[o],false)}}return a};var attachStyles=function(e){var t=e.$cmpMeta$;var r=e.$hostElement$;var n=t.$flags$;var a=createTime("attachStyles",t.$tagName$);var o=addStyle(r.shadowRoot?r.shadowRoot:r.getRootNode(),t,e.$modeName$);if(n&10){r["s-sc"]=o;r.classList.add(o+"-h");if(n&2){r.classList.add(o+"-s")}}a()};var getScopeId=function(e,t){return"sc-"+(t&&e.$flags$&32?e.$tagName$+"-"+t:e.$tagName$)};var convertScopedToShadow=function(e){return e.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g,"$1{")};var computeMode=function(e){return modeResolutionChain.map((function(t){return t(e)})).find((function(e){return!!e}))};var setMode=function(e){return modeResolutionChain.push(e)};var getMode=function(e){return getHostRef(e).$modeName$};var EMPTY_OBJ={};var SVG_NS="http://www.w3.org/2000/svg";var HTML_NS="http://www.w3.org/1999/xhtml";var isDef=function(e){return e!=null};var isComplexType=function(e){e=typeof e;return e==="object"||e==="function"};var h=function(e,t){var r=[];for(var n=2;n<arguments.length;n++){r[n-2]=arguments[n]}var a=null;var o=null;var s=null;var i=false;var l=false;var $=[];var c=function(t){for(var r=0;r<t.length;r++){a=t[r];if(Array.isArray(a)){c(a)}else if(a!=null&&typeof a!=="boolean"){if(i=typeof e!=="function"&&!isComplexType(a)){a=String(a)}if(i&&l){$[$.length-1].$text$+=a}else{$.push(i?newVNode(null,a):a)}l=i}}};c(r);if(t){if(t.key){o=t.key}if(t.name){s=t.name}{var f=t.className||t.class;if(f){t.class=typeof f!=="object"?f:Object.keys(f).filter((function(e){return f[e]})).join(" ")}}}if(typeof e==="function"){return e(t===null?{}:t,$,vdomFnUtils)}var u=newVNode(e,null);u.$attrs$=t;if($.length>0){u.$children$=$}{u.$key$=o}{u.$name$=s}return u};var newVNode=function(e,t){var r={$flags$:0,$tag$:e,$text$:t,$elm$:null,$children$:null};{r.$attrs$=null}{r.$key$=null}{r.$name$=null}return r};var Host={};var isHost=function(e){return e&&e.$tag$===Host};var vdomFnUtils={forEach:function(e,t){return e.map(convertToPublic).forEach(t)},map:function(e,t){return e.map(convertToPublic).map(t).map(convertToPrivate)}};var convertToPublic=function(e){return{vattrs:e.$attrs$,vchildren:e.$children$,vkey:e.$key$,vname:e.$name$,vtag:e.$tag$,vtext:e.$text$}};var convertToPrivate=function(e){if(typeof e.vtag==="function"){var t=Object.assign({},e.vattrs);if(e.vkey){t.key=e.vkey}if(e.vname){t.name=e.vname}return h.apply(void 0,(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([e.vtag,t],e.vchildren||[],false))}var r=newVNode(e.vtag,e.vtext);r.$attrs$=e.vattrs;r.$children$=e.vchildren;r.$key$=e.vkey;r.$name$=e.vname;return r};var setAccessor=function(e,t,r,n,a,o){if(r!==n){var s=isMemberInElement(e,t);var i=t.toLowerCase();if(t==="class"){var l=e.classList;var $=parseClassList(r);var c=parseClassList(n);l.remove.apply(l,$.filter((function(e){return e&&!c.includes(e)})));l.add.apply(l,c.filter((function(e){return e&&!$.includes(e)})))}else if(t==="style"){{for(var f in r){if(!n||n[f]==null){if(f.includes("-")){e.style.removeProperty(f)}else{e.style[f]=""}}}}for(var f in n){if(!r||n[f]!==r[f]){if(f.includes("-")){e.style.setProperty(f,n[f])}else{e.style[f]=n[f]}}}}else if(t==="key");else if(t==="ref"){if(n){n(e)}}else if(!s&&t[0]==="o"&&t[1]==="n"){if(t[2]==="-"){t=t.slice(3)}else if(isMemberInElement(win,i)){t=i.slice(2)}else{t=i[2]+t.slice(3)}if(r){plt.rel(e,t,r,false)}if(n){plt.ael(e,t,n,false)}}else{var u=isComplexType(n);if((s||u&&n!==null)&&!a){try{if(!e.tagName.includes("-")){var d=n==null?"":n;if(t==="list"){s=false}else if(r==null||e[t]!=d){e[t]=d}}else{e[t]=n}}catch(e){}}var v=false;{if(i!==(i=i.replace(/^xlink\\:?/,""))){t=i;v=true}}if(n==null||n===false){if(n!==false||e.getAttribute(t)===""){if(v){e.removeAttributeNS(XLINK_NS,t)}else{e.removeAttribute(t)}}}else if((!s||o&4||a)&&!u){n=n===true?"":n;if(v){e.setAttributeNS(XLINK_NS,t,n)}else{e.setAttribute(t,n)}}}}};var parseClassListRegex=/\\s/;var parseClassList=function(e){return!e?[]:e.split(parseClassListRegex)};var updateElement=function(e,t,r,n){var a=t.$elm$.nodeType===11&&t.$elm$.host?t.$elm$.host:t.$elm$;var o=e&&e.$attrs$||EMPTY_OBJ;var s=t.$attrs$||EMPTY_OBJ;{for(n in o){if(!(n in s)){setAccessor(a,n,o[n],undefined,r,t.$flags$)}}}for(n in s){setAccessor(a,n,o[n],s[n],r,t.$flags$)}};var createElm=function(e,t,r,n){var a=t.$children$[r];var o=0;var s;var i;var l;if(!useNativeShadowDom){checkSlotRelocate=true;if(a.$tag$==="slot"){if(scopeId){n.classList.add(scopeId+"-s")}a.$flags$|=a.$children$?2:1}}if(a.$text$!==null){s=a.$elm$=doc.createTextNode(a.$text$)}else if(a.$flags$&1){s=a.$elm$=doc.createTextNode("")}else{if(!isSvgMode){isSvgMode=a.$tag$==="svg"}s=a.$elm$=doc.createElementNS(isSvgMode?SVG_NS:HTML_NS,a.$flags$&2?"slot-fb":a.$tag$);if(isSvgMode&&a.$tag$==="foreignObject"){isSvgMode=false}{updateElement(null,a,isSvgMode)}if(isDef(scopeId)&&s["s-si"]!==scopeId){s.classList.add(s["s-si"]=scopeId)}if(a.$children$){for(o=0;o<a.$children$.length;++o){i=createElm(e,a,o,s);if(i){s.appendChild(i)}}}{if(a.$tag$==="svg"){isSvgMode=false}else if(s.tagName==="foreignObject"){isSvgMode=true}}}{s["s-hn"]=hostTagName;if(a.$flags$&(2|1)){s["s-sr"]=true;s["s-cr"]=contentRef;s["s-sn"]=a.$name$||"";l=e&&e.$children$&&e.$children$[r];if(l&&l.$tag$===a.$tag$&&e.$elm$){putBackInOriginalLocation(e.$elm$,false)}}}return s};var putBackInOriginalLocation=function(e,t){plt.$flags$|=1;var r=e.childNodes;for(var n=r.length-1;n>=0;n--){var a=r[n];if(a["s-hn"]!==hostTagName&&a["s-ol"]){parentReferenceNode(a).insertBefore(a,referenceNode(a));a["s-ol"].remove();a["s-ol"]=undefined;checkSlotRelocate=true}if(t){putBackInOriginalLocation(a,t)}}plt.$flags$&=~1};var addVnodes=function(e,t,r,n,a,o){var s=e["s-cr"]&&e["s-cr"].parentNode||e;var i;if(s.shadowRoot&&s.tagName===hostTagName){s=s.shadowRoot}for(;a<=o;++a){if(n[a]){i=createElm(null,r,a,e);if(i){n[a].$elm$=i;s.insertBefore(i,referenceNode(t))}}}};var removeVnodes=function(e,t,r,n,a){for(;t<=r;++t){if(n=e[t]){a=n.$elm$;callNodeRefs(n);{checkSlotFallbackVisibility=true;if(a["s-ol"]){a["s-ol"].remove()}else{putBackInOriginalLocation(a,true)}}a.remove()}}};var updateChildren=function(e,t,r,n){var a=0;var o=0;var s=0;var i=0;var l=t.length-1;var $=t[0];var c=t[l];var f=n.length-1;var u=n[0];var d=n[f];var v;var p;while(a<=l&&o<=f){if($==null){$=t[++a]}else if(c==null){c=t[--l]}else if(u==null){u=n[++o]}else if(d==null){d=n[--f]}else if(isSameVnode($,u)){patch($,u);$=t[++a];u=n[++o]}else if(isSameVnode(c,d)){patch(c,d);c=t[--l];d=n[--f]}else if(isSameVnode($,d)){if($.$tag$==="slot"||d.$tag$==="slot"){putBackInOriginalLocation($.$elm$.parentNode,false)}patch($,d);e.insertBefore($.$elm$,c.$elm$.nextSibling);$=t[++a];d=n[--f]}else if(isSameVnode(c,u)){if($.$tag$==="slot"||d.$tag$==="slot"){putBackInOriginalLocation(c.$elm$.parentNode,false)}patch(c,u);e.insertBefore(c.$elm$,$.$elm$);c=t[--l];u=n[++o]}else{s=-1;{for(i=a;i<=l;++i){if(t[i]&&t[i].$key$!==null&&t[i].$key$===u.$key$){s=i;break}}}if(s>=0){p=t[s];if(p.$tag$!==u.$tag$){v=createElm(t&&t[o],r,s,e)}else{patch(p,u);t[s]=undefined;v=p.$elm$}u=n[++o]}else{v=createElm(t&&t[o],r,o,e);u=n[++o]}if(v){{parentReferenceNode($.$elm$).insertBefore(v,referenceNode($.$elm$))}}}}if(a>l){addVnodes(e,n[f+1]==null?null:n[f+1].$elm$,r,n,o,f)}else if(o>f){removeVnodes(t,a,l)}};var isSameVnode=function(e,t){if(e.$tag$===t.$tag$){if(e.$tag$==="slot"){return e.$name$===t.$name$}{return e.$key$===t.$key$}}return false};var referenceNode=function(e){return e&&e["s-ol"]||e};var parentReferenceNode=function(e){return(e["s-ol"]?e["s-ol"]:e).parentNode};var patch=function(e,t){var r=t.$elm$=e.$elm$;var n=e.$children$;var a=t.$children$;var o=t.$tag$;var s=t.$text$;var i;if(s===null){{isSvgMode=o==="svg"?true:o==="foreignObject"?false:isSvgMode}{if(o==="slot");else{updateElement(e,t,isSvgMode)}}if(n!==null&&a!==null){updateChildren(r,n,t,a)}else if(a!==null){if(e.$text$!==null){r.textContent=""}addVnodes(r,null,t,a,0,a.length-1)}else if(n!==null){removeVnodes(n,0,n.length-1)}if(isSvgMode&&o==="svg"){isSvgMode=false}}else if(i=r["s-cr"]){i.parentNode.textContent=s}else if(e.$text$!==s){r.data=s}};var updateFallbackSlotVisibility=function(e){var t=e.childNodes;var r;var n;var a;var o;var s;var i;for(n=0,a=t.length;n<a;n++){r=t[n];if(r.nodeType===1){if(r["s-sr"]){s=r["s-sn"];r.hidden=false;for(o=0;o<a;o++){i=t[o].nodeType;if(t[o]["s-hn"]!==r["s-hn"]||s!==""){if(i===1&&s===t[o].getAttribute("slot")){r.hidden=true;break}}else{if(i===1||i===3&&t[o].textContent.trim()!==""){r.hidden=true;break}}}}updateFallbackSlotVisibility(r)}}};var relocateNodes=[];var relocateSlotContent=function(e){var t;var r;var n;var a;var o;var s;var i=0;var l=e.childNodes;var $=l.length;for(;i<$;i++){t=l[i];if(t["s-sr"]&&(r=t["s-cr"])&&r.parentNode){n=r.parentNode.childNodes;a=t["s-sn"];for(s=n.length-1;s>=0;s--){r=n[s];if(!r["s-cn"]&&!r["s-nr"]&&r["s-hn"]!==t["s-hn"]){if(isNodeLocatedInSlot(r,a)){o=relocateNodes.find((function(e){return e.$nodeToRelocate$===r}));checkSlotFallbackVisibility=true;r["s-sn"]=r["s-sn"]||a;if(o){o.$slotRefNode$=t}else{relocateNodes.push({$slotRefNode$:t,$nodeToRelocate$:r})}if(r["s-sr"]){relocateNodes.map((function(e){if(isNodeLocatedInSlot(e.$nodeToRelocate$,r["s-sn"])){o=relocateNodes.find((function(e){return e.$nodeToRelocate$===r}));if(o&&!e.$slotRefNode$){e.$slotRefNode$=o.$slotRefNode$}}}))}}else if(!relocateNodes.some((function(e){return e.$nodeToRelocate$===r}))){relocateNodes.push({$nodeToRelocate$:r})}}}}if(t.nodeType===1){relocateSlotContent(t)}}};var isNodeLocatedInSlot=function(e,t){if(e.nodeType===1){if(e.getAttribute("slot")===null&&t===""){return true}if(e.getAttribute("slot")===t){return true}return false}if(e["s-sn"]===t){return true}return t===""};var callNodeRefs=function(e){{e.$attrs$&&e.$attrs$.ref&&e.$attrs$.ref(null);e.$children$&&e.$children$.map(callNodeRefs)}};var renderVdom=function(e,t){var r=e.$hostElement$;var n=e.$cmpMeta$;var a=e.$vnode$||newVNode(null,null);var o=isHost(t)?t:h(null,null,t);hostTagName=r.tagName;if(n.$attrsToReflect$){o.$attrs$=o.$attrs$||{};n.$attrsToReflect$.map((function(e){var t=e[0],n=e[1];return o.$attrs$[n]=r[t]}))}o.$tag$=null;o.$flags$|=4;e.$vnode$=o;o.$elm$=a.$elm$=r.shadowRoot||r;{scopeId=r["s-sc"]}{contentRef=r["s-cr"];useNativeShadowDom=(n.$flags$&1)!==0;checkSlotFallbackVisibility=false}patch(a,o);{plt.$flags$|=1;if(checkSlotRelocate){relocateSlotContent(o.$elm$);var s=void 0;var i=void 0;var l=void 0;var $=void 0;var c=void 0;var f=void 0;var u=0;for(;u<relocateNodes.length;u++){s=relocateNodes[u];i=s.$nodeToRelocate$;if(!i["s-ol"]){l=doc.createTextNode("");l["s-nr"]=i;i.parentNode.insertBefore(i["s-ol"]=l,i)}}for(u=0;u<relocateNodes.length;u++){s=relocateNodes[u];i=s.$nodeToRelocate$;if(s.$slotRefNode$){$=s.$slotRefNode$.parentNode;c=s.$slotRefNode$.nextSibling;l=i["s-ol"];while(l=l.previousSibling){f=l["s-nr"];if(f&&f["s-sn"]===i["s-sn"]&&$===f.parentNode){f=f.nextSibling;if(!f||!f["s-nr"]){c=f;break}}}if(!c&&$!==i.parentNode||i.nextSibling!==c){if(i!==c){if(!i["s-hn"]&&i["s-ol"]){i["s-hn"]=i["s-ol"].parentNode.nodeName}$.insertBefore(i,c)}}}else{if(i.nodeType===1){i.hidden=true}}}}if(checkSlotFallbackVisibility){updateFallbackSlotVisibility(o.$elm$)}plt.$flags$&=~1;relocateNodes.length=0}};var getElement=function(e){return getHostRef(e).$hostElement$};var createEvent=function(e,t,r){var n=getElement(e);return{emit:function(e){return emitEvent(n,t,{bubbles:!!(r&4),composed:!!(r&2),cancelable:!!(r&1),detail:e})}}};var emitEvent=function(e,t,r){var n=plt.ce(t,r);e.dispatchEvent(n);return n};var attachToAncestor=function(e,t){if(t&&!e.$onRenderResolve$&&t["s-p"]){t["s-p"].push(new Promise((function(t){return e.$onRenderResolve$=t})))}};var scheduleUpdate=function(e,t){{e.$flags$|=16}if(e.$flags$&4){e.$flags$|=512;return}attachToAncestor(e,e.$ancestorComponent$);var r=function(){return dispatchHooks(e,t)};return writeTask(r)};var dispatchHooks=function(e,t){var r=createTime("scheduleUpdate",e.$cmpMeta$.$tagName$);var n=e.$lazyInstance$;var a;if(t){{e.$flags$|=256;if(e.$queuedListeners$){e.$queuedListeners$.map((function(e){var t=e[0],r=e[1];return safeCall(n,t,r)}));e.$queuedListeners$=null}}{a=safeCall(n,"componentWillLoad")}}{a=then(a,(function(){return safeCall(n,"componentWillRender")}))}r();return then(a,(function(){return updateComponent(e,n,t)}))};var updateComponent=function(e,t,r){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,a,o,s,i,l;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__generator */ .Jh)(this,(function($){n=e.$hostElement$;a=createTime("update",e.$cmpMeta$.$tagName$);o=n["s-rc"];if(r){attachStyles(e)}s=createTime("render",e.$cmpMeta$.$tagName$);{callRender(e,t)}if(o){o.map((function(e){return e()}));n["s-rc"]=undefined}s();a();{i=n["s-p"];l=function(){return postUpdateComponent(e)};if(i.length===0){l()}else{Promise.all(i).then(l);e.$flags$|=4;i.length=0}}return[2]}))}))};var callRender=function(e,t,r){try{t=t.render&&t.render();{e.$flags$&=~16}{e.$flags$|=2}{{{renderVdom(e,t)}}}}catch(t){consoleError(t,e.$hostElement$)}return null};var postUpdateComponent=function(e){var t=e.$cmpMeta$.$tagName$;var r=e.$hostElement$;var n=createTime("postUpdate",t);var a=e.$lazyInstance$;var o=e.$ancestorComponent$;{safeCall(a,"componentDidRender")}if(!(e.$flags$&64)){e.$flags$|=64;{addHydratedFlag(r)}{safeCall(a,"componentDidLoad")}n();{e.$onReadyResolve$(r);if(!o){appDidLoad()}}}else{{safeCall(a,"componentDidUpdate")}n()}{e.$onInstanceResolve$(r)}{if(e.$onRenderResolve$){e.$onRenderResolve$();e.$onRenderResolve$=undefined}if(e.$flags$&512){nextTick((function(){return scheduleUpdate(e,false)}))}e.$flags$&=~(4|512)}};var forceUpdate=function(e){{var t=getHostRef(e);var r=t.$hostElement$.isConnected;if(r&&(t.$flags$&(2|16))===2){scheduleUpdate(t,false)}return r}};var appDidLoad=function(e){{addHydratedFlag(doc.documentElement)}nextTick((function(){return emitEvent(win,"appload",{detail:{namespace:NAMESPACE}})}))};var safeCall=function(e,t,r){if(e&&e[t]){try{return e[t](r)}catch(e){consoleError(e)}}return undefined};var then=function(e,t){return e&&e.then?e.then(t):t()};var addHydratedFlag=function(e){return e.classList.add("hydrated")};var initializeClientHydrate=function(e,t,r,n){var a=createTime("hydrateClient",t);var o=e.shadowRoot;var s=[];var i=[];var l=o?[]:null;var $=n.$vnode$=newVNode(t,null);if(!plt.$orgLocNodes$){initializeDocumentHydrate(doc.body,plt.$orgLocNodes$=new Map)}e[HYDRATE_ID]=r;e.removeAttribute(HYDRATE_ID);clientHydrate($,s,i,l,e,e,r);s.map((function(e){var r=e.$hostId$+"."+e.$nodeId$;var n=plt.$orgLocNodes$.get(r);var a=e.$elm$;if(n&&supportsShadow&&n["s-en"]===""){n.parentNode.insertBefore(a,n.nextSibling)}if(!o){a["s-hn"]=t;if(n){a["s-ol"]=n;a["s-ol"]["s-nr"]=a}}plt.$orgLocNodes$.delete(r)}));if(o){l.map((function(e){if(e){o.appendChild(e)}}))}a()};var clientHydrate=function(e,t,r,n,a,o,s){var i;var l;var $;var c;if(o.nodeType===1){i=o.getAttribute(HYDRATE_CHILD_ID);if(i){l=i.split(".");if(l[0]===s||l[0]==="0"){$={$flags$:0,$hostId$:l[0],$nodeId$:l[1],$depth$:l[2],$index$:l[3],$tag$:o.tagName.toLowerCase(),$elm$:o,$attrs$:null,$children$:null,$key$:null,$name$:null,$text$:null};t.push($);o.removeAttribute(HYDRATE_CHILD_ID);if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$;e=$;if(n&&$.$depth$==="0"){n[$.$index$]=$.$elm$}}}for(c=o.childNodes.length-1;c>=0;c--){clientHydrate(e,t,r,n,a,o.childNodes[c],s)}if(o.shadowRoot){for(c=o.shadowRoot.childNodes.length-1;c>=0;c--){clientHydrate(e,t,r,n,a,o.shadowRoot.childNodes[c],s)}}}else if(o.nodeType===8){l=o.nodeValue.split(".");if(l[1]===s||l[1]==="0"){i=l[0];$={$flags$:0,$hostId$:l[1],$nodeId$:l[2],$depth$:l[3],$index$:l[4],$elm$:o,$attrs$:null,$children$:null,$key$:null,$name$:null,$tag$:null,$text$:null};if(i===TEXT_NODE_ID){$.$elm$=o.nextSibling;if($.$elm$&&$.$elm$.nodeType===3){$.$text$=$.$elm$.textContent;t.push($);o.remove();if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$;if(n&&$.$depth$==="0"){n[$.$index$]=$.$elm$}}}else if($.$hostId$===s){if(i===SLOT_NODE_ID){$.$tag$="slot";if(l[5]){o["s-sn"]=$.$name$=l[5]}else{o["s-sn"]=""}o["s-sr"]=true;if(n){$.$elm$=doc.createElement($.$tag$);if($.$name$){$.$elm$.setAttribute("name",$.$name$)}o.parentNode.insertBefore($.$elm$,o);o.remove();if($.$depth$==="0"){n[$.$index$]=$.$elm$}}r.push($);if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$}else if(i===CONTENT_REF_ID){if(n){o.remove()}else{a["s-cr"]=o;o["s-cn"]=true}}}}}else if(e&&e.$tag$==="style"){var f=newVNode(null,o.textContent);f.$elm$=o;f.$index$="0";e.$children$=[f]}};var initializeDocumentHydrate=function(e,t){if(e.nodeType===1){var r=0;for(;r<e.childNodes.length;r++){initializeDocumentHydrate(e.childNodes[r],t)}if(e.shadowRoot){for(r=0;r<e.shadowRoot.childNodes.length;r++){initializeDocumentHydrate(e.shadowRoot.childNodes[r],t)}}}else if(e.nodeType===8){var n=e.nodeValue.split(".");if(n[0]===ORG_LOCATION_ID){t.set(n[1]+"."+n[2],e);e.nodeValue="";e["s-en"]=n[3]}}};var parsePropertyValue=function(e,t){if(e!=null&&!isComplexType(e)){if(t&4){return e==="false"?false:e===""||!!e}if(t&2){return parseFloat(e)}if(t&1){return String(e)}return e}return e};var getValue=function(e,t){return getHostRef(e).$instanceValues$.get(t)};var setValue=function(e,t,r,n){var a=getHostRef(e);var o=a.$hostElement$;var s=a.$instanceValues$.get(t);var i=a.$flags$;var l=a.$lazyInstance$;r=parsePropertyValue(r,n.$members$[t][0]);var $=Number.isNaN(s)&&Number.isNaN(r);var c=r!==s&&!$;if((!(i&8)||s===undefined)&&c){a.$instanceValues$.set(t,r);if(l){if(n.$watchers$&&i&128){var f=n.$watchers$[t];if(f){f.map((function(e){try{l[e](r,s,t)}catch(e){consoleError(e,o)}}))}}if((i&(2|16))===2){scheduleUpdate(a,false)}}}};var proxyComponent=function(e,t,r){if(t.$members$){if(e.watchers){t.$watchers$=e.watchers}var n=Object.entries(t.$members$);var a=e.prototype;n.map((function(e){var n=e[0],o=e[1][0];if(o&31||r&2&&o&32){Object.defineProperty(a,n,{get:function(){return getValue(this,n)},set:function(e){setValue(this,n,e,t)},configurable:true,enumerable:true})}else if(r&1&&o&64){Object.defineProperty(a,n,{value:function(){var e=[];for(var t=0;t<arguments.length;t++){e[t]=arguments[t]}var r=getHostRef(this);return r.$onInstancePromise$.then((function(){var t;return(t=r.$lazyInstance$)[n].apply(t,e)}))}})}}));if(r&1){var o=new Map;a.attributeChangedCallback=function(e,t,r){var n=this;plt.jmp((function(){var t=o.get(e);if(n.hasOwnProperty(t)){r=n[t];delete n[t]}else if(a.hasOwnProperty(t)&&typeof n[t]==="number"&&n[t]==r){return}n[t]=r===null&&typeof n[t]==="boolean"?false:r}))};e.observedAttributes=n.filter((function(e){var t=e[0],r=e[1];return r[0]&15})).map((function(e){var r=e[0],n=e[1];var a=n[1]||r;o.set(a,r);if(n[0]&512){t.$attrsToReflect$.push([r,a])}return a}))}}return e};var initializeComponent=function(e,t,r,n,a){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,o,s,i,l,$,c;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__generator */ .Jh)(this,(function(f){switch(f.label){case 0:if(!((t.$flags$&32)===0))return[3,3];t.$flags$|=32;a=loadModule(r);if(!a.then)return[3,2];n=uniqueTime();return[4,a];case 1:a=f.sent();n();f.label=2;case 2:if(!a.isProxied){{r.$watchers$=a.watchers}proxyComponent(a,r,2);a.isProxied=true}o=createTime("createInstance",r.$tagName$);{t.$flags$|=8}try{new a(t)}catch(e){consoleError(e)}{t.$flags$&=~8}{t.$flags$|=128}o();fireConnectedCallback(t.$lazyInstance$);if(a.style){s=a.style;if(typeof s!=="string"){s=s[t.$modeName$=computeMode(e)]}i=getScopeId(r,t.$modeName$);if(!styles.has(i)){l=createTime("registerStyles",r.$tagName$);registerStyle(i,s,!!(r.$flags$&1));l()}}f.label=3;case 3:$=t.$ancestorComponent$;c=function(){return scheduleUpdate(t,true)};if($&&$["s-rc"]){$["s-rc"].push(c)}else{c()}return[2]}}))}))};var fireConnectedCallback=function(e){{safeCall(e,"connectedCallback")}};var connectedCallback=function(e){if((plt.$flags$&1)===0){var t=getHostRef(e);var r=t.$cmpMeta$;var n=createTime("connectedCallback",r.$tagName$);if(!(t.$flags$&1)){t.$flags$|=1;var a=void 0;{a=e.getAttribute(HYDRATE_ID);if(a){if(r.$flags$&1){var o=addStyle(e.shadowRoot,r,e.getAttribute("s-mode"));e.classList.remove(o+"-h",o+"-s")}initializeClientHydrate(e,r.$tagName$,a,t)}}if(!a){if(r.$flags$&(4|8)){setContentReference(e)}}{var s=e;while(s=s.parentNode||s.host){if(s.nodeType===1&&s.hasAttribute("s-id")&&s["s-p"]||s["s-p"]){attachToAncestor(t,t.$ancestorComponent$=s);break}}}if(r.$members$){Object.entries(r.$members$).map((function(t){var r=t[0],n=t[1][0];if(n&31&&e.hasOwnProperty(r)){var a=e[r];delete e[r];e[r]=a}}))}{nextTick((function(){return initializeComponent(e,t,r)}))}}else{addHostEventListeners(e,t,r.$listeners$);fireConnectedCallback(t.$lazyInstance$)}n()}};var setContentReference=function(e){var t=e["s-cr"]=doc.createComment("");t["s-cn"]=true;e.insertBefore(t,e.firstChild)};var disconnectedCallback=function(e){if((plt.$flags$&1)===0){var t=getHostRef(e);var r=t.$lazyInstance$;{if(t.$rmListeners$){t.$rmListeners$.map((function(e){return e()}));t.$rmListeners$=undefined}}{safeCall(r,"disconnectedCallback")}}};var bootstrapLazy=function(e,t){if(t===void 0){t={}}var r=createTime();var n=[];var a=t.exclude||[];var o=win.customElements;var s=doc.head;var i=s.querySelector("meta[charset]");var l=doc.createElement("style");var $=[];var c=doc.querySelectorAll("[".concat(HYDRATED_STYLE_ID,"]"));var f;var u=true;var d=0;Object.assign(plt,t);plt.$resourcesUrl$=new URL(t.resourcesUrl||"./",doc.baseURI).href;{plt.$flags$|=2}{for(;d<c.length;d++){registerStyle(c[d].getAttribute(HYDRATED_STYLE_ID),convertScopedToShadow(c[d].innerHTML),true)}}e.map((function(e){e[1].map((function(t){var r={$flags$:t[0],$tagName$:t[1],$members$:t[2],$listeners$:t[3]};{r.$members$=t[2]}{r.$listeners$=t[3]}{r.$attrsToReflect$=[]}{r.$watchers$={}}var s=r.$tagName$;var i=function(e){(0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(t,e);function t(t){var n=e.call(this,t)||this;t=n;registerHost(t,r);if(r.$flags$&1){{{t.attachShadow({mode:"open",delegatesFocus:!!(r.$flags$&16)})}}}return n}t.prototype.connectedCallback=function(){var e=this;if(f){clearTimeout(f);f=null}if(u){$.push(this)}else{plt.jmp((function(){return connectedCallback(e)}))}};t.prototype.disconnectedCallback=function(){var e=this;plt.jmp((function(){return disconnectedCallback(e)}))};t.prototype.componentOnReady=function(){return getHostRef(this).$onReadyPromise$};return t}(HTMLElement);r.$lazyBundleId$=e[0];if(!a.includes(s)&&!o.get(s)){n.push(s);o.define(s,proxyComponent(i,r,1))}}))}));{l.innerHTML=n+HYDRATED_CSS;l.setAttribute("data-styles","");s.insertBefore(l,i?i.nextSibling:s.firstChild)}u=false;if($.length){$.map((function(e){return e.connectedCallback()}))}else{{plt.jmp((function(){return f=setTimeout(appDidLoad,30)}))}}r()};var getAssetPath=function(e){var t=new URL(e,plt.$resourcesUrl$);return t.origin!==win.location.origin?t.href:t.pathname};var hostRefs=new WeakMap;var getHostRef=function(e){return hostRefs.get(e)};var registerInstance=function(e,t){return hostRefs.set(t.$lazyInstance$=e,t)};var registerHost=function(e,t){var r={$flags$:0,$hostElement$:e,$cmpMeta$:t,$instanceValues$:new Map};{r.$onInstancePromise$=new Promise((function(e){return r.$onInstanceResolve$=e}))}{r.$onReadyPromise$=new Promise((function(e){return r.$onReadyResolve$=e}));e["s-p"]=[];e["s-rc"]=[]}addHostEventListeners(e,r,t.$listeners$);return hostRefs.set(e,r)};var isMemberInElement=function(e,t){return t in e};var consoleError=function(e,t){return(0,console.error)(e,t)};var cmpModules=new Map;var loadModule=function(e,t,r){var n=e.$tagName$.replace(/-/g,"_");var a=e.$lazyBundleId$;var o=cmpModules.get(a);if(o){return o[n]}return __webpack_require__(73076)("./".concat(a,".entry.js").concat("")).then((function(e){{cmpModules.set(a,e)}return e[n]}),consoleError)};var styles=new Map;var modeResolutionChain=[];var queueDomReads=[];var queueDomWrites=[];var queueTask=function(e,t){return function(r){e.push(r);if(!queuePending){queuePending=true;if(t&&plt.$flags$&4){nextTick(flush)}else{plt.raf(flush)}}}};var consume=function(e){for(var t=0;t<e.length;t++){try{e[t](performance.now())}catch(e){consoleError(e)}}e.length=0};var flush=function(){consume(queueDomReads);{consume(queueDomWrites);if(queuePending=queueDomReads.length>0){plt.raf(flush)}}};var nextTick=function(e){return promiseResolve().then(e)};var readTask=queueTask(queueDomReads,false);var writeTask=queueTask(queueDomWrites,true);var Build={isDev:false,isBrowser:true,isServer:false,isTesting:false};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82896\n')},48186:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "I": () => (/* binding */ IonicSafeString),\n/* harmony export */   "s": () => (/* binding */ sanitizeDOMString)\n/* harmony export */ });\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar sanitizeDOMString=function(e){try{if(e instanceof IonicSafeString){return e.value}if(!isSanitizerEnabled()||typeof e!=="string"||e===""){return e}var r=document.createDocumentFragment();var n=document.createElement("div");r.appendChild(n);n.innerHTML=e;blockedTags.forEach((function(e){var n=r.querySelectorAll(e);for(var t=n.length-1;t>=0;t--){var i=n[t];if(i.parentNode){i.parentNode.removeChild(i)}else{r.removeChild(i)}var a=getElementChildren(i);for(var l=0;l<a.length;l++){sanitizeElement(a[l])}}}));var t=getElementChildren(r);for(var i=0;i<t.length;i++){sanitizeElement(t[i])}var a=document.createElement("div");a.appendChild(r);var l=a.querySelector("div");return l!==null?l.innerHTML:a.innerHTML}catch(e){console.error(e);return""}};var sanitizeElement=function(e){if(e.nodeType&&e.nodeType!==1){return}for(var r=e.attributes.length-1;r>=0;r--){var n=e.attributes.item(r);var t=n.name;if(!allowedAttributes.includes(t.toLowerCase())){e.removeAttribute(t);continue}var i=n.value;if(i!=null&&i.toLowerCase().includes("javascript:")){e.removeAttribute(t)}}var a=getElementChildren(e);for(var r=0;r<a.length;r++){sanitizeElement(a[r])}};var getElementChildren=function(e){return e.children!=null?e.children:e.childNodes};var isSanitizerEnabled=function(){var e=window;var r=e&&e.Ionic&&e.Ionic.config;if(r){if(r.get){return r.get("sanitizerEnabled",true)}else{return r.sanitizerEnabled===true||r.sanitizerEnabled===undefined}}return true};var allowedAttributes=["class","id","href","src","name","slot"];var blockedTags=["script","style","iframe","meta","link","object","embed"];var IonicSafeString=function(){function e(e){this.value=e}return e}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgxODYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsSUFBSSxpQ0FBaUMsZUFBZSx1REFBdUQsU0FBUyx3Q0FBd0Msb0NBQW9DLGlCQUFpQixjQUFjLGlDQUFpQyw0QkFBNEIscUJBQXFCLEtBQUssS0FBSyxXQUFXLGlCQUFpQiw0QkFBNEIsS0FBSyxpQkFBaUIsNEJBQTRCLFlBQVksV0FBVyxLQUFLLHdCQUF3QixHQUFHLDRCQUE0QixZQUFZLFdBQVcsS0FBSyxzQkFBc0Isb0NBQW9DLGlCQUFpQiw2QkFBNkIsd0NBQXdDLFNBQVMsaUJBQWlCLFdBQVcsZ0NBQWdDLCtCQUErQixPQUFPLGdDQUFnQyxLQUFLLEtBQUssMkJBQTJCLGFBQWEsaURBQWlELHFCQUFxQixTQUFTLGNBQWMscURBQXFELHNCQUFzQiw0QkFBNEIsWUFBWSxXQUFXLEtBQUssd0JBQXdCLG1DQUFtQyxpREFBaUQsa0NBQWtDLGFBQWEsaUNBQWlDLE1BQU0sVUFBVSxzQ0FBc0MsS0FBSyxrRUFBa0UsYUFBYSxnRUFBZ0UsMkVBQTJFLCtCQUErQixjQUFjLGFBQWEsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LWM4NDFjOTMzLmpzPzFiZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBzYW5pdGl6ZURPTVN0cmluZz1mdW5jdGlvbihlKXt0cnl7aWYoZSBpbnN0YW5jZW9mIElvbmljU2FmZVN0cmluZyl7cmV0dXJuIGUudmFsdWV9aWYoIWlzU2FuaXRpemVyRW5hYmxlZCgpfHx0eXBlb2YgZSE9PVwic3RyaW5nXCJ8fGU9PT1cIlwiKXtyZXR1cm4gZX12YXIgcj1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyLmFwcGVuZENoaWxkKG4pO24uaW5uZXJIVE1MPWU7YmxvY2tlZFRhZ3MuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ci5xdWVyeVNlbGVjdG9yQWxsKGUpO2Zvcih2YXIgdD1uLmxlbmd0aC0xO3Q+PTA7dC0tKXt2YXIgaT1uW3RdO2lmKGkucGFyZW50Tm9kZSl7aS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGkpfWVsc2V7ci5yZW1vdmVDaGlsZChpKX12YXIgYT1nZXRFbGVtZW50Q2hpbGRyZW4oaSk7Zm9yKHZhciBsPTA7bDxhLmxlbmd0aDtsKyspe3Nhbml0aXplRWxlbWVudChhW2xdKX19fSkpO3ZhciB0PWdldEVsZW1lbnRDaGlsZHJlbihyKTtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7c2FuaXRpemVFbGVtZW50KHRbaV0pfXZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5hcHBlbmRDaGlsZChyKTt2YXIgbD1hLnF1ZXJ5U2VsZWN0b3IoXCJkaXZcIik7cmV0dXJuIGwhPT1udWxsP2wuaW5uZXJIVE1MOmEuaW5uZXJIVE1MfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoZSk7cmV0dXJuXCJcIn19O3ZhciBzYW5pdGl6ZUVsZW1lbnQ9ZnVuY3Rpb24oZSl7aWYoZS5ub2RlVHlwZSYmZS5ub2RlVHlwZSE9PTEpe3JldHVybn1mb3IodmFyIHI9ZS5hdHRyaWJ1dGVzLmxlbmd0aC0xO3I+PTA7ci0tKXt2YXIgbj1lLmF0dHJpYnV0ZXMuaXRlbShyKTt2YXIgdD1uLm5hbWU7aWYoIWFsbG93ZWRBdHRyaWJ1dGVzLmluY2x1ZGVzKHQudG9Mb3dlckNhc2UoKSkpe2UucmVtb3ZlQXR0cmlidXRlKHQpO2NvbnRpbnVlfXZhciBpPW4udmFsdWU7aWYoaSE9bnVsbCYmaS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiamF2YXNjcmlwdDpcIikpe2UucmVtb3ZlQXR0cmlidXRlKHQpfX12YXIgYT1nZXRFbGVtZW50Q2hpbGRyZW4oZSk7Zm9yKHZhciByPTA7cjxhLmxlbmd0aDtyKyspe3Nhbml0aXplRWxlbWVudChhW3JdKX19O3ZhciBnZXRFbGVtZW50Q2hpbGRyZW49ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hpbGRyZW4hPW51bGw/ZS5jaGlsZHJlbjplLmNoaWxkTm9kZXN9O3ZhciBpc1Nhbml0aXplckVuYWJsZWQ9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3c7dmFyIHI9ZSYmZS5Jb25pYyYmZS5Jb25pYy5jb25maWc7aWYocil7aWYoci5nZXQpe3JldHVybiByLmdldChcInNhbml0aXplckVuYWJsZWRcIix0cnVlKX1lbHNle3JldHVybiByLnNhbml0aXplckVuYWJsZWQ9PT10cnVlfHxyLnNhbml0aXplckVuYWJsZWQ9PT11bmRlZmluZWR9fXJldHVybiB0cnVlfTt2YXIgYWxsb3dlZEF0dHJpYnV0ZXM9W1wiY2xhc3NcIixcImlkXCIsXCJocmVmXCIsXCJzcmNcIixcIm5hbWVcIixcInNsb3RcIl07dmFyIGJsb2NrZWRUYWdzPVtcInNjcmlwdFwiLFwic3R5bGVcIixcImlmcmFtZVwiLFwibWV0YVwiLFwibGlua1wiLFwib2JqZWN0XCIsXCJlbWJlZFwiXTt2YXIgSW9uaWNTYWZlU3RyaW5nPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLnZhbHVlPWV9cmV0dXJuIGV9KCk7ZXhwb3J0e0lvbmljU2FmZVN0cmluZyBhcyBJLHNhbml0aXplRE9NU3RyaW5nIGFzIHN9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///48186\n')},90114:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "m": () => (/* binding */ menuController)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(70655);\n/* harmony import */ var _hardware_back_button_ace6a71b_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47292);\n/* harmony import */ var _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17504);\n/* harmony import */ var _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75001);\n/* harmony import */ var _animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27434);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var baseAnimation=function(n){return (0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)().duration(n?400:300)};var menuOverlayAnimation=function(n){var e;var r;var t=n.width+8;var i=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)();var a=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)();if(n.isEndSide){e=t+"px";r="0px"}else{e=-t+"px";r="0px"}i.addElement(n.menuInnerEl).fromTo("transform","translateX(".concat(e,")"),"translateX(".concat(r,")"));var o=(0,_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.b)(n);var u=o==="ios";var s=u?.2:.25;a.addElement(n.backdropEl).fromTo("opacity",.01,s);return baseAnimation(u).addAnimation([i,a])};var menuPushAnimation=function(n){var e;var r;var t=(0,_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.b)(n);var i=n.width;if(n.isEndSide){e=-i+"px";r=i+"px"}else{e=i+"px";r=-i+"px"}var a=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)().addElement(n.menuInnerEl).fromTo("transform","translateX(".concat(r,")"),"translateX(0px)");var o=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)().addElement(n.contentEl).fromTo("transform","translateX(0px)","translateX(".concat(e,")"));var u=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)().addElement(n.backdropEl).fromTo("opacity",.01,.32);return baseAnimation(t==="ios").addAnimation([a,o,u])};var menuRevealAnimation=function(n){var e=(0,_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.b)(n);var r=n.width*(n.isEndSide?-1:1)+"px";var t=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_1__.c)().addElement(n.contentEl).fromTo("transform","translateX(0px)","translateX(".concat(r,")"));return baseAnimation(e==="ios").addAnimation(t)};var createMenuController=function(){var n=new Map;var e=[];var r=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,e.open()]}return[2,false]}}))}))};var t=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:return[4,n!==undefined?c(n):f()];case 1:e=r.sent();if(e!==undefined){return[2,e.close()]}return[2,false]}}))}))};var i=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,e.toggle()]}return[2,false]}}))}))};var a=function(n,e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var r;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(t){switch(t.label){case 0:return[4,c(e)];case 1:r=t.sent();if(r){r.disabled=!n}return[2,r]}}))}))};var o=function(n,e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var r;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(t){switch(t.label){case 0:return[4,c(e)];case 1:r=t.sent();if(r){r.swipeGesture=n}return[2,r]}}))}))};var u=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var e,e;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:if(!(n!=null))return[3,2];return[4,c(n)];case 1:e=r.sent();return[2,e!==undefined&&e.isOpen()];case 2:return[4,f()];case 3:e=r.sent();return[2,e!==undefined]}}))}))};var s=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,!e.disabled]}return[2,false]}}))}))};var c=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var r,t;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(i){switch(i.label){case 0:return[4,O()];case 1:i.sent();if(n==="start"||n==="end"){r=E((function(e){return e.side===n&&!e.disabled}));if(r){return[2,r]}return[2,E((function(e){return e.side===n}))]}else if(n!=null){return[2,E((function(e){return e.menuId===n}))]}t=E((function(n){return!n.disabled}));if(t){return[2,t]}return[2,e.length>0?e[0].el:undefined]}}))}))};var f=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,g()]}}))}))};var d=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,w()]}}))}))};var v=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,A()]}}))}))};var l=function(e,r){n.set(e,r)};var m=function(n){if(e.indexOf(n)<0){if(!n.disabled){p(n)}e.push(n)}};var _=function(n){var r=e.indexOf(n);if(r>-1){e.splice(r,1)}};var p=function(n){var r=n.side;e.filter((function(e){return e.side===r&&e!==n})).forEach((function(n){return n.disabled=true}))};var b=function(n,e,r){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var t;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__generator */ .Jh)(this,(function(i){switch(i.label){case 0:if(A()){return[2,false]}if(!e)return[3,3];return[4,f()];case 1:t=i.sent();if(!(t&&n.el!==t))return[3,3];return[4,t.setOpen(false,false)];case 2:i.sent();i.label=3;case 3:return[2,n._setOpen(e,r)]}}))}))};var h=function(e,r){var t=n.get(e);if(!t){throw new Error("animation not registered")}var i=t(r);return i};var g=function(){return E((function(n){return n._isOpen}))};var w=function(){return e.map((function(n){return n.el}))};var A=function(){return e.some((function(n){return n.isAnimating}))};var E=function(n){var r=e.find(n);if(r!==undefined){return r.el}return undefined};var O=function(){return Promise.all(Array.from(document.querySelectorAll("ion-menu")).map((function(n){return new Promise((function(e){return (0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_3__.c)(n,e)}))})))};l("reveal",menuRevealAnimation);l("push",menuPushAnimation);l("overlay",menuOverlayAnimation);if(typeof document!=="undefined"){document.addEventListener("ionBackButton",(function(n){var e=g();if(e){n.detail.register(_hardware_back_button_ace6a71b_js__WEBPACK_IMPORTED_MODULE_4__.MENU_BACK_BUTTON_PRIORITY,(function(){return e.close()}))}}))}return{registerAnimation:l,get:c,getMenus:d,getOpen:f,isEnabled:s,swipeGesture:o,isAnimating:v,isOpen:u,enable:a,toggle:i,close:t,open:r,_getOpenSync:g,_createAnimation:h,_register:m,_unregister:_,_setOpen:b,_setActiveMenu:p}};var menuController=createMenuController();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90114\n')},92032:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "L": () => (/* binding */ LIFECYCLE_WILL_ENTER),\n/* harmony export */   "a": () => (/* binding */ LIFECYCLE_DID_ENTER),\n/* harmony export */   "b": () => (/* binding */ LIFECYCLE_WILL_LEAVE),\n/* harmony export */   "c": () => (/* binding */ LIFECYCLE_DID_LEAVE),\n/* harmony export */   "d": () => (/* binding */ LIFECYCLE_WILL_UNLOAD),\n/* harmony export */   "e": () => (/* binding */ deepReady),\n/* harmony export */   "g": () => (/* binding */ getIonPageElement),\n/* harmony export */   "l": () => (/* binding */ lifecycle),\n/* harmony export */   "s": () => (/* binding */ setPageHidden),\n/* harmony export */   "t": () => (/* binding */ transition)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(70655);\n/* harmony import */ var _index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82896);\n/* harmony import */ var _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17504);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var LIFECYCLE_WILL_ENTER="ionViewWillEnter";var LIFECYCLE_DID_ENTER="ionViewDidEnter";var LIFECYCLE_WILL_LEAVE="ionViewWillLeave";var LIFECYCLE_DID_LEAVE="ionViewDidLeave";var LIFECYCLE_WILL_UNLOAD="ionViewWillUnload";var iosTransitionAnimation=function(){return Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 48360))};var mdTransitionAnimation=function(){return Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 92782))};var transition=function(e){return new Promise((function(n,i){(0,_index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__.c)((function(){beforeTransition(e);runTransition(e).then((function(i){if(i.animation){i.animation.destroy()}afterTransition(e);n(i)}),(function(n){afterTransition(e);i(n)}))}))}))};var beforeTransition=function(e){var n=e.enteringEl;var i=e.leavingEl;setZIndex(n,i,e.direction);if(e.showGoBack){n.classList.add("can-go-back")}else{n.classList.remove("can-go-back")}setPageHidden(n,false);n.style.setProperty("pointer-events","none");if(i){setPageHidden(i,false);i.style.setProperty("pointer-events","none")}};var runTransition=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:return[4,getAnimationBuilder(e)];case 1:n=r.sent();i=n&&_index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__.B.isBrowser?animation(n,e):noAnimation(e);return[2,i]}}))}))};var afterTransition=function(e){var n=e.enteringEl;var i=e.leavingEl;n.classList.remove("ion-page-invisible");n.style.removeProperty("pointer-events");if(i!==undefined){i.classList.remove("ion-page-invisible");i.style.removeProperty("pointer-events")}};var getAnimationBuilder=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:if(!e.leavingEl||!e.animated||e.duration===0){return[2,undefined]}if(e.animationBuilder){return[2,e.animationBuilder]}if(!(e.mode==="ios"))return[3,2];return[4,iosTransitionAnimation()];case 1:i=r.sent().iosTransitionAnimation;return[3,4];case 2:return[4,mdTransitionAnimation()];case 3:i=r.sent().mdTransitionAnimation;r.label=4;case 4:n=i;return[2,n]}}))}))};var animation=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var i,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(t){switch(t.label){case 0:return[4,waitForReady(n,true)];case 1:t.sent();i=e(n.baseEl,n);fireWillEvents(n.enteringEl,n.leavingEl);return[4,playTransition(i,n)];case 2:r=t.sent();if(n.progressCallback){n.progressCallback(undefined)}if(r){fireDidEvents(n.enteringEl,n.leavingEl)}return[2,{hasCompleted:r,animation:i}]}}))}))};var noAnimation=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:n=e.enteringEl;i=e.leavingEl;return[4,waitForReady(e,false)];case 1:r.sent();fireWillEvents(n,i);fireDidEvents(n,i);return[2,{hasCompleted:true}]}}))}))};var waitForReady=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var i,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(t){switch(t.label){case 0:i=e.deepWait!==undefined?e.deepWait:n;r=i?[deepReady(e.enteringEl),deepReady(e.leavingEl)]:[shallowReady(e.enteringEl),shallowReady(e.leavingEl)];return[4,Promise.all(r)];case 1:t.sent();return[4,notifyViewReady(e.viewIsReady,e.enteringEl)];case 2:t.sent();return[2]}}))}))};var notifyViewReady=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(i){switch(i.label){case 0:if(!e)return[3,2];return[4,e(n)];case 1:i.sent();i.label=2;case 2:return[2]}}))}))};var playTransition=function(e,n){var i=n.progressCallback;var r=new Promise((function(n){e.onFinish((function(e){return n(e===1)}))}));if(i){e.progressStart(true);i(e)}else{e.play()}return r};var fireWillEvents=function(e,n){lifecycle(n,LIFECYCLE_WILL_LEAVE);lifecycle(e,LIFECYCLE_WILL_ENTER)};var fireDidEvents=function(e,n){lifecycle(e,LIFECYCLE_DID_ENTER);lifecycle(n,LIFECYCLE_DID_LEAVE)};var lifecycle=function(e,n){if(e){var i=new CustomEvent(n,{bubbles:false,cancelable:false});e.dispatchEvent(i)}};var shallowReady=function(e){if(e){return new Promise((function(n){return (0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.c)(e,n)}))}return Promise.resolve()};var deepReady=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var n,i,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(t){switch(t.label){case 0:n=e;if(!n)return[3,6];if(!(n.componentOnReady!=null))return[3,2];return[4,n.componentOnReady()];case 1:i=t.sent();if(i!=null){return[2]}return[3,4];case 2:if(!(n.__registerHost!=null))return[3,4];r=new Promise((function(e){return (0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.r)(e)}));return[4,r];case 3:t.sent();return[2];case 4:return[4,Promise.all(Array.from(n.children).map(deepReady))];case 5:t.sent();t.label=6;case 6:return[2]}}))}))};var setPageHidden=function(e,n){if(n){e.setAttribute("aria-hidden","true");e.classList.add("ion-page-hidden")}else{e.hidden=false;e.removeAttribute("aria-hidden");e.classList.remove("ion-page-hidden")}};var setZIndex=function(e,n,i){if(e!==undefined){e.style.zIndex=i==="back"?"99":"101"}if(n!==undefined){n.style.zIndex="100"}};var getIonPageElement=function(e){if(e.classList.contains("ion-page")){return e}var n=e.querySelector(":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs");if(n){return n}return e};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIwMzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUN6QztBQUNBO0FBQ0EsR0FBZ0ksNENBQTRDLDBDQUEwQyw0Q0FBNEMsMENBQTBDLDhDQUE4QyxzQ0FBc0MsT0FBTywwRkFBc0MsRUFBRSxxQ0FBcUMsT0FBTywwRkFBcUMsRUFBRSwyQkFBMkIsa0NBQWtDLHFEQUFTLGFBQWEsb0JBQW9CLG1DQUFtQyxnQkFBZ0Isc0JBQXNCLG1CQUFtQixLQUFLLGVBQWUsbUJBQW1CLEtBQUssR0FBRyxHQUFHLElBQUksaUNBQWlDLG1CQUFtQixrQkFBa0IsMkJBQTJCLGlCQUFpQiwrQkFBK0IsS0FBSyxrQ0FBa0MsdUJBQXVCLDZDQUE2QyxNQUFNLHVCQUF1QiwrQ0FBK0MsOEJBQThCLE9BQU8sMERBQVMsa0NBQWtDLFFBQVEsT0FBTyw0REFBVyxtQkFBbUIsZ0JBQWdCLHdDQUF3QyxrQkFBa0IsS0FBSywyREFBZSwrQkFBK0IsYUFBYSxHQUFHLElBQUksZ0NBQWdDLG1CQUFtQixrQkFBa0IseUNBQXlDLHlDQUF5QyxrQkFBa0IseUNBQXlDLDJDQUEyQyxvQ0FBb0MsT0FBTywwREFBUyxrQ0FBa0MsUUFBUSxPQUFPLDREQUFXLG1CQUFtQixnQkFBZ0IscURBQXFELG9CQUFvQix1QkFBdUIsNkJBQTZCLGlDQUFpQyxtQ0FBbUMseUNBQXlDLFlBQVkseUNBQXlDLHdDQUF3QyxVQUFVLFdBQVcsYUFBYSxHQUFHLElBQUksNEJBQTRCLE9BQU8sMERBQVMsa0NBQWtDLFFBQVEsT0FBTyw0REFBVyxtQkFBbUIsZ0JBQWdCLHNDQUFzQyxnQkFBZ0IsZ0JBQWdCLHlDQUF5Qyw4QkFBOEIsa0JBQWtCLHVCQUF1Qiw4QkFBOEIsTUFBTSx3Q0FBd0MsVUFBVSwyQkFBMkIsR0FBRyxHQUFHLElBQUksNEJBQTRCLE9BQU8sMERBQVMsa0NBQWtDLFFBQVEsT0FBTyw0REFBVyxtQkFBbUIsZ0JBQWdCLHNCQUFzQixjQUFjLGdDQUFnQyxnQkFBZ0Isb0JBQW9CLG1CQUFtQixVQUFVLGtCQUFrQixHQUFHLEdBQUcsSUFBSSwrQkFBK0IsT0FBTywwREFBUyxrQ0FBa0MsUUFBUSxPQUFPLDREQUFXLG1CQUFtQixnQkFBZ0IsNkNBQTZDLDRHQUE0Ryx5QkFBeUIsZ0JBQWdCLHNEQUFzRCxnQkFBZ0IsV0FBVyxHQUFHLElBQUksa0NBQWtDLE9BQU8sMERBQVMsa0NBQWtDLE9BQU8sNERBQVcsbUJBQW1CLGdCQUFnQix5QkFBeUIsZUFBZSxnQkFBZ0IsVUFBVSxrQkFBa0IsR0FBRyxJQUFJLGlDQUFpQyx5QkFBeUIsK0JBQStCLHdCQUF3QixnQkFBZ0IsR0FBRyxHQUFHLE1BQU0sc0JBQXNCLEtBQUssS0FBSyxTQUFTLFVBQVUsaUNBQWlDLGtDQUFrQyxtQ0FBbUMsZ0NBQWdDLGlDQUFpQyxrQ0FBa0MsNEJBQTRCLE1BQU0seUJBQXlCLCtCQUErQixFQUFFLHFCQUFxQiw2QkFBNkIsTUFBTSxnQ0FBZ0MsT0FBTyx1REFBZ0IsTUFBTSxHQUFHLDBCQUEwQiwwQkFBMEIsT0FBTywwREFBUyxrQ0FBa0MsVUFBVSxPQUFPLDREQUFXLG1CQUFtQixnQkFBZ0IsV0FBVyxrQkFBa0IsMkNBQTJDLCtCQUErQixrQkFBa0IsWUFBWSxVQUFVLFlBQVksZ0RBQWdELDJCQUEyQixPQUFPLHVEQUFHLElBQUksR0FBRyxZQUFZLGdCQUFnQixVQUFVLG9FQUFvRSxnQkFBZ0IsVUFBVSxrQkFBa0IsR0FBRyxJQUFJLGdDQUFnQyxNQUFNLHFDQUFxQyxtQ0FBbUMsS0FBSyxlQUFlLGlDQUFpQyx3Q0FBd0MsOEJBQThCLGtCQUFrQixxQ0FBcUMsa0JBQWtCLHVCQUF1QixrQ0FBa0MscUNBQXFDLFNBQVMsaUZBQWlGLE1BQU0sU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LWU2YzJjODIyLmpzP2RhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e19fYXdhaXRlcixfX2dlbmVyYXRvcn1mcm9tXCJ0c2xpYlwiO1xuLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9pbXBvcnR7YyBhcyB3cml0ZVRhc2ssQiBhcyBCdWlsZH1mcm9tXCIuL2luZGV4LWIzZWVjYjE0LmpzXCI7aW1wb3J0e2MgYXMgY29tcG9uZW50T25SZWFkeSxyIGFzIHJhZn1mcm9tXCIuL2hlbHBlcnMtNmUxZTViNjUuanNcIjt2YXIgTElGRUNZQ0xFX1dJTExfRU5URVI9XCJpb25WaWV3V2lsbEVudGVyXCI7dmFyIExJRkVDWUNMRV9ESURfRU5URVI9XCJpb25WaWV3RGlkRW50ZXJcIjt2YXIgTElGRUNZQ0xFX1dJTExfTEVBVkU9XCJpb25WaWV3V2lsbExlYXZlXCI7dmFyIExJRkVDWUNMRV9ESURfTEVBVkU9XCJpb25WaWV3RGlkTGVhdmVcIjt2YXIgTElGRUNZQ0xFX1dJTExfVU5MT0FEPVwiaW9uVmlld1dpbGxVbmxvYWRcIjt2YXIgaW9zVHJhbnNpdGlvbkFuaW1hdGlvbj1mdW5jdGlvbigpe3JldHVybiBpbXBvcnQoXCIuL2lvcy50cmFuc2l0aW9uLThiNmE3NzZhLmpzXCIpfTt2YXIgbWRUcmFuc2l0aW9uQW5pbWF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGltcG9ydChcIi4vbWQudHJhbnNpdGlvbi1kYTg2NjExOS5qc1wiKX07dmFyIHRyYW5zaXRpb249ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLGkpe3dyaXRlVGFzaygoZnVuY3Rpb24oKXtiZWZvcmVUcmFuc2l0aW9uKGUpO3J1blRyYW5zaXRpb24oZSkudGhlbigoZnVuY3Rpb24oaSl7aWYoaS5hbmltYXRpb24pe2kuYW5pbWF0aW9uLmRlc3Ryb3koKX1hZnRlclRyYW5zaXRpb24oZSk7bihpKX0pLChmdW5jdGlvbihuKXthZnRlclRyYW5zaXRpb24oZSk7aShuKX0pKX0pKX0pKX07dmFyIGJlZm9yZVRyYW5zaXRpb249ZnVuY3Rpb24oZSl7dmFyIG49ZS5lbnRlcmluZ0VsO3ZhciBpPWUubGVhdmluZ0VsO3NldFpJbmRleChuLGksZS5kaXJlY3Rpb24pO2lmKGUuc2hvd0dvQmFjayl7bi5jbGFzc0xpc3QuYWRkKFwiY2FuLWdvLWJhY2tcIil9ZWxzZXtuLmNsYXNzTGlzdC5yZW1vdmUoXCJjYW4tZ28tYmFja1wiKX1zZXRQYWdlSGlkZGVuKG4sZmFsc2UpO24uc3R5bGUuc2V0UHJvcGVydHkoXCJwb2ludGVyLWV2ZW50c1wiLFwibm9uZVwiKTtpZihpKXtzZXRQYWdlSGlkZGVuKGksZmFsc2UpO2kuc3R5bGUuc2V0UHJvcGVydHkoXCJwb2ludGVyLWV2ZW50c1wiLFwibm9uZVwiKX19O3ZhciBydW5UcmFuc2l0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiBfX2F3YWl0ZXIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4saTtyZXR1cm4gX19nZW5lcmF0b3IodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxnZXRBbmltYXRpb25CdWlsZGVyKGUpXTtjYXNlIDE6bj1yLnNlbnQoKTtpPW4mJkJ1aWxkLmlzQnJvd3Nlcj9hbmltYXRpb24obixlKTpub0FuaW1hdGlvbihlKTtyZXR1cm5bMixpXX19KSl9KSl9O3ZhciBhZnRlclRyYW5zaXRpb249ZnVuY3Rpb24oZSl7dmFyIG49ZS5lbnRlcmluZ0VsO3ZhciBpPWUubGVhdmluZ0VsO24uY2xhc3NMaXN0LnJlbW92ZShcImlvbi1wYWdlLWludmlzaWJsZVwiKTtuLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwicG9pbnRlci1ldmVudHNcIik7aWYoaSE9PXVuZGVmaW5lZCl7aS5jbGFzc0xpc3QucmVtb3ZlKFwiaW9uLXBhZ2UtaW52aXNpYmxlXCIpO2kuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJwb2ludGVyLWV2ZW50c1wiKX19O3ZhciBnZXRBbmltYXRpb25CdWlsZGVyPWZ1bmN0aW9uKGUpe3JldHVybiBfX2F3YWl0ZXIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4saTtyZXR1cm4gX19nZW5lcmF0b3IodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZighZS5sZWF2aW5nRWx8fCFlLmFuaW1hdGVkfHxlLmR1cmF0aW9uPT09MCl7cmV0dXJuWzIsdW5kZWZpbmVkXX1pZihlLmFuaW1hdGlvbkJ1aWxkZXIpe3JldHVyblsyLGUuYW5pbWF0aW9uQnVpbGRlcl19aWYoIShlLm1vZGU9PT1cImlvc1wiKSlyZXR1cm5bMywyXTtyZXR1cm5bNCxpb3NUcmFuc2l0aW9uQW5pbWF0aW9uKCldO2Nhc2UgMTppPXIuc2VudCgpLmlvc1RyYW5zaXRpb25BbmltYXRpb247cmV0dXJuWzMsNF07Y2FzZSAyOnJldHVybls0LG1kVHJhbnNpdGlvbkFuaW1hdGlvbigpXTtjYXNlIDM6aT1yLnNlbnQoKS5tZFRyYW5zaXRpb25BbmltYXRpb247ci5sYWJlbD00O2Nhc2UgNDpuPWk7cmV0dXJuWzIsbl19fSkpfSkpfTt2YXIgYW5pbWF0aW9uPWZ1bmN0aW9uKGUsbil7cmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgaSxyO3JldHVybiBfX2dlbmVyYXRvcih0aGlzLChmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHdhaXRGb3JSZWFkeShuLHRydWUpXTtjYXNlIDE6dC5zZW50KCk7aT1lKG4uYmFzZUVsLG4pO2ZpcmVXaWxsRXZlbnRzKG4uZW50ZXJpbmdFbCxuLmxlYXZpbmdFbCk7cmV0dXJuWzQscGxheVRyYW5zaXRpb24oaSxuKV07Y2FzZSAyOnI9dC5zZW50KCk7aWYobi5wcm9ncmVzc0NhbGxiYWNrKXtuLnByb2dyZXNzQ2FsbGJhY2sodW5kZWZpbmVkKX1pZihyKXtmaXJlRGlkRXZlbnRzKG4uZW50ZXJpbmdFbCxuLmxlYXZpbmdFbCl9cmV0dXJuWzIse2hhc0NvbXBsZXRlZDpyLGFuaW1hdGlvbjppfV19fSkpfSkpfTt2YXIgbm9BbmltYXRpb249ZnVuY3Rpb24oZSl7cmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbixpO3JldHVybiBfX2dlbmVyYXRvcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOm49ZS5lbnRlcmluZ0VsO2k9ZS5sZWF2aW5nRWw7cmV0dXJuWzQsd2FpdEZvclJlYWR5KGUsZmFsc2UpXTtjYXNlIDE6ci5zZW50KCk7ZmlyZVdpbGxFdmVudHMobixpKTtmaXJlRGlkRXZlbnRzKG4saSk7cmV0dXJuWzIse2hhc0NvbXBsZXRlZDp0cnVlfV19fSkpfSkpfTt2YXIgd2FpdEZvclJlYWR5PWZ1bmN0aW9uKGUsbil7cmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgaSxyO3JldHVybiBfX2dlbmVyYXRvcih0aGlzLChmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOmk9ZS5kZWVwV2FpdCE9PXVuZGVmaW5lZD9lLmRlZXBXYWl0Om47cj1pP1tkZWVwUmVhZHkoZS5lbnRlcmluZ0VsKSxkZWVwUmVhZHkoZS5sZWF2aW5nRWwpXTpbc2hhbGxvd1JlYWR5KGUuZW50ZXJpbmdFbCksc2hhbGxvd1JlYWR5KGUubGVhdmluZ0VsKV07cmV0dXJuWzQsUHJvbWlzZS5hbGwocildO2Nhc2UgMTp0LnNlbnQoKTtyZXR1cm5bNCxub3RpZnlWaWV3UmVhZHkoZS52aWV3SXNSZWFkeSxlLmVudGVyaW5nRWwpXTtjYXNlIDI6dC5zZW50KCk7cmV0dXJuWzJdfX0pKX0pKX07dmFyIG5vdGlmeVZpZXdSZWFkeT1mdW5jdGlvbihlLG4pe3JldHVybiBfX2F3YWl0ZXIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsKGZ1bmN0aW9uKGkpe3N3aXRjaChpLmxhYmVsKXtjYXNlIDA6aWYoIWUpcmV0dXJuWzMsMl07cmV0dXJuWzQsZShuKV07Y2FzZSAxOmkuc2VudCgpO2kubGFiZWw9MjtjYXNlIDI6cmV0dXJuWzJdfX0pKX0pKX07dmFyIHBsYXlUcmFuc2l0aW9uPWZ1bmN0aW9uKGUsbil7dmFyIGk9bi5wcm9ncmVzc0NhbGxiYWNrO3ZhciByPW5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtlLm9uRmluaXNoKChmdW5jdGlvbihlKXtyZXR1cm4gbihlPT09MSl9KSl9KSk7aWYoaSl7ZS5wcm9ncmVzc1N0YXJ0KHRydWUpO2koZSl9ZWxzZXtlLnBsYXkoKX1yZXR1cm4gcn07dmFyIGZpcmVXaWxsRXZlbnRzPWZ1bmN0aW9uKGUsbil7bGlmZWN5Y2xlKG4sTElGRUNZQ0xFX1dJTExfTEVBVkUpO2xpZmVjeWNsZShlLExJRkVDWUNMRV9XSUxMX0VOVEVSKX07dmFyIGZpcmVEaWRFdmVudHM9ZnVuY3Rpb24oZSxuKXtsaWZlY3ljbGUoZSxMSUZFQ1lDTEVfRElEX0VOVEVSKTtsaWZlY3ljbGUobixMSUZFQ1lDTEVfRElEX0xFQVZFKX07dmFyIGxpZmVjeWNsZT1mdW5jdGlvbihlLG4pe2lmKGUpe3ZhciBpPW5ldyBDdXN0b21FdmVudChuLHtidWJibGVzOmZhbHNlLGNhbmNlbGFibGU6ZmFsc2V9KTtlLmRpc3BhdGNoRXZlbnQoaSl9fTt2YXIgc2hhbGxvd1JlYWR5PWZ1bmN0aW9uKGUpe2lmKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7cmV0dXJuIGNvbXBvbmVudE9uUmVhZHkoZSxuKX0pKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9O3ZhciBkZWVwUmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbixpLHI7cmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6bj1lO2lmKCFuKXJldHVyblszLDZdO2lmKCEobi5jb21wb25lbnRPblJlYWR5IT1udWxsKSlyZXR1cm5bMywyXTtyZXR1cm5bNCxuLmNvbXBvbmVudE9uUmVhZHkoKV07Y2FzZSAxOmk9dC5zZW50KCk7aWYoaSE9bnVsbCl7cmV0dXJuWzJdfXJldHVyblszLDRdO2Nhc2UgMjppZighKG4uX19yZWdpc3Rlckhvc3QhPW51bGwpKXJldHVyblszLDRdO3I9bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3JldHVybiByYWYoZSl9KSk7cmV0dXJuWzQscl07Y2FzZSAzOnQuc2VudCgpO3JldHVyblsyXTtjYXNlIDQ6cmV0dXJuWzQsUHJvbWlzZS5hbGwoQXJyYXkuZnJvbShuLmNoaWxkcmVuKS5tYXAoZGVlcFJlYWR5KSldO2Nhc2UgNTp0LnNlbnQoKTt0LmxhYmVsPTY7Y2FzZSA2OnJldHVyblsyXX19KSl9KSl9O3ZhciBzZXRQYWdlSGlkZGVuPWZ1bmN0aW9uKGUsbil7aWYobil7ZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKTtlLmNsYXNzTGlzdC5hZGQoXCJpb24tcGFnZS1oaWRkZW5cIil9ZWxzZXtlLmhpZGRlbj1mYWxzZTtlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO2UuY2xhc3NMaXN0LnJlbW92ZShcImlvbi1wYWdlLWhpZGRlblwiKX19O3ZhciBzZXRaSW5kZXg9ZnVuY3Rpb24oZSxuLGkpe2lmKGUhPT11bmRlZmluZWQpe2Uuc3R5bGUuekluZGV4PWk9PT1cImJhY2tcIj9cIjk5XCI6XCIxMDFcIn1pZihuIT09dW5kZWZpbmVkKXtuLnN0eWxlLnpJbmRleD1cIjEwMFwifX07dmFyIGdldElvblBhZ2VFbGVtZW50PWZ1bmN0aW9uKGUpe2lmKGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaW9uLXBhZ2VcIikpe3JldHVybiBlfXZhciBuPWUucXVlcnlTZWxlY3RvcihcIjpzY29wZSA+IC5pb24tcGFnZSwgOnNjb3BlID4gaW9uLW5hdiwgOnNjb3BlID4gaW9uLXRhYnNcIik7aWYobil7cmV0dXJuIG59cmV0dXJuIGV9O2V4cG9ydHtMSUZFQ1lDTEVfV0lMTF9FTlRFUiBhcyBMLExJRkVDWUNMRV9ESURfRU5URVIgYXMgYSxMSUZFQ1lDTEVfV0lMTF9MRUFWRSBhcyBiLExJRkVDWUNMRV9ESURfTEVBVkUgYXMgYyxMSUZFQ1lDTEVfV0lMTF9VTkxPQUQgYXMgZCxkZWVwUmVhZHkgYXMgZSxnZXRJb25QYWdlRWxlbWVudCBhcyBnLGxpZmVjeWNsZSBhcyBsLHNldFBhZ2VIaWRkZW4gYXMgcyx0cmFuc2l0aW9uIGFzIHR9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///92032\n')},53774:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "createAnimation": () => (/* reexport safe */ _animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   "iosTransitionAnimation": () => (/* reexport safe */ _ios_transition_8b6a776a_js__WEBPACK_IMPORTED_MODULE_1__.iosTransitionAnimation),\n/* harmony export */   "mdTransitionAnimation": () => (/* reexport safe */ _md_transition_da866119_js__WEBPACK_IMPORTED_MODULE_2__.mdTransitionAnimation),\n/* harmony export */   "getTimeGivenProgression": () => (/* reexport safe */ _cubic_bezier_154a53a5_js__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   "createGesture": () => (/* reexport safe */ _index_41bf41f2_js__WEBPACK_IMPORTED_MODULE_4__.createGesture),\n/* harmony export */   "getPlatforms": () => (/* reexport safe */ _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_5__.g),\n/* harmony export */   "initialize": () => (/* reexport safe */ _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_5__.i),\n/* harmony export */   "isPlatform": () => (/* reexport safe */ _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_5__.a),\n/* harmony export */   "componentOnReady": () => (/* reexport safe */ _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.c),\n/* harmony export */   "IonicSafeString": () => (/* reexport safe */ _index_c841c933_js__WEBPACK_IMPORTED_MODULE_7__.I),\n/* harmony export */   "LIFECYCLE_DID_ENTER": () => (/* reexport safe */ _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__.a),\n/* harmony export */   "LIFECYCLE_DID_LEAVE": () => (/* reexport safe */ _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__.c),\n/* harmony export */   "LIFECYCLE_WILL_ENTER": () => (/* reexport safe */ _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__.L),\n/* harmony export */   "LIFECYCLE_WILL_LEAVE": () => (/* reexport safe */ _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__.b),\n/* harmony export */   "LIFECYCLE_WILL_UNLOAD": () => (/* reexport safe */ _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__.d),\n/* harmony export */   "menuController": () => (/* reexport safe */ _index_cdb1cf94_js__WEBPACK_IMPORTED_MODULE_9__.m),\n/* harmony export */   "actionSheetController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.b),\n/* harmony export */   "alertController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.a),\n/* harmony export */   "loadingController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.l),\n/* harmony export */   "modalController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.m),\n/* harmony export */   "pickerController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.p),\n/* harmony export */   "popoverController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.c),\n/* harmony export */   "toastController": () => (/* reexport safe */ _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__.t),\n/* harmony export */   "IonicSlides": () => (/* binding */ IonicSlides),\n/* harmony export */   "IonicSwiper": () => (/* binding */ IonicSwiper),\n/* harmony export */   "getMode": () => (/* binding */ getMode),\n/* harmony export */   "setupConfig": () => (/* binding */ setupConfig)\n/* harmony export */ });\n/* harmony import */ var _animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27434);\n/* harmony import */ var _ios_transition_8b6a776a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48360);\n/* harmony import */ var _md_transition_da866119_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92782);\n/* harmony import */ var _cubic_bezier_154a53a5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(93544);\n/* harmony import */ var _index_41bf41f2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23876);\n/* harmony import */ var _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(75001);\n/* harmony import */ var _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(17504);\n/* harmony import */ var _index_c841c933_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48186);\n/* harmony import */ var _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(92032);\n/* harmony import */ var _index_cdb1cf94_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(90114);\n/* harmony import */ var _overlays_36d3475d_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46250);\n/* harmony import */ var _gesture_controller_68c023a4_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4988);\n/* harmony import */ var _index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82896);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar setupConfig=function(e){var i=window;var o=i.Ionic;if(o&&o.config&&o.config.constructor.name!=="Object"){return}i.Ionic=i.Ionic||{};i.Ionic.config=Object.assign(Object.assign({},i.Ionic.config),e);return i.Ionic.config};var getMode=function(){var e=window;var i=e&&e.Ionic&&e.Ionic.config;if(i){if(i.mode){return i.mode}else{return i.get("mode")}}return"md"};var setupSwiperInIonic=function(e,i){if(i===void 0){i=true}if(typeof window==="undefined"){return}var o=e.el;var t=o.closest(".ion-page");if(!t){if(i){var r=o.getRootNode();if(r.tagName==="DIV"){var a=new MutationObserver((function(i){var o=i[0];var t=o.oldValue===null;var s=r.classList.contains("ion-page");if(t&&s){a.disconnect();setupSwiperInIonic(e,false)}}));a.observe(r,{attributeFilter:["class"],attributeOldValue:true})}}return}var s=o.closest("ion-modal, ion-popover");if(s){var n=s.tagName==="ION-MODAL"?"ionModalWillPresent":"ionPopoverWillPresent";var l=function(){(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.r)((function(){o.swiper.update();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.b)(s,n,l)}))};(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.a)(s,n,l)}else{var c=new MutationObserver((function(e){var i;var r=e[0];var a=(i=r.oldValue)===null||i===void 0?void 0:i.includes("ion-page-invisible");var s=t.classList.contains("ion-page-invisible");if(!s&&s!==a){o.swiper.update()}}));c.observe(t,{attributeFilter:["class"],attributeOldValue:true})}var d=function(){o.swiper.update();(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.b)(window,"appload",d)};(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_6__.a)(window,"appload",d)};var IonicSwiper={name:"ionic",on:{afterInit:function(e){console.warn("[Deprecation Warning]: The IonicSwiper module has been deprecated in favor of the IonSlides module. This change was made to better support the Swiper 7 release. The IonicSwiper module will be removed in Ionic 7.0. See https://ionicframework.com/docs/api/slides#migration for revised migration steps.");setupSwiperInIonic(e)}}};var IonicSlides=function(e){var i=e.swiper,o=e.extendParams;var t={effect:undefined,direction:"horizontal",initialSlide:0,loop:false,parallax:false,slidesPerView:1,spaceBetween:0,speed:300,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,slidesOffsetAfter:0,touchEventsTarget:"container",autoplay:false,freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:false,freeModeMinimumVelocity:.02,autoHeight:false,setWrapperSize:false,zoom:{maxRatio:3,minRatio:1,toggle:false},touchRatio:1,touchAngle:45,simulateTouch:true,touchStartPreventDefault:false,shortSwipes:true,longSwipes:true,longSwipesRatio:.5,longSwipesMs:300,followFinger:true,threshold:0,touchMoveStopPropagation:true,touchReleaseOnEdges:false,iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20,resistance:true,resistanceRatio:.85,watchSlidesProgress:false,watchSlidesVisibility:false,preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false,loopAdditionalSlides:0,noSwiping:true,runCallbacksOnInit:true,coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},flipEffect:{slideShadows:true,limitRotation:true},cubeEffect:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:.94},fadeEffect:{crossFade:false},a11y:{prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide"}};if(i.pagination){t.pagination={type:"bullets",clickable:false,hideOnClick:false}}if(i.scrollbar){t.scrollbar={hide:true}}o(t)};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM3NzQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMybEMsNEJBQTRCLGFBQWEsY0FBYyxzREFBc0QsT0FBTyxvQkFBb0IsNkNBQTZDLG9CQUFvQix1QkFBdUIsdUJBQXVCLGFBQWEsaUNBQWlDLE1BQU0sV0FBVyxjQUFjLEtBQUssc0JBQXNCLFlBQVkscUNBQXFDLGVBQWUsT0FBTyxnQ0FBZ0MsT0FBTyxXQUFXLDZCQUE2QixPQUFPLE1BQU0sc0JBQXNCLHNCQUFzQix3Q0FBd0MsV0FBVyx3QkFBd0IsdUNBQXVDLFNBQVMsZUFBZSw2QkFBNkIsR0FBRyxhQUFhLGlEQUFpRCxHQUFHLE9BQU8sMENBQTBDLE1BQU0sNEVBQTRFLGlCQUFpQix1REFBRyxhQUFhLGtCQUFrQix1REFBbUIsUUFBUSxJQUFJLHVEQUFnQixRQUFRLEtBQUssd0NBQXdDLE1BQU0sV0FBVyxnRkFBZ0YsaURBQWlELGNBQWMsbUJBQW1CLEdBQUcsYUFBYSxpREFBaUQsRUFBRSxpQkFBaUIsa0JBQWtCLHVEQUFtQixzQkFBc0IsdURBQWdCLHNCQUFzQixpQkFBaUIsaUJBQWlCLHNCQUFzQiw0VEFBNFQseUJBQXlCLDRCQUE0QixnQ0FBZ0MsT0FBTyx5aEJBQXloQixtQ0FBbUMsa2hCQUFraEIsMkRBQTJELGFBQWEscUNBQXFDLGFBQWEsOERBQThELGFBQWEsZ0JBQWdCLE9BQU8sd0pBQXdKLGlCQUFpQixjQUFjLGtEQUFrRCxnQkFBZ0IsYUFBYSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGVudC1taXMtbW9iaWxlLWFwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS1lczUvaW5kZXguanM/NjI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuZXhwb3J0e2MgYXMgY3JlYXRlQW5pbWF0aW9ufWZyb21cIi4vYW5pbWF0aW9uLTE5ZGJmOWJmLmpzXCI7ZXhwb3J0e2lvc1RyYW5zaXRpb25BbmltYXRpb259ZnJvbVwiLi9pb3MudHJhbnNpdGlvbi04YjZhNzc2YS5qc1wiO2V4cG9ydHttZFRyYW5zaXRpb25BbmltYXRpb259ZnJvbVwiLi9tZC50cmFuc2l0aW9uLWRhODY2MTE5LmpzXCI7ZXhwb3J0e2cgYXMgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb259ZnJvbVwiLi9jdWJpYy1iZXppZXItMTU0YTUzYTUuanNcIjtleHBvcnR7Y3JlYXRlR2VzdHVyZX1mcm9tXCIuL2luZGV4LTQxYmY0MWYyLmpzXCI7ZXhwb3J0e2cgYXMgZ2V0UGxhdGZvcm1zLGkgYXMgaW5pdGlhbGl6ZSxhIGFzIGlzUGxhdGZvcm19ZnJvbVwiLi9pb25pYy1nbG9iYWwtMGViZTMyMWMuanNcIjtpbXBvcnR7YSBhcyBhZGRFdmVudExpc3RlbmVyLHIgYXMgcmFmLGIgYXMgcmVtb3ZlRXZlbnRMaXN0ZW5lcn1mcm9tXCIuL2hlbHBlcnMtNmUxZTViNjUuanNcIjtleHBvcnR7YyBhcyBjb21wb25lbnRPblJlYWR5fWZyb21cIi4vaGVscGVycy02ZTFlNWI2NS5qc1wiO2V4cG9ydHtJIGFzIElvbmljU2FmZVN0cmluZ31mcm9tXCIuL2luZGV4LWM4NDFjOTMzLmpzXCI7ZXhwb3J0e2EgYXMgTElGRUNZQ0xFX0RJRF9FTlRFUixjIGFzIExJRkVDWUNMRV9ESURfTEVBVkUsTCBhcyBMSUZFQ1lDTEVfV0lMTF9FTlRFUixiIGFzIExJRkVDWUNMRV9XSUxMX0xFQVZFLGQgYXMgTElGRUNZQ0xFX1dJTExfVU5MT0FEfWZyb21cIi4vaW5kZXgtZTZjMmM4MjIuanNcIjtleHBvcnR7bSBhcyBtZW51Q29udHJvbGxlcn1mcm9tXCIuL2luZGV4LWNkYjFjZjk0LmpzXCI7ZXhwb3J0e2IgYXMgYWN0aW9uU2hlZXRDb250cm9sbGVyLGEgYXMgYWxlcnRDb250cm9sbGVyLGwgYXMgbG9hZGluZ0NvbnRyb2xsZXIsbSBhcyBtb2RhbENvbnRyb2xsZXIscCBhcyBwaWNrZXJDb250cm9sbGVyLGMgYXMgcG9wb3ZlckNvbnRyb2xsZXIsdCBhcyB0b2FzdENvbnRyb2xsZXJ9ZnJvbVwiLi9vdmVybGF5cy0zNmQzNDc1ZC5qc1wiO2ltcG9ydFwiLi9nZXN0dXJlLWNvbnRyb2xsZXItNjhjMDIzYTQuanNcIjtpbXBvcnRcIi4vaW5kZXgtYjNlZWNiMTQuanNcIjtpbXBvcnRcIi4vaGFyZHdhcmUtYmFjay1idXR0b24tYWNlNmE3MWIuanNcIjt2YXIgc2V0dXBDb25maWc9ZnVuY3Rpb24oZSl7dmFyIGk9d2luZG93O3ZhciBvPWkuSW9uaWM7aWYobyYmby5jb25maWcmJm8uY29uZmlnLmNvbnN0cnVjdG9yLm5hbWUhPT1cIk9iamVjdFwiKXtyZXR1cm59aS5Jb25pYz1pLklvbmljfHx7fTtpLklvbmljLmNvbmZpZz1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30saS5Jb25pYy5jb25maWcpLGUpO3JldHVybiBpLklvbmljLmNvbmZpZ307dmFyIGdldE1vZGU9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3c7dmFyIGk9ZSYmZS5Jb25pYyYmZS5Jb25pYy5jb25maWc7aWYoaSl7aWYoaS5tb2RlKXtyZXR1cm4gaS5tb2RlfWVsc2V7cmV0dXJuIGkuZ2V0KFwibW9kZVwiKX19cmV0dXJuXCJtZFwifTt2YXIgc2V0dXBTd2lwZXJJbklvbmljPWZ1bmN0aW9uKGUsaSl7aWYoaT09PXZvaWQgMCl7aT10cnVlfWlmKHR5cGVvZiB3aW5kb3c9PT1cInVuZGVmaW5lZFwiKXtyZXR1cm59dmFyIG89ZS5lbDt2YXIgdD1vLmNsb3Nlc3QoXCIuaW9uLXBhZ2VcIik7aWYoIXQpe2lmKGkpe3ZhciByPW8uZ2V0Um9vdE5vZGUoKTtpZihyLnRhZ05hbWU9PT1cIkRJVlwiKXt2YXIgYT1uZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oaSl7dmFyIG89aVswXTt2YXIgdD1vLm9sZFZhbHVlPT09bnVsbDt2YXIgcz1yLmNsYXNzTGlzdC5jb250YWlucyhcImlvbi1wYWdlXCIpO2lmKHQmJnMpe2EuZGlzY29ubmVjdCgpO3NldHVwU3dpcGVySW5Jb25pYyhlLGZhbHNlKX19KSk7YS5vYnNlcnZlKHIse2F0dHJpYnV0ZUZpbHRlcjpbXCJjbGFzc1wiXSxhdHRyaWJ1dGVPbGRWYWx1ZTp0cnVlfSl9fXJldHVybn12YXIgcz1vLmNsb3Nlc3QoXCJpb24tbW9kYWwsIGlvbi1wb3BvdmVyXCIpO2lmKHMpe3ZhciBuPXMudGFnTmFtZT09PVwiSU9OLU1PREFMXCI/XCJpb25Nb2RhbFdpbGxQcmVzZW50XCI6XCJpb25Qb3BvdmVyV2lsbFByZXNlbnRcIjt2YXIgbD1mdW5jdGlvbigpe3JhZigoZnVuY3Rpb24oKXtvLnN3aXBlci51cGRhdGUoKTtyZW1vdmVFdmVudExpc3RlbmVyKHMsbixsKX0pKX07YWRkRXZlbnRMaXN0ZW5lcihzLG4sbCl9ZWxzZXt2YXIgYz1uZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oZSl7dmFyIGk7dmFyIHI9ZVswXTt2YXIgYT0oaT1yLm9sZFZhbHVlKT09PW51bGx8fGk9PT12b2lkIDA/dm9pZCAwOmkuaW5jbHVkZXMoXCJpb24tcGFnZS1pbnZpc2libGVcIik7dmFyIHM9dC5jbGFzc0xpc3QuY29udGFpbnMoXCJpb24tcGFnZS1pbnZpc2libGVcIik7aWYoIXMmJnMhPT1hKXtvLnN3aXBlci51cGRhdGUoKX19KSk7Yy5vYnNlcnZlKHQse2F0dHJpYnV0ZUZpbHRlcjpbXCJjbGFzc1wiXSxhdHRyaWJ1dGVPbGRWYWx1ZTp0cnVlfSl9dmFyIGQ9ZnVuY3Rpb24oKXtvLnN3aXBlci51cGRhdGUoKTtyZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdyxcImFwcGxvYWRcIixkKX07YWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csXCJhcHBsb2FkXCIsZCl9O3ZhciBJb25pY1N3aXBlcj17bmFtZTpcImlvbmljXCIsb246e2FmdGVySW5pdDpmdW5jdGlvbihlKXtjb25zb2xlLndhcm4oXCJbRGVwcmVjYXRpb24gV2FybmluZ106IFRoZSBJb25pY1N3aXBlciBtb2R1bGUgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgSW9uU2xpZGVzIG1vZHVsZS4gVGhpcyBjaGFuZ2Ugd2FzIG1hZGUgdG8gYmV0dGVyIHN1cHBvcnQgdGhlIFN3aXBlciA3IHJlbGVhc2UuIFRoZSBJb25pY1N3aXBlciBtb2R1bGUgd2lsbCBiZSByZW1vdmVkIGluIElvbmljIDcuMC4gU2VlIGh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2RvY3MvYXBpL3NsaWRlcyNtaWdyYXRpb24gZm9yIHJldmlzZWQgbWlncmF0aW9uIHN0ZXBzLlwiKTtzZXR1cFN3aXBlckluSW9uaWMoZSl9fX07dmFyIElvbmljU2xpZGVzPWZ1bmN0aW9uKGUpe3ZhciBpPWUuc3dpcGVyLG89ZS5leHRlbmRQYXJhbXM7dmFyIHQ9e2VmZmVjdDp1bmRlZmluZWQsZGlyZWN0aW9uOlwiaG9yaXpvbnRhbFwiLGluaXRpYWxTbGlkZTowLGxvb3A6ZmFsc2UscGFyYWxsYXg6ZmFsc2Usc2xpZGVzUGVyVmlldzoxLHNwYWNlQmV0d2VlbjowLHNwZWVkOjMwMCxzbGlkZXNQZXJDb2x1bW46MSxzbGlkZXNQZXJDb2x1bW5GaWxsOlwiY29sdW1uXCIsc2xpZGVzUGVyR3JvdXA6MSxjZW50ZXJlZFNsaWRlczpmYWxzZSxzbGlkZXNPZmZzZXRCZWZvcmU6MCxzbGlkZXNPZmZzZXRBZnRlcjowLHRvdWNoRXZlbnRzVGFyZ2V0OlwiY29udGFpbmVyXCIsYXV0b3BsYXk6ZmFsc2UsZnJlZU1vZGU6ZmFsc2UsZnJlZU1vZGVNb21lbnR1bTp0cnVlLGZyZWVNb2RlTW9tZW50dW1SYXRpbzoxLGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6dHJ1ZSxmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86MSxmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzoxLGZyZWVNb2RlU3RpY2t5OmZhbHNlLGZyZWVNb2RlTWluaW11bVZlbG9jaXR5Oi4wMixhdXRvSGVpZ2h0OmZhbHNlLHNldFdyYXBwZXJTaXplOmZhbHNlLHpvb206e21heFJhdGlvOjMsbWluUmF0aW86MSx0b2dnbGU6ZmFsc2V9LHRvdWNoUmF0aW86MSx0b3VjaEFuZ2xlOjQ1LHNpbXVsYXRlVG91Y2g6dHJ1ZSx0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6ZmFsc2Usc2hvcnRTd2lwZXM6dHJ1ZSxsb25nU3dpcGVzOnRydWUsbG9uZ1N3aXBlc1JhdGlvOi41LGxvbmdTd2lwZXNNczozMDAsZm9sbG93RmluZ2VyOnRydWUsdGhyZXNob2xkOjAsdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOnRydWUsdG91Y2hSZWxlYXNlT25FZGdlczpmYWxzZSxpT1NFZGdlU3dpcGVEZXRlY3Rpb246ZmFsc2UsaU9TRWRnZVN3aXBlVGhyZXNob2xkOjIwLHJlc2lzdGFuY2U6dHJ1ZSxyZXNpc3RhbmNlUmF0aW86Ljg1LHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ZmFsc2Usd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OmZhbHNlLHByZXZlbnRDbGlja3M6dHJ1ZSxwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246dHJ1ZSxzbGlkZVRvQ2xpY2tlZFNsaWRlOmZhbHNlLGxvb3BBZGRpdGlvbmFsU2xpZGVzOjAsbm9Td2lwaW5nOnRydWUscnVuQ2FsbGJhY2tzT25Jbml0OnRydWUsY292ZXJmbG93RWZmZWN0Ontyb3RhdGU6NTAsc3RyZXRjaDowLGRlcHRoOjEwMCxtb2RpZmllcjoxLHNsaWRlU2hhZG93czp0cnVlfSxmbGlwRWZmZWN0OntzbGlkZVNoYWRvd3M6dHJ1ZSxsaW1pdFJvdGF0aW9uOnRydWV9LGN1YmVFZmZlY3Q6e3NsaWRlU2hhZG93czp0cnVlLHNoYWRvdzp0cnVlLHNoYWRvd09mZnNldDoyMCxzaGFkb3dTY2FsZTouOTR9LGZhZGVFZmZlY3Q6e2Nyb3NzRmFkZTpmYWxzZX0sYTExeTp7cHJldlNsaWRlTWVzc2FnZTpcIlByZXZpb3VzIHNsaWRlXCIsbmV4dFNsaWRlTWVzc2FnZTpcIk5leHQgc2xpZGVcIixmaXJzdFNsaWRlTWVzc2FnZTpcIlRoaXMgaXMgdGhlIGZpcnN0IHNsaWRlXCIsbGFzdFNsaWRlTWVzc2FnZTpcIlRoaXMgaXMgdGhlIGxhc3Qgc2xpZGVcIn19O2lmKGkucGFnaW5hdGlvbil7dC5wYWdpbmF0aW9uPXt0eXBlOlwiYnVsbGV0c1wiLGNsaWNrYWJsZTpmYWxzZSxoaWRlT25DbGljazpmYWxzZX19aWYoaS5zY3JvbGxiYXIpe3Quc2Nyb2xsYmFyPXtoaWRlOnRydWV9fW8odCl9O2V4cG9ydHtJb25pY1NsaWRlcyxJb25pY1N3aXBlcixnZXRNb2RlLHNldHVwQ29uZmlnfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53774\n')},75001:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ isPlatform),\n/* harmony export */   "b": () => (/* binding */ getIonMode),\n/* harmony export */   "c": () => (/* binding */ config),\n/* harmony export */   "g": () => (/* binding */ getPlatforms),\n/* harmony export */   "i": () => (/* binding */ initialize)\n/* harmony export */ });\n/* harmony import */ var _index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82896);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar Config=function(){function e(){this.m=new Map}e.prototype.reset=function(e){this.m=new Map(Object.entries(e))};e.prototype.get=function(e,t){var n=this.m.get(e);return n!==undefined?n:t};e.prototype.getBoolean=function(e,t){if(t===void 0){t=false}var n=this.m.get(e);if(n===undefined){return t}if(typeof n==="string"){return n==="true"}return!!n};e.prototype.getNumber=function(e,t){var n=parseFloat(this.m.get(e));return isNaN(n)?t!==undefined?t:NaN:n};e.prototype.set=function(e,t){this.m.set(e,t)};return e}();var config=new Config;var configFromSession=function(e){try{var t=e.sessionStorage.getItem(IONIC_SESSION_KEY);return t!==null?JSON.parse(t):{}}catch(e){return{}}};var saveConfig=function(e,t){try{e.sessionStorage.setItem(IONIC_SESSION_KEY,JSON.stringify(t))}catch(e){return}};var configFromURL=function(e){var t={};e.location.search.slice(1).split("&").map((function(e){return e.split("=")})).map((function(e){var t=e[0],n=e[1];return[decodeURIComponent(t),decodeURIComponent(n)]})).filter((function(e){var t=e[0];return startsWith(t,IONIC_PREFIX)})).map((function(e){var t=e[0],n=e[1];return[t.slice(IONIC_PREFIX.length),n]})).forEach((function(e){var n=e[0],i=e[1];t[n]=i}));return t};var startsWith=function(e,t){return e.substr(0,t.length)===t};var IONIC_PREFIX="ionic:";var IONIC_SESSION_KEY="ionic-persist-config";var getPlatforms=function(e){return setupPlatforms(e)};var isPlatform=function(e,t){if(typeof e==="string"){t=e;e=undefined}return getPlatforms(e).includes(t)};var setupPlatforms=function(e){if(e===void 0){e=window}if(typeof e==="undefined"){return[]}e.Ionic=e.Ionic||{};var t=e.Ionic.platforms;if(t==null){t=e.Ionic.platforms=detectPlatforms(e);t.forEach((function(t){return e.document.documentElement.classList.add("plt-".concat(t))}))}return t};var detectPlatforms=function(e){var t=config.get("platform");return Object.keys(PLATFORMS_MAP).filter((function(n){var i=t&&t[n];return typeof i==="function"?i(e):PLATFORMS_MAP[n](e)}))};var isMobileWeb=function(e){return isMobile(e)&&!isHybrid(e)};var isIpad=function(e){if(testUserAgent(e,/iPad/i)){return true}if(testUserAgent(e,/Macintosh/i)&&isMobile(e)){return true}return false};var isIphone=function(e){return testUserAgent(e,/iPhone/i)};var isIOS=function(e){return testUserAgent(e,/iPhone|iPod/i)||isIpad(e)};var isAndroid=function(e){return testUserAgent(e,/android|sink/i)};var isAndroidTablet=function(e){return isAndroid(e)&&!testUserAgent(e,/mobile/i)};var isPhablet=function(e){var t=e.innerWidth;var n=e.innerHeight;var i=Math.min(t,n);var r=Math.max(t,n);return i>390&&i<520&&(r>620&&r<800)};var isTablet=function(e){var t=e.innerWidth;var n=e.innerHeight;var i=Math.min(t,n);var r=Math.max(t,n);return isIpad(e)||isAndroidTablet(e)||i>460&&i<820&&(r>780&&r<1400)};var isMobile=function(e){return matchMedia(e,"(any-pointer:coarse)")};var isDesktop=function(e){return!isMobile(e)};var isHybrid=function(e){return isCordova(e)||isCapacitorNative(e)};var isCordova=function(e){return!!(e["cordova"]||e["phonegap"]||e["PhoneGap"])};var isCapacitorNative=function(e){var t=e["Capacitor"];return!!(t&&t.isNative)};var isElectron=function(e){return testUserAgent(e,/electron/i)};var isPWA=function(e){return!!(e.matchMedia&&e.matchMedia("(display-mode: standalone)").matches||e.navigator.standalone)};var testUserAgent=function(e,t){return t.test(e.navigator.userAgent)};var matchMedia=function(e,t){return e.matchMedia&&e.matchMedia(t).matches};var PLATFORMS_MAP={ipad:isIpad,iphone:isIphone,ios:isIOS,android:isAndroid,phablet:isPhablet,tablet:isTablet,cordova:isCordova,capacitor:isCapacitorNative,electron:isElectron,pwa:isPWA,mobile:isMobile,mobileweb:isMobileWeb,desktop:isDesktop,hybrid:isHybrid};var defaultMode;var getIonMode=function(e){return e&&(0,_index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__.g)(e)||defaultMode};var initialize=function(e){if(e===void 0){e={}}if(typeof window==="undefined"){return}var t=window.document;var n=window;var i=n.Ionic=n.Ionic||{};var r={};if(e._ael){r.ael=e._ael}if(e._rel){r.rel=e._rel}if(e._ce){r.ce=e._ce}(0,_index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__.s)(r);var o=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},configFromSession(n)),{persistConfig:false}),i.config),configFromURL(n)),e);config.reset(o);if(config.getBoolean("persistConfig")){saveConfig(n,o)}setupPlatforms(n);i.config=config;i.mode=defaultMode=config.get("mode",t.documentElement.getAttribute("mode")||(isPlatform(n,"ios")?"ios":"md"));config.set("mode",defaultMode);t.documentElement.setAttribute("mode",defaultMode);t.documentElement.classList.add(defaultMode);if(config.getBoolean("_testing")){config.set("animated",false)}var a=function(e){return e.tagName&&e.tagName.startsWith("ION-")};var s=function(e){return["ios","md"].includes(e)};(0,_index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_0__.a)((function(e){while(e){var t=e.mode||e.getAttribute("mode");if(t){if(s(t)){return t}else if(a(e)){console.warn(\'Invalid ionic mode: "\'+t+\'", expected: "ios" or "md"\')}}e=e.parentElement}return defaultMode}))};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75001\n')},48360:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "iosTransitionAnimation": () => (/* binding */ iosTransitionAnimation),\n/* harmony export */   "shadow": () => (/* binding */ shadow)\n/* harmony export */ });\n/* harmony import */ var _animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27434);\n/* harmony import */ var _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92032);\n/* harmony import */ var _index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82896);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar DURATION=540;var getClonedElement=function(t){return document.querySelector("".concat(t,".ion-cloned-element"))};var shadow=function(t){return t.shadowRoot||t};var getLargeTitle=function(t){var e=t.tagName==="ION-TABS"?t:t.querySelector("ion-tabs");var a="ion-content ion-header:not(.header-collapse-condense-inactive) ion-title.title-large";if(e!=null){var o=e.querySelector("ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)");return o!=null?o.querySelector(a):null}return t.querySelector(a)};var getBackButton=function(t,e){var a=t.tagName==="ION-TABS"?t:t.querySelector("ion-tabs");var o=[];if(a!=null){var r=a.querySelector("ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)");if(r!=null){o=r.querySelectorAll("ion-buttons")}}else{o=t.querySelectorAll("ion-buttons")}for(var n=0,i=o;n<i.length;n++){var l=i[n];var c=l.closest("ion-header");var s=c&&!c.classList.contains("header-collapse-condense-inactive");var f=l.querySelector("ion-back-button");var d=l.classList.contains("buttons-collapse");var m=l.slot==="start"||l.slot==="";if(f!==null&&m&&(d&&s&&e||!d)){return f}}return null};var createLargeTitleTransition=function(t,e,a,o,r){var n=getBackButton(o,a);var i=getLargeTitle(r);var l=getLargeTitle(o);var c=getBackButton(r,a);var s=n!==null&&i!==null&&!a;var f=l!==null&&c!==null&&a;if(s){var d=i.getBoundingClientRect();var m=n.getBoundingClientRect();animateLargeTitle(t,e,a,i,d,m);animateBackButton(t,e,a,n,d,m)}else if(f){var v=l.getBoundingClientRect();var p=c.getBoundingClientRect();animateLargeTitle(t,e,a,l,v,p);animateBackButton(t,e,a,c,v,p)}return{forward:s,backward:f}};var animateBackButton=function(t,e,a,o,r,n){var i=e?"calc(100% - ".concat(n.right+4,"px)"):"".concat(n.left-4,"px");var l=e?"7px":"-7px";var c=e?"-4px":"4px";var s=e?"-4px":"4px";var f=e?"right":"left";var d=e?"left":"right";var m=[{offset:0,opacity:0,transform:"translate3d(".concat(l,", ").concat(r.top-40,"px, 0) scale(2.1)")},{offset:1,opacity:1,transform:"translate3d(".concat(c,", ").concat(n.top-46,"px, 0) scale(1)")}];var v=[{offset:0,opacity:1,transform:"translate3d(".concat(c,", ").concat(n.top-46,"px, 0) scale(1)")},{offset:.6,opacity:0},{offset:1,opacity:0,transform:"translate3d(".concat(l,", ").concat(r.top-40,"px, 0) scale(2.1)")}];var p=a?v:m;var y=[{offset:0,opacity:0,transform:"translate3d(".concat(s,", ").concat(n.top-41,"px, 0) scale(0.6)")},{offset:1,opacity:1,transform:"translate3d(".concat(s,", ").concat(n.top-46,"px, 0) scale(1)")}];var u=[{offset:0,opacity:1,transform:"translate3d(".concat(s,", ").concat(n.top-46,"px, 0) scale(1)")},{offset:.2,opacity:0,transform:"translate3d(".concat(s,", ").concat(n.top-41,"px, 0) scale(0.6)")},{offset:1,opacity:0,transform:"translate3d(".concat(s,", ").concat(n.top-41,"px, 0) scale(0.6)")}];var b=a?u:y;var g=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var A=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var S=getClonedElement("ion-back-button");var T=shadow(S).querySelector(".button-text");var h=shadow(S).querySelector("ion-icon");S.text=o.text;S.mode=o.mode;S.icon=o.icon;S.color=o.color;S.disabled=o.disabled;S.style.setProperty("display","block");S.style.setProperty("position","fixed");A.addElement(h);g.addElement(T);g.beforeStyles({"transform-origin":"".concat(f," center")}).beforeAddWrite((function(){o.style.setProperty("display","none");S.style.setProperty(f,i)})).afterAddWrite((function(){o.style.setProperty("display","");S.style.setProperty("display","none");S.style.removeProperty(f)})).keyframes(p);A.beforeStyles({"transform-origin":"".concat(d," center")}).keyframes(b);t.addAnimation([g,A])};var animateLargeTitle=function(t,e,a,o,r,n){var i;var l=e?"calc(100% - ".concat(r.right,"px)"):"".concat(r.left,"px");var c=e?"-18px":"18px";var s=e?"right":"left";var f=[{offset:0,opacity:0,transform:"translate3d(".concat(c,", ").concat(n.top-4,"px, 0) scale(0.49)")},{offset:.1,opacity:0},{offset:1,opacity:1,transform:"translate3d(0, ".concat(r.top-2,"px, 0) scale(1)")}];var d=[{offset:0,opacity:.99,transform:"translate3d(0, ".concat(r.top-2,"px, 0) scale(1)")},{offset:.6,opacity:0},{offset:1,opacity:0,transform:"translate3d(".concat(c,", ").concat(n.top-4,"px, 0) scale(0.5)")}];var m=a?f:d;var v=getClonedElement("ion-title");var p=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();v.innerText=o.innerText;v.size=o.size;v.color=o.color;p.addElement(v);p.beforeStyles((i={"transform-origin":"".concat(s," center"),height:"46px",display:"",position:"relative"},i[s]=l,i)).beforeAddWrite((function(){o.style.setProperty("display","none")})).afterAddWrite((function(){o.style.setProperty("display","");v.style.setProperty("display","none")})).keyframes(m);t.addAnimation(p)};var iosTransitionAnimation=function(t,e){try{var a="cubic-bezier(0.32,0.72,0,1)";var o="opacity";var r="transform";var n="0%";var i=.8;var l=t.ownerDocument.dir==="rtl";var c=l?"-99.5%":"99.5%";var s=l?"33%":"-33%";var f=e.enteringEl;var d=e.leavingEl;var m=e.direction==="back";var v=f.querySelector(":scope > ion-content");var p=f.querySelectorAll(":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *");var y=f.querySelectorAll(":scope > ion-header > ion-toolbar");var u=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var b=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();u.addElement(f).duration(e.duration||DURATION).easing(e.easing||a).fill("both").beforeRemoveClass("ion-page-invisible");if(d&&t){var g=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();g.addElement(t);u.addAnimation(g)}if(!v&&y.length===0&&p.length===0){b.addElement(f.querySelector(":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs"))}else{b.addElement(v);b.addElement(p)}u.addAnimation(b);if(m){b.beforeClearStyles([o]).fromTo("transform","translateX(".concat(s,")"),"translateX(".concat(n,")")).fromTo(o,i,1)}else{b.beforeClearStyles([o]).fromTo("transform","translateX(".concat(c,")"),"translateX(".concat(n,")"))}if(v){var A=shadow(v).querySelector(".transition-effect");if(A){var S=A.querySelector(".transition-cover");var T=A.querySelector(".transition-shadow");var h=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var x=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var E=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();h.addElement(A).beforeStyles({opacity:"1",display:"block"}).afterStyles({opacity:"",display:""});x.addElement(S).beforeClearStyles([o]).fromTo(o,0,.1);E.addElement(T).beforeClearStyles([o]).fromTo(o,.03,.7);h.addAnimation([x,E]);b.addAnimation([h])}}var q=f.querySelector("ion-header.header-collapse-condense");var X=createLargeTitleTransition(u,l,m,f,d),C=X.forward,k=X.backward;y.forEach((function(t){var e=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();e.addElement(t);u.addAnimation(e);var a=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();a.addElement(t.querySelector("ion-title"));var r=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var i=Array.from(t.querySelectorAll("ion-buttons,[menuToggle]"));var f=t.closest("ion-header");var d=f&&f.classList.contains("header-collapse-condense-inactive");var v;if(m){v=i.filter((function(t){var e=t.classList.contains("buttons-collapse");return e&&!d||!e}))}else{v=i.filter((function(t){return!t.classList.contains("buttons-collapse")}))}r.addElement(v);var p=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();p.addElement(t.querySelectorAll(":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])"));var y=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();y.addElement(shadow(t).querySelector(".toolbar-background"));var b=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var g=t.querySelector("ion-back-button");if(g){b.addElement(g)}e.addAnimation([a,r,p,y,b]);r.fromTo(o,.01,1);p.fromTo(o,.01,1);if(m){if(!d){a.fromTo("transform","translateX(".concat(s,")"),"translateX(".concat(n,")")).fromTo(o,.01,1)}p.fromTo("transform","translateX(".concat(s,")"),"translateX(".concat(n,")"));b.fromTo(o,.01,1)}else{if(!q){a.fromTo("transform","translateX(".concat(c,")"),"translateX(".concat(n,")")).fromTo(o,.01,1)}p.fromTo("transform","translateX(".concat(c,")"),"translateX(".concat(n,")"));y.beforeClearStyles([o,"transform"]);var A=f===null||f===void 0?void 0:f.translucent;if(!A){y.fromTo(o,.01,"var(--opacity)")}else{y.fromTo("transform",l?"translateX(-100%)":"translateX(100%)","translateX(0px)")}if(!C){b.fromTo(o,.01,1)}if(g&&!C){var S=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();S.addElement(shadow(g).querySelector(".button-text")).fromTo("transform",l?"translateX(-100px)":"translateX(100px)","translateX(0px)");e.addAnimation(S)}}}));if(d){var w=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var B=d.querySelector(":scope > ion-content");var L=d.querySelectorAll(":scope > ion-header > ion-toolbar");var P=d.querySelectorAll(":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *");if(!B&&L.length===0&&P.length===0){w.addElement(d.querySelector(":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs"))}else{w.addElement(B);w.addElement(P)}u.addAnimation(w);if(m){w.beforeClearStyles([o]).fromTo("transform","translateX(".concat(n,")"),l?"translateX(-100%)":"translateX(100%)");var R=(0,_index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_0__.g)(d);u.afterAddWrite((function(){if(u.getDirection()==="normal"){R.style.setProperty("display","none")}}))}else{w.fromTo("transform","translateX(".concat(n,")"),"translateX(".concat(s,")")).fromTo(o,1,i)}if(B){var I=shadow(B).querySelector(".transition-effect");if(I){var N=I.querySelector(".transition-cover");var W=I.querySelector(".transition-shadow");var j=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var D=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var O=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();j.addElement(I).beforeStyles({opacity:"1",display:"block"}).afterStyles({opacity:"",display:""});D.addElement(N).beforeClearStyles([o]).fromTo(o,.1,0);O.addElement(W).beforeClearStyles([o]).fromTo(o,.7,.03);j.addAnimation([D,O]);w.addAnimation([j])}}L.forEach((function(t){var e=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();e.addElement(t);var a=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();a.addElement(t.querySelector("ion-title"));var i=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var c=t.querySelectorAll("ion-buttons,[menuToggle]");var f=t.closest("ion-header");var d=f&&f.classList.contains("header-collapse-condense-inactive");var v=Array.from(c).filter((function(t){var e=t.classList.contains("buttons-collapse");return e&&!d||!e}));i.addElement(v);var p=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var y=t.querySelectorAll(":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])");if(y.length>0){p.addElement(y)}var b=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();b.addElement(shadow(t).querySelector(".toolbar-background"));var g=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();var A=t.querySelector("ion-back-button");if(A){g.addElement(A)}e.addAnimation([a,i,p,g,b]);u.addAnimation(e);g.fromTo(o,.99,0);i.fromTo(o,.99,0);p.fromTo(o,.99,0);if(m){if(!d){a.fromTo("transform","translateX(".concat(n,")"),l?"translateX(-100%)":"translateX(100%)").fromTo(o,.99,0)}p.fromTo("transform","translateX(".concat(n,")"),l?"translateX(-100%)":"translateX(100%)");b.beforeClearStyles([o,"transform"]);var S=f===null||f===void 0?void 0:f.translucent;if(!S){b.fromTo(o,"var(--opacity)",0)}else{b.fromTo("transform","translateX(0px)",l?"translateX(-100%)":"translateX(100%)")}if(A&&!k){var T=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();T.addElement(shadow(A).querySelector(".button-text")).fromTo("transform","translateX(".concat(n,")"),"translateX(".concat((l?-124:124)+"px",")"));e.addAnimation(T)}}else{if(!d){a.fromTo("transform","translateX(".concat(n,")"),"translateX(".concat(s,")")).fromTo(o,.99,0).afterClearStyles([r,o])}p.fromTo("transform","translateX(".concat(n,")"),"translateX(".concat(s,")")).afterClearStyles([r,o]);g.afterClearStyles([o]);a.afterClearStyles([o]);i.afterClearStyles([o])}}))}return u}catch(t){throw t}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48360\n')},92782:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "mdTransitionAnimation": () => (/* binding */ mdTransitionAnimation)\n/* harmony export */ });\n/* harmony import */ var _animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27434);\n/* harmony import */ var _index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92032);\n/* harmony import */ var _index_b3eecb14_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82896);\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar mdTransitionAnimation=function(e,n){var a="40px";var t="0px";var i=n.direction==="back";var o=n.enteringEl;var r=n.leavingEl;var m=(0,_index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_0__.g)(o);var c=m.querySelector("ion-toolbar");var s=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();s.addElement(m).fill("both").beforeRemoveClass("ion-page-invisible");if(i){s.duration(n.duration||200).easing("cubic-bezier(0.47,0,0.745,0.715)")}else{s.duration(n.duration||280).easing("cubic-bezier(0.36,0.66,0.04,1)").fromTo("transform","translateY(".concat(a,")"),"translateY(".concat(t,")")).fromTo("opacity",.01,1)}if(c){var l=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();l.addElement(c);s.addAnimation(l)}if(r&&i){s.duration(n.duration||200).easing("cubic-bezier(0.47,0,0.745,0.715)");var d=(0,_animation_19dbf9bf_js__WEBPACK_IMPORTED_MODULE_2__.c)();d.addElement((0,_index_e6c2c822_js__WEBPACK_IMPORTED_MODULE_0__.g)(r)).onFinish((function(e){if(e===1&&d.elements.length>0){d.elements[0].style.setProperty("display","none")}})).fromTo("transform","translateY(".concat(t,")"),"translateY(".concat(a,")")).fromTo("opacity",1,0);s.addAnimation(d)}return s};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3ODIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUM0Syx3Q0FBd0MsYUFBYSxZQUFZLDJCQUEyQixtQkFBbUIsa0JBQWtCLE1BQU0scURBQWlCLElBQUkscUNBQXFDLE1BQU0seURBQWUsR0FBRyxxRUFBcUUsTUFBTSx1RUFBdUUsS0FBSyx5S0FBeUssTUFBTSxNQUFNLHlEQUFlLEdBQUcsZ0JBQWdCLGtCQUFrQixTQUFTLHVFQUF1RSxNQUFNLHlEQUFlLEdBQUcsYUFBYSxxREFBaUIsMkJBQTJCLCtCQUErQixtREFBbUQscUdBQXFHLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L21kLnRyYW5zaXRpb24tZGE4NjYxMTkuanM/OWQ2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0e2MgYXMgY3JlYXRlQW5pbWF0aW9ufWZyb21cIi4vYW5pbWF0aW9uLTE5ZGJmOWJmLmpzXCI7aW1wb3J0e2cgYXMgZ2V0SW9uUGFnZUVsZW1lbnR9ZnJvbVwiLi9pbmRleC1lNmMyYzgyMi5qc1wiO2ltcG9ydFwiLi9oZWxwZXJzLTZlMWU1YjY1LmpzXCI7aW1wb3J0XCIuL2luZGV4LWIzZWVjYjE0LmpzXCI7dmFyIG1kVHJhbnNpdGlvbkFuaW1hdGlvbj1mdW5jdGlvbihlLG4pe3ZhciBhPVwiNDBweFwiO3ZhciB0PVwiMHB4XCI7dmFyIGk9bi5kaXJlY3Rpb249PT1cImJhY2tcIjt2YXIgbz1uLmVudGVyaW5nRWw7dmFyIHI9bi5sZWF2aW5nRWw7dmFyIG09Z2V0SW9uUGFnZUVsZW1lbnQobyk7dmFyIGM9bS5xdWVyeVNlbGVjdG9yKFwiaW9uLXRvb2xiYXJcIik7dmFyIHM9Y3JlYXRlQW5pbWF0aW9uKCk7cy5hZGRFbGVtZW50KG0pLmZpbGwoXCJib3RoXCIpLmJlZm9yZVJlbW92ZUNsYXNzKFwiaW9uLXBhZ2UtaW52aXNpYmxlXCIpO2lmKGkpe3MuZHVyYXRpb24obi5kdXJhdGlvbnx8MjAwKS5lYXNpbmcoXCJjdWJpYy1iZXppZXIoMC40NywwLDAuNzQ1LDAuNzE1KVwiKX1lbHNle3MuZHVyYXRpb24obi5kdXJhdGlvbnx8MjgwKS5lYXNpbmcoXCJjdWJpYy1iZXppZXIoMC4zNiwwLjY2LDAuMDQsMSlcIikuZnJvbVRvKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGVZKFwiLmNvbmNhdChhLFwiKVwiKSxcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHQsXCIpXCIpKS5mcm9tVG8oXCJvcGFjaXR5XCIsLjAxLDEpfWlmKGMpe3ZhciBsPWNyZWF0ZUFuaW1hdGlvbigpO2wuYWRkRWxlbWVudChjKTtzLmFkZEFuaW1hdGlvbihsKX1pZihyJiZpKXtzLmR1cmF0aW9uKG4uZHVyYXRpb258fDIwMCkuZWFzaW5nKFwiY3ViaWMtYmV6aWVyKDAuNDcsMCwwLjc0NSwwLjcxNSlcIik7dmFyIGQ9Y3JlYXRlQW5pbWF0aW9uKCk7ZC5hZGRFbGVtZW50KGdldElvblBhZ2VFbGVtZW50KHIpKS5vbkZpbmlzaCgoZnVuY3Rpb24oZSl7aWYoZT09PTEmJmQuZWxlbWVudHMubGVuZ3RoPjApe2QuZWxlbWVudHNbMF0uc3R5bGUuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIpfX0pKS5mcm9tVG8oXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHQsXCIpXCIpLFwidHJhbnNsYXRlWShcIi5jb25jYXQoYSxcIilcIikpLmZyb21UbyhcIm9wYWNpdHlcIiwxLDApO3MuYWRkQW5pbWF0aW9uKGQpfXJldHVybiBzfTtleHBvcnR7bWRUcmFuc2l0aW9uQW5pbWF0aW9ufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92782\n')},46250:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "B": () => (/* binding */ BACKDROP),\n/* harmony export */   "a": () => (/* binding */ alertController),\n/* harmony export */   "b": () => (/* binding */ actionSheetController),\n/* harmony export */   "c": () => (/* binding */ popoverController),\n/* harmony export */   "d": () => (/* binding */ present),\n/* harmony export */   "e": () => (/* binding */ prepareOverlay),\n/* harmony export */   "f": () => (/* binding */ dismiss),\n/* harmony export */   "g": () => (/* binding */ eventMethod),\n/* harmony export */   "h": () => (/* binding */ activeAnimations),\n/* harmony export */   "i": () => (/* binding */ isCancel),\n/* harmony export */   "j": () => (/* binding */ focusFirstDescendant),\n/* harmony export */   "k": () => (/* binding */ getOverlay),\n/* harmony export */   "l": () => (/* binding */ loadingController),\n/* harmony export */   "m": () => (/* binding */ modalController),\n/* harmony export */   "p": () => (/* binding */ pickerController),\n/* harmony export */   "s": () => (/* binding */ safeCall),\n/* harmony export */   "t": () => (/* binding */ toastController)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(70655);\n/* harmony import */ var _ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75001);\n/* harmony import */ var _hardware_back_button_ace6a71b_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47292);\n/* harmony import */ var _helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17504);\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */var lastId=0;var activeAnimations=new WeakMap;var createController=function(e){return{create:function(t){return createOverlay(e,t)},dismiss:function(t,n,r){return dismissOverlay(document,t,n,e,r)},getTop:function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(this,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(t){return[2,getOverlay(document,e)]}))}))}}};var alertController=createController("ion-alert");var actionSheetController=createController("ion-action-sheet");var loadingController=createController("ion-loading");var modalController=createController("ion-modal");var pickerController=createController("ion-picker");var popoverController=createController("ion-popover");var toastController=createController("ion-toast");var prepareOverlay=function(e){if(typeof document!=="undefined"){connectListeners(document)}var t=lastId++;e.overlayIndex=t;if(!e.hasAttribute("id")){e.id="ion-overlay-".concat(t)}};var createOverlay=function(e,t){if(typeof window!=="undefined"&&typeof window.customElements!=="undefined"){return window.customElements.whenDefined(e).then((function(){var n=document.createElement(e);n.classList.add("overlay-hidden");Object.assign(n,Object.assign(Object.assign({},t),{hasController:true}));getAppRoot(document).appendChild(n);return new Promise((function(e){return (0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.c)(n,e)}))}))}return Promise.resolve()};var focusableQueryString=\'[tabindex]:not([tabindex^="-"]), input:not([type=hidden]):not([tabindex^="-"]), textarea:not([tabindex^="-"]), button:not([tabindex^="-"]), select:not([tabindex^="-"]), .ion-focusable:not([tabindex^="-"])\';var innerFocusableQueryString="input:not([type=hidden]), textarea, button, select";var focusFirstDescendant=function(e,t){var n=e.querySelector(focusableQueryString);var r=n&&n.shadowRoot;if(r){n=r.querySelector(innerFocusableQueryString)||n}if(n){(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.f)(n)}else{t.focus()}};var isOverlayHidden=function(e){return e.classList.contains("overlay-hidden")};var focusLastDescendant=function(e,t){var n=Array.from(e.querySelectorAll(focusableQueryString));var r=n.length>0?n[n.length-1]:null;var o=r&&r.shadowRoot;if(o){r=o.querySelector(innerFocusableQueryString)||r}if(r){r.focus()}else{t.focus()}};var trapKeyboardFocus=function(e,t){var n=getOverlay(t,"ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover");var r=e.target;if(!n||!r){return}if(n.classList.contains("ion-disable-focus-trap")){return}var o=function(){if(n===r){n.lastFocus=undefined}else{var e=(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.g)(n);if(!e.contains(r)){return}var o=e.querySelector(".ion-overlay-wrapper");if(!o){return}if(o.contains(r)){n.lastFocus=r}else{var i=n.lastFocus;focusFirstDescendant(o,n);if(i===t.activeElement){focusLastDescendant(o,n)}n.lastFocus=t.activeElement}}};var i=function(){if(n.contains(r)){n.lastFocus=r}else{var e=n.lastFocus;focusFirstDescendant(n,n);if(e===t.activeElement){focusLastDescendant(n,n)}n.lastFocus=t.activeElement}};if(n.shadowRoot){i()}else{o()}};var connectListeners=function(e){if(lastId===0){lastId=1;e.addEventListener("focus",(function(t){trapKeyboardFocus(t,e)}),true);e.addEventListener("ionBackButton",(function(t){var n=getOverlay(e);if(n&&n.backdropDismiss){t.detail.register(_hardware_back_button_ace6a71b_js__WEBPACK_IMPORTED_MODULE_3__.OVERLAY_BACK_BUTTON_PRIORITY,(function(){return n.dismiss(undefined,BACKDROP)}))}}));e.addEventListener("keyup",(function(t){if(t.key==="Escape"){var n=getOverlay(e);if(n&&n.backdropDismiss){n.dismiss(undefined,BACKDROP)}}}))}};var dismissOverlay=function(e,t,n,r,o){var i=getOverlay(e,r,o);if(!i){return Promise.reject("overlay does not exist")}return i.dismiss(t,n)};var getOverlays=function(e,t){if(t===undefined){t="ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast"}return Array.from(e.querySelectorAll(t)).filter((function(e){return e.overlayIndex>0}))};var getOverlay=function(e,t,n){var r=getOverlays(e,t).filter((function(e){return!isOverlayHidden(e)}));return n===undefined?r[r.length-1]:r.find((function(e){return e.id===n}))};var setRootAriaHidden=function(e){if(e===void 0){e=false}var t=getAppRoot(document);var n=t.querySelector("ion-router-outlet, ion-nav, #ion-view-container-root");if(!n){return}if(e){n.setAttribute("aria-hidden","true")}else{n.removeAttribute("aria-hidden")}};var present=function(e,t,n,r,o){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var i,a,s,l,c;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(u){switch(u.label){case 0:if(e.presented){return[2]}setRootAriaHidden(true);e.presented=true;e.willPresent.emit();(i=e.willPresentShorthand)===null||i===void 0?void 0:i.emit();s=(0,_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.b)(e);l=e.enterAnimation?e.enterAnimation:_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.c.get(t,s==="ios"?n:r);return[4,overlayAnimation(e,l,e.el,o)];case 1:c=u.sent();if(c){e.didPresent.emit();(a=e.didPresentShorthand)===null||a===void 0?void 0:a.emit()}if(e.el.tagName!=="ION-TOAST"){focusPreviousElementOnDismiss(e.el)}if(e.keyboardClose){e.el.focus()}return[2]}}))}))};var focusPreviousElementOnDismiss=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var t,n;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(r){switch(r.label){case 0:t=document.activeElement;if(!t){return[2]}n=t&&t.shadowRoot;if(n){t=n.querySelector(innerFocusableQueryString)||t}return[4,e.onDidDismiss()];case 1:r.sent();t.focus();return[2]}}))}))};var dismiss=function(e,t,n,r,o,i,a){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var s,l,c,u,d;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(v){switch(v.label){case 0:if(!e.presented){return[2,false]}setRootAriaHidden(false);e.presented=false;v.label=1;case 1:v.trys.push([1,4,,5]);e.el.style.setProperty("pointer-events","none");e.willDismiss.emit({data:t,role:n});(s=e.willDismissShorthand)===null||s===void 0?void 0:s.emit({data:t,role:n});c=(0,_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.b)(e);u=e.leaveAnimation?e.leaveAnimation:_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.c.get(r,c==="ios"?o:i);if(!(n!=="gesture"))return[3,3];return[4,overlayAnimation(e,u,e.el,a)];case 2:v.sent();v.label=3;case 3:e.didDismiss.emit({data:t,role:n});(l=e.didDismissShorthand)===null||l===void 0?void 0:l.emit({data:t,role:n});activeAnimations.delete(e);e.el.classList.add("overlay-hidden");e.el.style.removeProperty("pointer-events");return[3,5];case 4:d=v.sent();console.error(d);return[3,5];case 5:e.el.remove();return[2,true]}}))}))};var getAppRoot=function(e){return e.querySelector("ion-app")||e.body};var overlayAnimation=function(e,t,n,r){return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__awaiter */ .mG)(void 0,void 0,void 0,(function(){var o,i,a;return (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__generator */ .Jh)(this,(function(s){switch(s.label){case 0:n.classList.remove("overlay-hidden");o=e.el;i=t(o,r);if(!e.animated||!_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.c.getBoolean("animated",true)){i.duration(0)}if(e.keyboardClose){i.beforeAddWrite((function(){var e=n.ownerDocument.activeElement;if(e&&e.matches("input,ion-input, ion-textarea")){e.blur()}}))}a=activeAnimations.get(e)||[];activeAnimations.set(e,(0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__spreadArray */ .ev)((0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__spreadArray */ .ev)([],a,true),[i],false));return[4,i.play()];case 1:s.sent();return[2,true]}}))}))};var eventMethod=function(e,t){var n;var r=new Promise((function(e){return n=e}));onceEvent(e,t,(function(e){n(e.detail)}));return r};var onceEvent=function(e,t,n){var r=function(o){(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.b)(e,t,r);n(o)};(0,_helpers_6e1e5b65_js__WEBPACK_IMPORTED_MODULE_2__.a)(e,t,r)};var isCancel=function(e){return e==="cancel"||e===BACKDROP};var defaultGate=function(e){return e()};var safeCall=function(e,t){if(typeof e==="function"){var n=_ionic_global_0ebe321c_js__WEBPACK_IMPORTED_MODULE_0__.c.get("_zoneGate",defaultGate);return n((function(){try{return e(t)}catch(e){throw e}}))}return undefined};var BACKDROP="backdrop";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46250\n')},75087:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n// UNUSED EXPORTS: CreateAnimation, DefaultIonLifeCycleContext, IonAccordion, IonAccordionGroup, IonActionSheet, IonAlert, IonApp, IonAvatar, IonBackButton, IonBackdrop, IonBadge, IonBreadcrumb, IonBreadcrumbs, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonLifeCycleContext, IonList, IonListHeader, IonLoading, IonMenu, IonMenuButton, IonMenuToggle, IonModal, IonNav, IonNavLink, IonNote, IonPage, IonPicker, IonPopover, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRedirect, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRoute, IonRouterContext, IonRouterLink, IonRouterOutlet, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSlide, IonSlides, IonSpinner, IonSplitPane, IonTab, IonTabBar, IonTabButton, IonTabs, IonTabsContext, IonText, IonTextarea, IonThumbnail, IonTitle, IonToast, IonToggle, IonToolbar, IonVirtualScroll, IonicSafeString, IonicSlides, IonicSwiper, LocationHistory, NavContext, NavManager, RouteManagerContext, StackContext, ViewLifeCycleManager, ViewStacks, createAnimation, createGesture, generateId, getConfig, getPlatforms, getTimeGivenProgression, iosTransitionAnimation, isPlatform, mdTransitionAnimation, setupIonicReact, useIonActionSheet, useIonAlert, useIonLoading, useIonModal, useIonPicker, useIonPopover, useIonRouter, useIonToast, useIonViewDidEnter, useIonViewDidLeave, useIonViewWillEnter, useIonViewWillLeave, withIonLifeCycle\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/@stencil/core/internal/client/index.js + 1 modules\nvar client = __webpack_require__(77210);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/ionic-global.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\nclass Config {\n  constructor() {\n    this.m = new Map();\n  }\n  reset(configObj) {\n    this.m = new Map(Object.entries(configObj));\n  }\n  get(key, fallback) {\n    const value = this.m.get(key);\n    return value !== undefined ? value : fallback;\n  }\n  getBoolean(key, fallback = false) {\n    const val = this.m.get(key);\n    if (val === undefined) {\n      return fallback;\n    }\n    if (typeof val === 'string') {\n      return val === 'true';\n    }\n    return !!val;\n  }\n  getNumber(key, fallback) {\n    const val = parseFloat(this.m.get(key));\n    return isNaN(val) ? (fallback !== undefined ? fallback : NaN) : val;\n  }\n  set(key, value) {\n    this.m.set(key, value);\n  }\n}\nconst ionic_global_config = /*@__PURE__*/ new Config();\nconst configFromSession = (win) => {\n  try {\n    const configStr = win.sessionStorage.getItem(IONIC_SESSION_KEY);\n    return configStr !== null ? JSON.parse(configStr) : {};\n  }\n  catch (e) {\n    return {};\n  }\n};\nconst saveConfig = (win, c) => {\n  try {\n    win.sessionStorage.setItem(IONIC_SESSION_KEY, JSON.stringify(c));\n  }\n  catch (e) {\n    return;\n  }\n};\nconst configFromURL = (win) => {\n  const configObj = {};\n  win.location.search\n    .slice(1)\n    .split('&')\n    .map(entry => entry.split('='))\n    .map(([key, value]) => [decodeURIComponent(key), decodeURIComponent(value)])\n    .filter(([key]) => startsWith(key, IONIC_PREFIX))\n    .map(([key, value]) => [key.slice(IONIC_PREFIX.length), value])\n    .forEach(([key, value]) => {\n    configObj[key] = value;\n  });\n  return configObj;\n};\nconst startsWith = (input, search) => {\n  return input.substr(0, search.length) === search;\n};\nconst IONIC_PREFIX = 'ionic:';\nconst IONIC_SESSION_KEY = 'ionic-persist-config';\n\nconst getPlatforms = (win) => setupPlatforms(win);\nconst isPlatform = (winOrPlatform, platform) => {\n  if (typeof winOrPlatform === 'string') {\n    platform = winOrPlatform;\n    winOrPlatform = undefined;\n  }\n  return getPlatforms(winOrPlatform).includes(platform);\n};\nconst setupPlatforms = (win = window) => {\n  if (typeof win === 'undefined') {\n    return [];\n  }\n  win.Ionic = win.Ionic || {};\n  let platforms = win.Ionic.platforms;\n  if (platforms == null) {\n    platforms = win.Ionic.platforms = detectPlatforms(win);\n    platforms.forEach(p => win.document.documentElement.classList.add(`plt-${p}`));\n  }\n  return platforms;\n};\nconst detectPlatforms = (win) => {\n  const customPlatformMethods = ionic_global_config.get('platform');\n  return Object.keys(PLATFORMS_MAP).filter(p => {\n    const customMethod = customPlatformMethods && customPlatformMethods[p];\n    return typeof customMethod === 'function' ? customMethod(win) : PLATFORMS_MAP[p](win);\n  });\n};\nconst isMobileWeb = (win) => isMobile(win) && !isHybrid(win);\nconst isIpad = (win) => {\n  // iOS 12 and below\n  if (testUserAgent(win, /iPad/i)) {\n    return true;\n  }\n  // iOS 13+\n  if (testUserAgent(win, /Macintosh/i) && isMobile(win)) {\n    return true;\n  }\n  return false;\n};\nconst isIphone = (win) => testUserAgent(win, /iPhone/i);\nconst isIOS = (win) => testUserAgent(win, /iPhone|iPod/i) || isIpad(win);\nconst isAndroid = (win) => testUserAgent(win, /android|sink/i);\nconst isAndroidTablet = (win) => {\n  return isAndroid(win) && !testUserAgent(win, /mobile/i);\n};\nconst isPhablet = (win) => {\n  const width = win.innerWidth;\n  const height = win.innerHeight;\n  const smallest = Math.min(width, height);\n  const largest = Math.max(width, height);\n  return (smallest > 390 && smallest < 520) &&\n    (largest > 620 && largest < 800);\n};\nconst isTablet = (win) => {\n  const width = win.innerWidth;\n  const height = win.innerHeight;\n  const smallest = Math.min(width, height);\n  const largest = Math.max(width, height);\n  return (isIpad(win) ||\n    isAndroidTablet(win) ||\n    ((smallest > 460 && smallest < 820) &&\n      (largest > 780 && largest < 1400)));\n};\nconst isMobile = (win) => matchMedia(win, '(any-pointer:coarse)');\nconst isDesktop = (win) => !isMobile(win);\nconst isHybrid = (win) => isCordova(win) || isCapacitorNative(win);\nconst isCordova = (win) => !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);\nconst isCapacitorNative = (win) => {\n  const capacitor = win['Capacitor'];\n  return !!(capacitor && capacitor.isNative);\n};\nconst isElectron = (win) => testUserAgent(win, /electron/i);\nconst isPWA = (win) => !!((win.matchMedia && win.matchMedia('(display-mode: standalone)').matches) || win.navigator.standalone);\nconst testUserAgent = (win, expr) => expr.test(win.navigator.userAgent);\nconst matchMedia = (win, query) => win.matchMedia && win.matchMedia(query).matches;\nconst PLATFORMS_MAP = {\n  'ipad': isIpad,\n  'iphone': isIphone,\n  'ios': isIOS,\n  'android': isAndroid,\n  'phablet': isPhablet,\n  'tablet': isTablet,\n  'cordova': isCordova,\n  'capacitor': isCapacitorNative,\n  'electron': isElectron,\n  'pwa': isPWA,\n  'mobile': isMobile,\n  'mobileweb': isMobileWeb,\n  'desktop': isDesktop,\n  'hybrid': isHybrid\n};\n\nlet defaultMode;\nconst ionic_global_getIonMode = (ref) => {\n  return (ref && (0,client/* getMode */.iJ)(ref)) || defaultMode;\n};\nconst ionic_global_initialize = (userConfig = {}) => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const doc = window.document;\n  const win = window;\n  Context.config = ionic_global_config;\n  const Ionic = win.Ionic = win.Ionic || {};\n  const platformHelpers = {};\n  if (userConfig._ael) {\n    platformHelpers.ael = userConfig._ael;\n  }\n  if (userConfig._rel) {\n    platformHelpers.rel = userConfig._rel;\n  }\n  if (userConfig._ce) {\n    platformHelpers.ce = userConfig._ce;\n  }\n  setPlatformHelpers(platformHelpers);\n  // create the Ionic.config from raw config object (if it exists)\n  // and convert Ionic.config into a ConfigApi that has a get() fn\n  const configObj = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, configFromSession(win)), { persistConfig: false }), Ionic.config), configFromURL(win)), userConfig);\n  ionic_global_config.reset(configObj);\n  if (ionic_global_config.getBoolean('persistConfig')) {\n    saveConfig(win, configObj);\n  }\n  // Setup platforms\n  setupPlatforms(win);\n  // first see if the mode was set as an attribute on <html>\n  // which could have been set by the user, or by pre-rendering\n  // otherwise get the mode via config settings, and fallback to md\n  Ionic.config = ionic_global_config;\n  Ionic.mode = defaultMode = ionic_global_config.get('mode', (doc.documentElement.getAttribute('mode')) || (isPlatform(win, 'ios') ? 'ios' : 'md'));\n  ionic_global_config.set('mode', defaultMode);\n  doc.documentElement.setAttribute('mode', defaultMode);\n  doc.documentElement.classList.add(defaultMode);\n  if (ionic_global_config.getBoolean('_testing')) {\n    ionic_global_config.set('animated', false);\n  }\n  const isIonicElement = (elm) => elm.tagName && elm.tagName.startsWith('ION-');\n  const isAllowedIonicModeValue = (elmMode) => ['ios', 'md'].includes(elmMode);\n  setMode((elm) => {\n    while (elm) {\n      const elmMode = elm.mode || elm.getAttribute('mode');\n      if (elmMode) {\n        if (isAllowedIonicModeValue(elmMode)) {\n          return elmMode;\n        }\n        else if (isIonicElement(elm)) {\n          console.warn('Invalid ionic mode: \"' + elmMode + '\", expected: \"ios\" or \"md\"');\n        }\n      }\n      elm = elm.parentElement;\n    }\n    return defaultMode;\n  });\n};\n\n\n\n// EXTERNAL MODULE: ./node_modules/@ionic/core/components/helpers.js\nvar helpers = __webpack_require__(96587);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/overlays.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\n\nlet lastId = 0;\nconst activeAnimations = new WeakMap();\nconst createController = (tagName) => {\n  return {\n    create(options) {\n      return createOverlay(tagName, options);\n    },\n    dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, tagName, id);\n    },\n    async getTop() {\n      return getOverlay(document, tagName);\n    }\n  };\n};\nconst overlays_alertController = /*@__PURE__*/ (/* unused pure expression or super */ null && (createController('ion-alert')));\nconst actionSheetController = /*@__PURE__*/ createController('ion-action-sheet');\nconst overlays_loadingController = /*@__PURE__*/ (/* unused pure expression or super */ null && (createController('ion-loading')));\nconst overlays_modalController = /*@__PURE__*/ (/* unused pure expression or super */ null && (createController('ion-modal')));\nconst overlays_pickerController = /*@__PURE__*/ (/* unused pure expression or super */ null && (createController('ion-picker')));\nconst overlays_popoverController = /*@__PURE__*/ (/* unused pure expression or super */ null && (createController('ion-popover')));\nconst toastController = /*@__PURE__*/ createController('ion-toast');\nconst prepareOverlay = (el) => {\n  /* tslint:disable-next-line */\n  if (typeof document !== 'undefined') {\n    connectListeners(document);\n  }\n  const overlayIndex = lastId++;\n  el.overlayIndex = overlayIndex;\n  if (!el.hasAttribute('id')) {\n    el.id = `ion-overlay-${overlayIndex}`;\n  }\n};\nconst createOverlay = (tagName, opts) => {\n  /* tslint:disable-next-line */\n  if (typeof window !== 'undefined' && typeof window.customElements !== 'undefined') {\n    return window.customElements.whenDefined(tagName).then(() => {\n      const element = document.createElement(tagName);\n      element.classList.add('overlay-hidden');\n      /**\n       * Convert the passed in overlay options into props\n       * that get passed down into the new overlay.\n       */\n      Object.assign(element, Object.assign(Object.assign({}, opts), { hasController: true }));\n      // append the overlay element to the document body\n      getAppRoot(document).appendChild(element);\n      return new Promise(resolve => (0,helpers.c)(element, resolve));\n    });\n  }\n  return Promise.resolve();\n};\nconst focusableQueryString = '[tabindex]:not([tabindex^=\"-\"]), input:not([type=hidden]):not([tabindex^=\"-\"]), textarea:not([tabindex^=\"-\"]), button:not([tabindex^=\"-\"]), select:not([tabindex^=\"-\"]), .ion-focusable:not([tabindex^=\"-\"])';\nconst innerFocusableQueryString = 'input:not([type=hidden]), textarea, button, select';\nconst focusFirstDescendant = (ref, overlay) => {\n  let firstInput = ref.querySelector(focusableQueryString);\n  const shadowRoot = firstInput && firstInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    firstInput = shadowRoot.querySelector(innerFocusableQueryString) || firstInput;\n  }\n  if (firstInput) {\n    focusElement(firstInput);\n  }\n  else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\nconst isOverlayHidden = (overlay) => overlay.classList.contains('overlay-hidden');\nconst focusLastDescendant = (ref, overlay) => {\n  const inputs = Array.from(ref.querySelectorAll(focusableQueryString));\n  let lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;\n  const shadowRoot = lastInput && lastInput.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    lastInput = shadowRoot.querySelector(innerFocusableQueryString) || lastInput;\n  }\n  if (lastInput) {\n    lastInput.focus();\n  }\n  else {\n    // Focus overlay instead of letting focus escape\n    overlay.focus();\n  }\n};\n/**\n * Traps keyboard focus inside of overlay components.\n * Based on https://w3c.github.io/aria-practices/examples/dialog-modal/alertdialog.html\n * This includes the following components: Action Sheet, Alert, Loading, Modal,\n * Picker, and Popover.\n * Should NOT include: Toast\n */\nconst trapKeyboardFocus = (ev, doc) => {\n  const lastOverlay = getOverlay(doc, 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover');\n  const target = ev.target;\n  /**\n   * If no active overlay, ignore this event.\n   *\n   * If this component uses the shadow dom,\n   * this global listener is pointless\n   * since it will not catch the focus\n   * traps as they are inside the shadow root.\n   * We need to add a listener to the shadow root\n   * itself to ensure the focus trap works.\n   */\n  if (!lastOverlay || !target) {\n    return;\n  }\n  /**\n   * If the ion-disable-focus-trap class\n   * is present on an overlay, then this component\n   * instance has opted out of focus trapping.\n   * An example of this is when the sheet modal\n   * has a backdrop that is disabled. The content\n   * behind the sheet should be focusable until\n   * the backdrop is enabled.\n   */\n  if (lastOverlay.classList.contains('ion-disable-focus-trap')) {\n    return;\n  }\n  const trapScopedFocus = () => {\n    /**\n     * If we are focusing the overlay, clear\n     * the last focused element so that hitting\n     * tab activates the first focusable element\n     * in the overlay wrapper.\n     */\n    if (lastOverlay === target) {\n      lastOverlay.lastFocus = undefined;\n      /**\n       * Otherwise, we must be focusing an element\n       * inside of the overlay. The two possible options\n       * here are an input/button/etc or the ion-focus-trap\n       * element. The focus trap element is used to prevent\n       * the keyboard focus from leaving the overlay when\n       * using Tab or screen assistants.\n       */\n    }\n    else {\n      /**\n       * We do not want to focus the traps, so get the overlay\n       * wrapper element as the traps live outside of the wrapper.\n       */\n      const overlayRoot = getElementRoot(lastOverlay);\n      if (!overlayRoot.contains(target)) {\n        return;\n      }\n      const overlayWrapper = overlayRoot.querySelector('.ion-overlay-wrapper');\n      if (!overlayWrapper) {\n        return;\n      }\n      /**\n       * If the target is inside the wrapper, let the browser\n       * focus as normal and keep a log of the last focused element.\n       */\n      if (overlayWrapper.contains(target)) {\n        lastOverlay.lastFocus = target;\n      }\n      else {\n        /**\n         * Otherwise, we must have focused one of the focus traps.\n         * We need to wrap the focus to either the first element\n         * or the last element.\n         */\n        /**\n         * Once we call `focusFirstDescendant` and focus the first\n         * descendant, another focus event will fire which will\n         * cause `lastOverlay.lastFocus` to be updated before\n         * we can run the code after that. We will cache the value\n         * here to avoid that.\n         */\n        const lastFocus = lastOverlay.lastFocus;\n        // Focus the first element in the overlay wrapper\n        focusFirstDescendant(overlayWrapper, lastOverlay);\n        /**\n         * If the cached last focused element is the\n         * same as the active element, then we need\n         * to wrap focus to the last descendant. This happens\n         * when the first descendant is focused, and the user\n         * presses Shift + Tab. The previous line will focus\n         * the same descendant again (the first one), causing\n         * last focus to equal the active element.\n         */\n        if (lastFocus === doc.activeElement) {\n          focusLastDescendant(overlayWrapper, lastOverlay);\n        }\n        lastOverlay.lastFocus = doc.activeElement;\n      }\n    }\n  };\n  const trapShadowFocus = () => {\n    /**\n     * If the target is inside the wrapper, let the browser\n     * focus as normal and keep a log of the last focused element.\n     */\n    if (lastOverlay.contains(target)) {\n      lastOverlay.lastFocus = target;\n    }\n    else {\n      /**\n       * Otherwise, we are about to have focus\n       * go out of the overlay. We need to wrap\n       * the focus to either the first element\n       * or the last element.\n       */\n      /**\n       * Once we call `focusFirstDescendant` and focus the first\n       * descendant, another focus event will fire which will\n       * cause `lastOverlay.lastFocus` to be updated before\n       * we can run the code after that. We will cache the value\n       * here to avoid that.\n       */\n      const lastFocus = lastOverlay.lastFocus;\n      // Focus the first element in the overlay wrapper\n      focusFirstDescendant(lastOverlay, lastOverlay);\n      /**\n       * If the cached last focused element is the\n       * same as the active element, then we need\n       * to wrap focus to the last descendant. This happens\n       * when the first descendant is focused, and the user\n       * presses Shift + Tab. The previous line will focus\n       * the same descendant again (the first one), causing\n       * last focus to equal the active element.\n       */\n      if (lastFocus === doc.activeElement) {\n        focusLastDescendant(lastOverlay, lastOverlay);\n      }\n      lastOverlay.lastFocus = doc.activeElement;\n    }\n  };\n  if (lastOverlay.shadowRoot) {\n    trapShadowFocus();\n  }\n  else {\n    trapScopedFocus();\n  }\n};\nconst connectListeners = (doc) => {\n  if (lastId === 0) {\n    lastId = 1;\n    doc.addEventListener('focus', (ev) => {\n      trapKeyboardFocus(ev, doc);\n    }, true);\n    // handle back-button click\n    doc.addEventListener('ionBackButton', ev => {\n      const lastOverlay = getOverlay(doc);\n      if (lastOverlay && lastOverlay.backdropDismiss) {\n        ev.detail.register(OVERLAY_BACK_BUTTON_PRIORITY, () => {\n          return lastOverlay.dismiss(undefined, BACKDROP);\n        });\n      }\n    });\n    // handle ESC to close overlay\n    doc.addEventListener('keyup', ev => {\n      if (ev.key === 'Escape') {\n        const lastOverlay = getOverlay(doc);\n        if (lastOverlay && lastOverlay.backdropDismiss) {\n          lastOverlay.dismiss(undefined, BACKDROP);\n        }\n      }\n    });\n  }\n};\nconst dismissOverlay = (doc, data, role, overlayTag, id) => {\n  const overlay = getOverlay(doc, overlayTag, id);\n  if (!overlay) {\n    return Promise.reject('overlay does not exist');\n  }\n  return overlay.dismiss(data, role);\n};\nconst getOverlays = (doc, selector) => {\n  if (selector === undefined) {\n    selector = 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast';\n  }\n  return Array.from(doc.querySelectorAll(selector))\n    .filter(c => c.overlayIndex > 0);\n};\n/**\n * Returns an overlay element\n * @param doc The document to find the element within.\n * @param overlayTag The selector for the overlay, defaults to Ionic overlay components.\n * @param id The unique identifier for the overlay instance.\n * @returns The overlay element or `undefined` if no overlay element is found.\n */\nconst getOverlay = (doc, overlayTag, id) => {\n  const overlays = getOverlays(doc, overlayTag).filter(o => !isOverlayHidden(o));\n  return (id === undefined)\n    ? overlays[overlays.length - 1]\n    : overlays.find(o => o.id === id);\n};\n/**\n * When an overlay is presented, the main\n * focus is the overlay not the page content.\n * We need to remove the page content from the\n * accessibility tree otherwise when\n * users use \"read screen from top\" gestures with\n * TalkBack and VoiceOver, the screen reader will begin\n * to read the content underneath the overlay.\n *\n * We need a container where all page components\n * exist that is separate from where the overlays\n * are added in the DOM. For most apps, this element\n * is the top most ion-router-outlet. In the event\n * that devs are not using a router,\n * they will need to add the \"ion-view-container-root\"\n * id to the element that contains all of their views.\n *\n * TODO: If Framework supports having multiple top\n * level router outlets we would need to update this.\n * Example: One outlet for side menu and one outlet\n * for main content.\n */\nconst setRootAriaHidden = (hidden = false) => {\n  const root = getAppRoot(document);\n  const viewContainer = root.querySelector('ion-router-outlet, ion-nav, #ion-view-container-root');\n  if (!viewContainer) {\n    return;\n  }\n  if (hidden) {\n    viewContainer.setAttribute('aria-hidden', 'true');\n  }\n  else {\n    viewContainer.removeAttribute('aria-hidden');\n  }\n};\nconst present = async (overlay, name, iosEnterAnimation, mdEnterAnimation, opts) => {\n  var _a, _b;\n  if (overlay.presented) {\n    return;\n  }\n  setRootAriaHidden(true);\n  overlay.presented = true;\n  overlay.willPresent.emit();\n  (_a = overlay.willPresentShorthand) === null || _a === void 0 ? void 0 : _a.emit();\n  const mode = getIonMode(overlay);\n  // get the user's animation fn if one was provided\n  const animationBuilder = (overlay.enterAnimation)\n    ? overlay.enterAnimation\n    : config.get(name, mode === 'ios' ? iosEnterAnimation : mdEnterAnimation);\n  const completed = await overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n  if (completed) {\n    overlay.didPresent.emit();\n    (_b = overlay.didPresentShorthand) === null || _b === void 0 ? void 0 : _b.emit();\n  }\n  /**\n   * When an overlay that steals focus\n   * is dismissed, focus should be returned\n   * to the element that was focused\n   * prior to the overlay opening. Toast\n   * does not steal focus and is excluded\n   * from returning focus as a result.\n   */\n  if (overlay.el.tagName !== 'ION-TOAST') {\n    focusPreviousElementOnDismiss(overlay.el);\n  }\n  if (overlay.keyboardClose) {\n    overlay.el.focus();\n  }\n};\n/**\n * When an overlay component is dismissed,\n * focus should be returned to the element\n * that presented the overlay. Otherwise\n * focus will be set on the body which\n * means that people using screen readers\n * or tabbing will need to re-navigate\n * to where they were before they\n * opened the overlay.\n */\nconst focusPreviousElementOnDismiss = async (overlayEl) => {\n  let previousElement = document.activeElement;\n  if (!previousElement) {\n    return;\n  }\n  const shadowRoot = previousElement && previousElement.shadowRoot;\n  if (shadowRoot) {\n    // If there are no inner focusable elements, just focus the host element.\n    previousElement = shadowRoot.querySelector(innerFocusableQueryString) || previousElement;\n  }\n  await overlayEl.onDidDismiss();\n  previousElement.focus();\n};\nconst dismiss = async (overlay, data, role, name, iosLeaveAnimation, mdLeaveAnimation, opts) => {\n  var _a, _b;\n  if (!overlay.presented) {\n    return false;\n  }\n  setRootAriaHidden(false);\n  overlay.presented = false;\n  try {\n    // Overlay contents should not be clickable during dismiss\n    overlay.el.style.setProperty('pointer-events', 'none');\n    overlay.willDismiss.emit({ data, role });\n    (_a = overlay.willDismissShorthand) === null || _a === void 0 ? void 0 : _a.emit({ data, role });\n    const mode = getIonMode(overlay);\n    const animationBuilder = (overlay.leaveAnimation)\n      ? overlay.leaveAnimation\n      : config.get(name, mode === 'ios' ? iosLeaveAnimation : mdLeaveAnimation);\n    // If dismissed via gesture, no need to play leaving animation again\n    if (role !== 'gesture') {\n      await overlayAnimation(overlay, animationBuilder, overlay.el, opts);\n    }\n    overlay.didDismiss.emit({ data, role });\n    (_b = overlay.didDismissShorthand) === null || _b === void 0 ? void 0 : _b.emit({ data, role });\n    activeAnimations.delete(overlay);\n    /**\n     * Make overlay hidden again in case it is being reused.\n     * We can safely remove pointer-events: none as\n     * overlay-hidden will set display: none.\n     */\n    overlay.el.classList.add('overlay-hidden');\n    overlay.el.style.removeProperty('pointer-events');\n  }\n  catch (err) {\n    console.error(err);\n  }\n  overlay.el.remove();\n  return true;\n};\nconst getAppRoot = (doc) => {\n  return doc.querySelector('ion-app') || doc.body;\n};\nconst overlayAnimation = async (overlay, animationBuilder, baseEl, opts) => {\n  // Make overlay visible in case it's hidden\n  baseEl.classList.remove('overlay-hidden');\n  const aniRoot = overlay.el;\n  const animation = animationBuilder(aniRoot, opts);\n  if (!overlay.animated || !config.getBoolean('animated', true)) {\n    animation.duration(0);\n  }\n  if (overlay.keyboardClose) {\n    animation.beforeAddWrite(() => {\n      const activeElement = baseEl.ownerDocument.activeElement;\n      if (activeElement && activeElement.matches('input,ion-input, ion-textarea')) {\n        activeElement.blur();\n      }\n    });\n  }\n  const activeAni = activeAnimations.get(overlay) || [];\n  activeAnimations.set(overlay, [...activeAni, animation]);\n  await animation.play();\n  return true;\n};\nconst eventMethod = (element, eventName) => {\n  let resolve;\n  const promise = new Promise(r => resolve = r);\n  onceEvent(element, eventName, (event) => {\n    resolve(event.detail);\n  });\n  return promise;\n};\nconst onceEvent = (element, eventName, callback) => {\n  const handler = (ev) => {\n    removeEventListener(element, eventName, handler);\n    callback(ev);\n  };\n  addEventListener(element, eventName, handler);\n};\nconst isCancel = (role) => {\n  return role === 'cancel' || role === BACKDROP;\n};\nconst defaultGate = (h) => h();\n/**\n * Calls a developer provided method while avoiding\n * Angular Zones. Since the handler is provided by\n * the developer, we should throw any errors\n * received so that developer-provided bug\n * tracking software can log it.\n */\nconst safeCall = (handler, arg) => {\n  if (typeof handler === 'function') {\n    const jmp = config.get('_zoneGate', defaultGate);\n    return jmp(() => {\n      try {\n        return handler(arg);\n      }\n      catch (e) {\n        throw e;\n      }\n    });\n  }\n  return undefined;\n};\nconst BACKDROP = 'backdrop';\n\n\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(70655);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(73935);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/cubic-bezier.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Based on:\n * https://stackoverflow.com/questions/7348009/y-coordinate-for-a-given-x-cubic-bezier\n * https://math.stackexchange.com/questions/26846/is-there-an-explicit-form-for-cubic-b%C3%A9zier-curves\n * TODO: Reduce rounding error\n */\n/**\n * EXPERIMENTAL\n * Given a cubic-bezier curve, get the x value (time) given\n * the y value (progression).\n * Ex: cubic-bezier(0.32, 0.72, 0, 1);\n * P0: (0, 0)\n * P1: (0.32, 0.72)\n * P2: (0, 1)\n * P3: (1, 1)\n *\n * If you give a cubic bezier curve that never reaches the\n * provided progression, this function will return an empty array.\n */\nconst getTimeGivenProgression = (p0, p1, p2, p3, progression) => {\n  return solveCubicBezier(p0[1], p1[1], p2[1], p3[1], progression).map(tValue => {\n    return solveCubicParametricEquation(p0[0], p1[0], p2[0], p3[0], tValue);\n  });\n};\n/**\n * Solve a cubic equation in one dimension (time)\n */\nconst solveCubicParametricEquation = (p0, p1, p2, p3, t) => {\n  const partA = (3 * p1) * Math.pow(t - 1, 2);\n  const partB = (-3 * p2 * t) + (3 * p2) + (p3 * t);\n  const partC = p0 * Math.pow(t - 1, 3);\n  return t * (partA + (t * partB)) - partC;\n};\n/**\n * Find the `t` value for a cubic bezier using Cardano's formula\n */\nconst solveCubicBezier = (p0, p1, p2, p3, refPoint) => {\n  p0 -= refPoint;\n  p1 -= refPoint;\n  p2 -= refPoint;\n  p3 -= refPoint;\n  const roots = solveCubicEquation(p3 - 3 * p2 + 3 * p1 - p0, 3 * p2 - 6 * p1 + 3 * p0, 3 * p1 - 3 * p0, p0);\n  return roots.filter(root => root >= 0 && root <= 1);\n};\nconst solveQuadraticEquation = (a, b, c) => {\n  const discriminant = b * b - 4 * a * c;\n  if (discriminant < 0) {\n    return [];\n  }\n  else {\n    return [\n      (-b + Math.sqrt(discriminant)) / (2 * a),\n      (-b - Math.sqrt(discriminant)) / (2 * a)\n    ];\n  }\n};\nconst solveCubicEquation = (a, b, c, d) => {\n  if (a === 0) {\n    return solveQuadraticEquation(b, c, d);\n  }\n  b /= a;\n  c /= a;\n  d /= a;\n  const p = (3 * c - b * b) / 3;\n  const q = (2 * b * b * b - 9 * b * c + 27 * d) / 27;\n  if (p === 0) {\n    return [Math.pow(-q, 1 / 3)];\n  }\n  else if (q === 0) {\n    return [Math.sqrt(-p), -Math.sqrt(-p)];\n  }\n  const discriminant = Math.pow(q / 2, 2) + Math.pow(p / 3, 3);\n  if (discriminant === 0) {\n    return [Math.pow(q / 2, 1 / 2) - b / 3];\n  }\n  else if (discriminant > 0) {\n    return [Math.pow(-(q / 2) + Math.sqrt(discriminant), 1 / 3) - Math.pow((q / 2) + Math.sqrt(discriminant), 1 / 3) - b / 3];\n  }\n  const r = Math.sqrt(Math.pow(-(p / 3), 3));\n  const phi = Math.acos(-(q / (2 * Math.sqrt(Math.pow(-(p / 3), 3)))));\n  const s = 2 * Math.pow(r, 1 / 3);\n  return [\n    s * Math.cos(phi / 3) - b / 3,\n    s * Math.cos((phi + 2 * Math.PI) / 3) - b / 3,\n    s * Math.cos((phi + 4 * Math.PI) / 3) - b / 3\n  ];\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/framework-delegate.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\nconst attachComponent = async (delegate, container, component, cssClasses, componentProps, inline) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (!inline && typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  await new Promise(resolve => (0,helpers.c)(el, resolve));\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\nconst CoreDelegate = () => {\n  let BaseComponent;\n  let Reference;\n  const attachViewToDom = async (parentElement, userComponent, userComponentProps = {}, cssClasses = []) => {\n    BaseComponent = parentElement;\n    /**\n     * If passing in a component via the `component` props\n     * we need to append it inside of our overlay component.\n     */\n    if (userComponent) {\n      /**\n       * If passing in the tag name, create\n       * the element otherwise just get a reference\n       * to the component.\n       */\n      const el = (typeof userComponent === 'string')\n        ? BaseComponent.ownerDocument && BaseComponent.ownerDocument.createElement(userComponent)\n        : userComponent;\n      /**\n       * Add any css classes passed in\n       * via the cssClasses prop on the overlay.\n       */\n      cssClasses.forEach(c => el.classList.add(c));\n      /**\n       * Add any props passed in\n       * via the componentProps prop on the overlay.\n       */\n      Object.assign(el, userComponentProps);\n      /**\n       * Finally, append the component\n       * inside of the overlay component.\n       */\n      BaseComponent.appendChild(el);\n      await new Promise(resolve => componentOnReady(el, resolve));\n    }\n    else if (BaseComponent.children.length > 0) {\n      // If there is no component, then we need to create a new parent\n      // element to apply the css classes to.\n      const el = BaseComponent.ownerDocument && BaseComponent.ownerDocument.createElement('div');\n      cssClasses.forEach(c => el.classList.add(c));\n      // Move each child from the original template to the new parent element.\n      el.append(...BaseComponent.children);\n      // Append the new parent element to the original parent element.\n      BaseComponent.appendChild(el);\n    }\n    /**\n     * Get the root of the app and\n     * add the overlay there.\n     */\n    const app = document.querySelector('ion-app') || document.body;\n    /**\n     * Create a placeholder comment so that\n     * we can return this component to where\n     * it was previously.\n     */\n    Reference = document.createComment('ionic teleport');\n    BaseComponent.parentNode.insertBefore(Reference, BaseComponent);\n    app.appendChild(BaseComponent);\n    return BaseComponent;\n  };\n  const removeViewFromDom = () => {\n    /**\n     * Return component to where it was previously in the DOM.\n     */\n    if (BaseComponent && Reference) {\n      Reference.parentNode.insertBefore(BaseComponent, Reference);\n      Reference.remove();\n    }\n    return Promise.resolve();\n  };\n  return { attachViewToDom, removeViewFromDom };\n};\n\n\n\n// EXTERNAL MODULE: ./node_modules/@ionic/core/components/index4.js\nvar index4 = __webpack_require__(55026);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/ion-router-outlet.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\n\n\n\n\nconst routeOutletCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst RouterOutlet = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = (0,client/* createEvent */.yM)(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = (0,client/* createEvent */.yM)(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = (0,client/* createEvent */.yM)(this, \"ionNavDidChange\", 3);\n    this.gestureOrAnimationInProgress = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = ionic_global_getIonMode(this);\n    /**\n     * If `true`, the router-outlet should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeHandlerChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeHandler !== undefined);\n    }\n  }\n  async connectedCallback() {\n    const onStart = () => {\n      this.gestureOrAnimationInProgress = true;\n      if (this.swipeHandler) {\n        this.swipeHandler.onStart();\n      }\n    };\n    this.gesture = (await __webpack_require__.e(/* import() */ 6167).then(__webpack_require__.bind(__webpack_require__, 86167))).createSwipeBackGesture(this.el, () => !this.gestureOrAnimationInProgress && !!this.swipeHandler && this.swipeHandler.canStart(), () => onStart(), step => this.ani && this.ani.progressStep(step), (shouldComplete, step, dur) => {\n      if (this.ani) {\n        this.ani.onFinish(() => {\n          this.gestureOrAnimationInProgress = false;\n          if (this.swipeHandler) {\n            this.swipeHandler.onEnd(shouldComplete);\n          }\n        }, { oneTimeCallback: true });\n        // Account for rounding errors in JS\n        let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n        if (!shouldComplete) {\n          this.ani.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], step)[0];\n        }\n        else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], step)[0];\n        }\n        this.ani.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n      else {\n        this.gestureOrAnimationInProgress = false;\n      }\n    });\n    this.swipeHandlerChanged();\n  }\n  componentWillLoad() {\n    this.ionNavWillLoad.emit();\n  }\n  disconnectedCallback() {\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /** @internal */\n  async commit(enteringEl, leavingEl, opts) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.transition(enteringEl, leavingEl, opts);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  /** @internal */\n  async setRouteId(id, params, direction, animation) {\n    const changed = await this.setRoot(id, params, {\n      duration: direction === 'root' ? 0 : undefined,\n      direction: direction === 'back' ? 'back' : 'forward',\n      animationBuilder: animation\n    });\n    return {\n      changed,\n      element: this.activeEl\n    };\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.activeEl;\n    return active ? {\n      id: active.tagName,\n      element: active,\n      params: this.activeParams,\n    } : undefined;\n  }\n  async setRoot(component, params, opts) {\n    if (this.activeComponent === component && (0,helpers.s)(params, this.activeParams)) {\n      return false;\n    }\n    // attach entering view to DOM\n    const leavingEl = this.activeEl;\n    const enteringEl = await attachComponent(this.delegate, this.el, component, ['ion-page', 'ion-page-invisible'], params);\n    this.activeComponent = component;\n    this.activeEl = enteringEl;\n    this.activeParams = params;\n    // commit animation\n    await this.commit(enteringEl, leavingEl, opts);\n    await detachComponent(this.delegate, leavingEl);\n    return true;\n  }\n  async transition(enteringEl, leavingEl, opts = {}) {\n    if (leavingEl === enteringEl) {\n      return false;\n    }\n    // emit nav will change event\n    this.ionNavWillChange.emit();\n    const { el, mode } = this;\n    const animated = this.animated && ionic_global_config.getBoolean('animated', true);\n    const animationBuilder = opts.animationBuilder || this.animation || ionic_global_config.get('navAnimation');\n    await (0,index4.t)(Object.assign(Object.assign({ mode,\n      animated,\n      enteringEl,\n      leavingEl, baseEl: el, progressCallback: (opts.progressAnimation\n        ? ani => {\n          /**\n           * Because this progress callback is called asynchronously\n           * it is possible for the gesture to start and end before\n           * the animation is ever set. In that scenario, we should\n           * immediately call progressEnd so that the transition promise\n           * resolves and the gesture does not get locked up.\n           */\n          if (ani !== undefined && !this.gestureOrAnimationInProgress) {\n            this.gestureOrAnimationInProgress = true;\n            ani.onFinish(() => {\n              this.gestureOrAnimationInProgress = false;\n              if (this.swipeHandler) {\n                this.swipeHandler.onEnd(false);\n              }\n            }, { oneTimeCallback: true });\n            /**\n             * Playing animation to beginning\n             * with a duration of 0 prevents\n             * any flickering when the animation\n             * is later cleaned up.\n             */\n            ani.progressEnd(0, 0, 0);\n          }\n          else {\n            this.ani = ani;\n          }\n        }\n        : undefined) }, opts), { animationBuilder }));\n    // emit nav changed event\n    this.ionNavDidChange.emit();\n    return true;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  render() {\n    return ((0,client.h)(\"slot\", null));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeHandler\": [\"swipeHandlerChanged\"]\n  }; }\n  static get style() { return routeOutletCss; }\n}, [1, \"ion-router-outlet\", {\n    \"mode\": [1025],\n    \"delegate\": [16],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"swipeHandler\": [16],\n    \"commit\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64]\n  }]);\nfunction ion_router_outlet_defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-router-outlet\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-router-outlet\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, RouterOutlet);\n      }\n      break;\n  } });\n}\n\nconst IonRouterOutlet = (/* unused pure expression or super */ null && (RouterOutlet));\nconst defineCustomElement = ion_router_outlet_defineCustomElement$1;\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/theme.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/ion-tab-bar.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\n\nconst tabBarIosCss = \":host{padding-left:var(--ion-safe-area-left);padding-right:var(--ion-safe-area-right);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-bottom:var(--ion-safe-area-bottom, 0);border-top:var(--border);background:var(--background);color:var(--color);text-align:center;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:10;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--ion-safe-area-left);padding-inline-start:var(--ion-safe-area-left);-webkit-padding-end:var(--ion-safe-area-right);padding-inline-end:var(--ion-safe-area-right)}}:host(.ion-color) ::slotted(ion-tab-button){--background-focused:var(--ion-color-shade);--color-selected:var(--ion-color-contrast)}:host(.ion-color) ::slotted(.tab-selected){color:var(--ion-color-contrast)}:host(.ion-color),:host(.ion-color) ::slotted(ion-tab-button){color:rgba(var(--ion-color-contrast-rgb), 0.7)}:host(.ion-color),:host(.ion-color) ::slotted(ion-tab-button){background:var(--ion-color-base)}:host(.ion-color) ::slotted(ion-tab-button.ion-focused),:host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused){background:var(--background-focused)}:host(.tab-bar-translucent) ::slotted(ion-tab-button){background:transparent}:host([slot=top]){padding-top:var(--ion-safe-area-top, 0);padding-bottom:0;border-top:0;border-bottom:var(--border)}:host(.tab-bar-hidden){display:none !important}:host{--background:var(--ion-tab-bar-background, var(--ion-color-step-50, #f7f7f7));--background-focused:var(--ion-tab-bar-background-focused, #e0e0e0);--border:0.55px solid var(--ion-tab-bar-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.2))));--color:var(--ion-tab-bar-color, var(--ion-color-step-400, #999999));--color-selected:var(--ion-tab-bar-color-selected, var(--ion-color-primary, #3880ff));height:50px}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){:host(.tab-bar-translucent){--background:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);-webkit-backdrop-filter:saturate(210%) blur(20px);backdrop-filter:saturate(210%) blur(20px)}:host(.ion-color.tab-bar-translucent){background:rgba(var(--ion-color-base-rgb), 0.8)}:host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused){background:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.6)}}\";\n\nconst tabBarMdCss = \":host{padding-left:var(--ion-safe-area-left);padding-right:var(--ion-safe-area-right);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-bottom:var(--ion-safe-area-bottom, 0);border-top:var(--border);background:var(--background);color:var(--color);text-align:center;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:10;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--ion-safe-area-left);padding-inline-start:var(--ion-safe-area-left);-webkit-padding-end:var(--ion-safe-area-right);padding-inline-end:var(--ion-safe-area-right)}}:host(.ion-color) ::slotted(ion-tab-button){--background-focused:var(--ion-color-shade);--color-selected:var(--ion-color-contrast)}:host(.ion-color) ::slotted(.tab-selected){color:var(--ion-color-contrast)}:host(.ion-color),:host(.ion-color) ::slotted(ion-tab-button){color:rgba(var(--ion-color-contrast-rgb), 0.7)}:host(.ion-color),:host(.ion-color) ::slotted(ion-tab-button){background:var(--ion-color-base)}:host(.ion-color) ::slotted(ion-tab-button.ion-focused),:host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused){background:var(--background-focused)}:host(.tab-bar-translucent) ::slotted(ion-tab-button){background:transparent}:host([slot=top]){padding-top:var(--ion-safe-area-top, 0);padding-bottom:0;border-top:0;border-bottom:var(--border)}:host(.tab-bar-hidden){display:none !important}:host{--background:var(--ion-tab-bar-background, var(--ion-background-color, #fff));--background-focused:var(--ion-tab-bar-background-focused, #e0e0e0);--border:1px solid var(--ion-tab-bar-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.07))));--color:var(--ion-tab-bar-color, var(--ion-color-step-600, #666666));--color-selected:var(--ion-tab-bar-color-selected, var(--ion-color-primary, #3880ff));height:56px}\";\n\nconst TabBar = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionTabBarChanged = (0,client/* createEvent */.yM)(this, \"ionTabBarChanged\", 7);\n    this.keyboardVisible = false;\n    /**\n     * If `true`, the tab bar will be translucent.\n     * Only applies when the mode is `\"ios\"` and the device supports\n     * [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\n     */\n    this.translucent = false;\n  }\n  selectedTabChanged() {\n    if (this.selectedTab !== undefined) {\n      this.ionTabBarChanged.emit({\n        tab: this.selectedTab\n      });\n    }\n  }\n  componentWillLoad() {\n    this.selectedTabChanged();\n  }\n  connectedCallback() {\n    if (typeof window !== 'undefined') {\n      this.keyboardWillShowHandler = () => {\n        if (this.el.getAttribute('slot') !== 'top') {\n          this.keyboardVisible = true;\n        }\n      };\n      this.keyboardWillHideHandler = () => {\n        setTimeout(() => this.keyboardVisible = false, 50);\n      };\n      window.addEventListener('keyboardWillShow', this.keyboardWillShowHandler);\n      window.addEventListener('keyboardWillHide', this.keyboardWillHideHandler);\n    }\n  }\n  disconnectedCallback() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('keyboardWillShow', this.keyboardWillShowHandler);\n      window.removeEventListener('keyboardWillHide', this.keyboardWillHideHandler);\n      this.keyboardWillShowHandler = this.keyboardWillHideHandler = undefined;\n    }\n  }\n  render() {\n    const { color, translucent, keyboardVisible } = this;\n    const mode = ionic_global_getIonMode(this);\n    return ((0,client.h)(client/* Host */.AA, { role: \"tablist\", \"aria-hidden\": keyboardVisible ? 'true' : null, class: createColorClasses(color, {\n        [mode]: true,\n        'tab-bar-translucent': translucent,\n        'tab-bar-hidden': keyboardVisible,\n      }) }, (0,client.h)(\"slot\", null)));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"selectedTab\": [\"selectedTabChanged\"]\n  }; }\n  static get style() { return {\n    ios: tabBarIosCss,\n    md: tabBarMdCss\n  }; }\n}, [33, \"ion-tab-bar\", {\n    \"color\": [513],\n    \"selectedTab\": [1, \"selected-tab\"],\n    \"translucent\": [4],\n    \"keyboardVisible\": [32]\n  }]);\nfunction ion_tab_bar_defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-tab-bar\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-tab-bar\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, TabBar);\n      }\n      break;\n  } });\n}\n\nconst IonTabBar = (/* unused pure expression or super */ null && (TabBar));\nconst ion_tab_bar_defineCustomElement = ion_tab_bar_defineCustomElement$1;\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/ripple-effect.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\nconst rippleEffectCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:strict;pointer-events:none}:host(.unbounded){contain:layout size style}.ripple-effect{border-radius:50%;position:absolute;background-color:currentColor;color:inherit;contain:strict;opacity:0;-webkit-animation:225ms rippleAnimation forwards, 75ms fadeInAnimation forwards;animation:225ms rippleAnimation forwards, 75ms fadeInAnimation forwards;will-change:transform, opacity;pointer-events:none}.fade-out{-webkit-transform:translate(var(--translate-end)) scale(var(--final-scale, 1));transform:translate(var(--translate-end)) scale(var(--final-scale, 1));-webkit-animation:150ms fadeOutAnimation forwards;animation:150ms fadeOutAnimation forwards}@-webkit-keyframes rippleAnimation{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transform:scale(1);transform:scale(1)}to{-webkit-transform:translate(var(--translate-end)) scale(var(--final-scale, 1));transform:translate(var(--translate-end)) scale(var(--final-scale, 1))}}@keyframes rippleAnimation{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transform:scale(1);transform:scale(1)}to{-webkit-transform:translate(var(--translate-end)) scale(var(--final-scale, 1));transform:translate(var(--translate-end)) scale(var(--final-scale, 1))}}@-webkit-keyframes fadeInAnimation{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:0.16}}@keyframes fadeInAnimation{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:0.16}}@-webkit-keyframes fadeOutAnimation{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0.16}to{opacity:0}}@keyframes fadeOutAnimation{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0.16}to{opacity:0}}\";\n\nconst RippleEffect = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    /**\n     * Sets the type of ripple-effect:\n     *\n     * - `bounded`: the ripple effect expands from the user's click position\n     * - `unbounded`: the ripple effect expands from the center of the button and overflows the container.\n     *\n     * NOTE: Surfaces for bounded ripples should have the overflow property set to hidden,\n     * while surfaces for unbounded ripples should have it set to visible.\n     */\n    this.type = 'bounded';\n  }\n  /**\n   * Adds the ripple effect to the parent element.\n   *\n   * @param x The horizontal coordinate of where the ripple should start.\n   * @param y The vertical coordinate of where the ripple should start.\n   */\n  async addRipple(x, y) {\n    return new Promise(resolve => {\n      (0,client/* readTask */.wj)(() => {\n        const rect = this.el.getBoundingClientRect();\n        const width = rect.width;\n        const height = rect.height;\n        const hypotenuse = Math.sqrt(width * width + height * height);\n        const maxDim = Math.max(height, width);\n        const maxRadius = this.unbounded ? maxDim : hypotenuse + PADDING;\n        const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);\n        const finalScale = maxRadius / initialSize;\n        let posX = x - rect.left;\n        let posY = y - rect.top;\n        if (this.unbounded) {\n          posX = width * 0.5;\n          posY = height * 0.5;\n        }\n        const styleX = posX - initialSize * 0.5;\n        const styleY = posY - initialSize * 0.5;\n        const moveX = width * 0.5 - posX;\n        const moveY = height * 0.5 - posY;\n        (0,client/* writeTask */.Iu)(() => {\n          const div = document.createElement('div');\n          div.classList.add('ripple-effect');\n          const style = div.style;\n          style.top = styleY + 'px';\n          style.left = styleX + 'px';\n          style.width = style.height = initialSize + 'px';\n          style.setProperty('--final-scale', `${finalScale}`);\n          style.setProperty('--translate-end', `${moveX}px, ${moveY}px`);\n          const container = this.el.shadowRoot || this.el;\n          container.appendChild(div);\n          setTimeout(() => {\n            resolve(() => {\n              removeRipple(div);\n            });\n          }, 225 + 100);\n        });\n      });\n    });\n  }\n  get unbounded() {\n    return this.type === 'unbounded';\n  }\n  render() {\n    const mode = ionic_global_getIonMode(this);\n    return ((0,client.h)(client/* Host */.AA, { role: \"presentation\", class: {\n        [mode]: true,\n        'unbounded': this.unbounded\n      } }));\n  }\n  get el() { return this; }\n  static get style() { return rippleEffectCss; }\n}, [1, \"ion-ripple-effect\", {\n    \"type\": [1],\n    \"addRipple\": [64]\n  }]);\nconst removeRipple = (ripple) => {\n  ripple.classList.add('fade-out');\n  setTimeout(() => {\n    ripple.remove();\n  }, 200);\n};\nconst PADDING = 10;\nconst INITIAL_ORIGIN_SCALE = 0.5;\nfunction ripple_effect_defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-ripple-effect\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-ripple-effect\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, RippleEffect);\n      }\n      break;\n  } });\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/components/ion-tab-button.js\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n\n\n\nconst tabButtonIosCss = \":host{--ripple-color:var(--color-selected);--background-focused-opacity:1;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;height:100%;outline:none;background:var(--background);color:var(--color)}.button-native{border-radius:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-align:inherit;align-items:inherit;-ms-flex-pack:inherit;justify-content:inherit;width:100%;height:100%;border:0;outline:none;background:transparent;text-decoration:none;cursor:pointer;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-drag:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:inherit;align-items:inherit;-ms-flex-pack:inherit;justify-content:inherit;width:100%;height:100%;z-index:1}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}@media (any-hover: hover){a:hover{color:var(--color-selected)}}:host(.tab-selected){color:var(--color-selected)}:host(.tab-hidden){display:none !important}:host(.tab-disabled){pointer-events:none;opacity:0.4}::slotted(ion-label),::slotted(ion-icon){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box}::slotted(ion-label){-ms-flex-order:0;order:0}::slotted(ion-icon){-ms-flex-order:-1;order:-1;height:1em}:host(.tab-has-label-only) ::slotted(ion-label){white-space:normal}::slotted(ion-badge){-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;z-index:1}:host(.tab-layout-icon-start){-ms-flex-direction:row;flex-direction:row}:host(.tab-layout-icon-end){-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.tab-layout-icon-bottom){-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.tab-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.tab-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color)}:host{--padding-top:0;--padding-end:2px;--padding-bottom:0;--padding-start:2px;max-width:240px;font-size:10px}::slotted(ion-badge){padding-left:6px;padding-right:6px;padding-top:1px;padding-bottom:1px;left:calc(50% + 6px);top:4px;height:auto;font-size:12px;line-height:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){::slotted(ion-badge){padding-left:unset;padding-right:unset;-webkit-padding-start:6px;padding-inline-start:6px;-webkit-padding-end:6px;padding-inline-end:6px}}[dir=rtl] ::slotted(ion-badge),:host-context([dir=rtl]) ::slotted(ion-badge){left:unset;right:unset;right:calc(50% + 6px)}::slotted(ion-icon){margin-top:2px;margin-bottom:2px;font-size:30px}::slotted(ion-icon::before){vertical-align:top}::slotted(ion-label){margin-top:0;margin-bottom:1px;min-height:11px;font-weight:500}:host(.tab-has-label-only) ::slotted(ion-label){margin-left:0;margin-right:0;margin-top:2px;margin-bottom:2px;font-size:12px;font-size:14px;line-height:1.1}:host(.tab-layout-icon-end) ::slotted(ion-label),:host(.tab-layout-icon-start) ::slotted(ion-label),:host(.tab-layout-icon-hide) ::slotted(ion-label){margin-top:2px;margin-bottom:2px;font-size:14px;line-height:1.1}:host(.tab-layout-icon-end) ::slotted(ion-icon),:host(.tab-layout-icon-start) ::slotted(ion-icon){min-width:24px;height:26px;margin-top:2px;margin-bottom:1px;font-size:24px}:host(.tab-layout-icon-bottom) ::slotted(ion-badge){left:calc(50% + 12px)}:host-context([dir=rtl]):host(.tab-layout-icon-bottom) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-bottom ::slotted(ion-badge){left:unset;right:unset;right:calc(50% + 12px)}:host(.tab-layout-icon-bottom) ::slotted(ion-icon){margin-top:0;margin-bottom:1px}:host(.tab-layout-icon-bottom) ::slotted(ion-label){margin-top:4px}:host(.tab-layout-icon-start) ::slotted(ion-badge),:host(.tab-layout-icon-end) ::slotted(ion-badge){left:calc(50% + 35px);top:10px}:host-context([dir=rtl]):host(.tab-layout-icon-start) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-start ::slotted(ion-badge),:host-context([dir=rtl]):host(.tab-layout-icon-end) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-end ::slotted(ion-badge){left:unset;right:unset;right:calc(50% + 35px)}:host(.tab-layout-icon-hide) ::slotted(ion-badge),:host(.tab-has-label-only) ::slotted(ion-badge){left:calc(50% + 30px);top:10px}:host-context([dir=rtl]):host(.tab-layout-icon-hide) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-hide ::slotted(ion-badge),:host-context([dir=rtl]):host(.tab-has-label-only) ::slotted(ion-badge),:host-context([dir=rtl]).tab-has-label-only ::slotted(ion-badge){left:unset;right:unset;right:calc(50% + 30px)}:host(.tab-layout-label-hide) ::slotted(ion-badge),:host(.tab-has-icon-only) ::slotted(ion-badge){top:10px}:host(.tab-layout-label-hide) ::slotted(ion-icon){margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n\nconst tabButtonMdCss = \":host{--ripple-color:var(--color-selected);--background-focused-opacity:1;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;height:100%;outline:none;background:var(--background);color:var(--color)}.button-native{border-radius:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-align:inherit;align-items:inherit;-ms-flex-pack:inherit;justify-content:inherit;width:100%;height:100%;border:0;outline:none;background:transparent;text-decoration:none;cursor:pointer;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-drag:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:inherit;align-items:inherit;-ms-flex-pack:inherit;justify-content:inherit;width:100%;height:100%;z-index:1}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}@media (any-hover: hover){a:hover{color:var(--color-selected)}}:host(.tab-selected){color:var(--color-selected)}:host(.tab-hidden){display:none !important}:host(.tab-disabled){pointer-events:none;opacity:0.4}::slotted(ion-label),::slotted(ion-icon){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box}::slotted(ion-label){-ms-flex-order:0;order:0}::slotted(ion-icon){-ms-flex-order:-1;order:-1;height:1em}:host(.tab-has-label-only) ::slotted(ion-label){white-space:normal}::slotted(ion-badge){-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;z-index:1}:host(.tab-layout-icon-start){-ms-flex-direction:row;flex-direction:row}:host(.tab-layout-icon-end){-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.tab-layout-icon-bottom){-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.tab-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.tab-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color)}:host{--padding-top:0;--padding-end:12px;--padding-bottom:0;--padding-start:12px;max-width:168px;font-size:12px;font-weight:normal;letter-spacing:0.03em}::slotted(ion-label){margin-left:0;margin-right:0;margin-top:2px;margin-bottom:2px;text-transform:none}::slotted(ion-icon){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;-webkit-transform-origin:center center;transform-origin:center center;font-size:22px}[dir=rtl] ::slotted(ion-icon),:host-context([dir=rtl]) ::slotted(ion-icon){-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}::slotted(ion-badge){border-radius:8px;padding-left:2px;padding-right:2px;padding-top:3px;padding-bottom:2px;left:calc(50% + 6px);top:8px;min-width:12px;font-size:8px;font-weight:normal}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){::slotted(ion-badge){padding-left:unset;padding-right:unset;-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px}}[dir=rtl] ::slotted(ion-badge),:host-context([dir=rtl]) ::slotted(ion-badge){left:unset;right:unset;right:calc(50% + 6px)}::slotted(ion-badge:empty){display:block;min-width:8px;height:8px}:host(.tab-layout-icon-top) ::slotted(ion-icon){margin-top:6px;margin-bottom:2px}:host(.tab-layout-icon-top) ::slotted(ion-label){margin-top:0;margin-bottom:6px}:host(.tab-layout-icon-bottom) ::slotted(ion-badge){left:70%;top:8px}:host-context([dir=rtl]):host(.tab-layout-icon-bottom) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-bottom ::slotted(ion-badge){left:unset;right:unset;right:70%}:host(.tab-layout-icon-bottom) ::slotted(ion-icon){margin-top:0;margin-bottom:6px}:host(.tab-layout-icon-bottom) ::slotted(ion-label){margin-top:6px;margin-bottom:0}:host(.tab-layout-icon-start) ::slotted(ion-badge),:host(.tab-layout-icon-end) ::slotted(ion-badge){left:80%;top:16px}:host-context([dir=rtl]):host(.tab-layout-icon-start) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-start ::slotted(ion-badge),:host-context([dir=rtl]):host(.tab-layout-icon-end) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-end ::slotted(ion-badge){left:unset;right:unset;right:80%}:host(.tab-layout-icon-start) ::slotted(ion-icon){margin-right:6px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.tab-layout-icon-start) ::slotted(ion-icon){margin-right:unset;-webkit-margin-end:6px;margin-inline-end:6px}}:host(.tab-layout-icon-end) ::slotted(ion-icon){margin-left:6px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.tab-layout-icon-end) ::slotted(ion-icon){margin-left:unset;-webkit-margin-start:6px;margin-inline-start:6px}}:host(.tab-layout-icon-hide) ::slotted(ion-badge),:host(.tab-has-label-only) ::slotted(ion-badge){left:70%;top:16px}:host-context([dir=rtl]):host(.tab-layout-icon-hide) ::slotted(ion-badge),:host-context([dir=rtl]).tab-layout-icon-hide ::slotted(ion-badge),:host-context([dir=rtl]):host(.tab-has-label-only) ::slotted(ion-badge),:host-context([dir=rtl]).tab-has-label-only ::slotted(ion-badge){left:unset;right:unset;right:70%}:host(.tab-layout-icon-hide) ::slotted(ion-label),:host(.tab-has-label-only) ::slotted(ion-label){margin-top:0;margin-bottom:0}:host(.tab-layout-label-hide) ::slotted(ion-badge),:host(.tab-has-icon-only) ::slotted(ion-badge){top:16px}:host(.tab-layout-label-hide) ::slotted(ion-icon),:host(.tab-has-icon-only) ::slotted(ion-icon){margin-top:0;margin-bottom:0;font-size:24px}\";\n\nconst TabButton = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionTabButtonClick = (0,client/* createEvent */.yM)(this, \"ionTabButtonClick\", 7);\n    /**\n     * If `true`, the user cannot interact with the tab button.\n     */\n    this.disabled = false;\n    /**\n     * The selected tab component\n     */\n    this.selected = false;\n    this.onKeyUp = (ev) => {\n      if (ev.key === 'Enter' || ev.key === ' ') {\n        this.selectTab(ev);\n      }\n    };\n    this.onClick = (ev) => {\n      this.selectTab(ev);\n    };\n  }\n  onTabBarChanged(ev) {\n    const dispatchedFrom = ev.target;\n    const parent = this.el.parentElement;\n    if ((ev.composedPath && ev.composedPath().includes(parent)) || (dispatchedFrom && dispatchedFrom.contains(this.el))) {\n      this.selected = this.tab === ev.detail.tab;\n    }\n  }\n  componentWillLoad() {\n    if (this.layout === undefined) {\n      this.layout = ionic_global_config.get('tabButtonLayout', 'icon-top');\n    }\n  }\n  selectTab(ev) {\n    if (this.tab !== undefined) {\n      if (!this.disabled) {\n        this.ionTabButtonClick.emit({\n          tab: this.tab,\n          href: this.href,\n          selected: this.selected\n        });\n      }\n      ev.preventDefault();\n    }\n  }\n  get hasLabel() {\n    return !!this.el.querySelector('ion-label');\n  }\n  get hasIcon() {\n    return !!this.el.querySelector('ion-icon');\n  }\n  get tabIndex() {\n    if (this.disabled) {\n      return -1;\n    }\n    const hasTabIndex = this.el.hasAttribute('tabindex');\n    if (hasTabIndex) {\n      return this.el.getAttribute('tabindex');\n    }\n    return 0;\n  }\n  render() {\n    const { disabled, hasIcon, hasLabel, tabIndex, href, rel, target, layout, selected, tab } = this;\n    const mode = ionic_global_getIonMode(this);\n    const attrs = {\n      download: this.download,\n      href,\n      rel,\n      target\n    };\n    return ((0,client.h)(client/* Host */.AA, { onClick: this.onClick, onKeyup: this.onKeyUp, role: \"tab\", tabindex: tabIndex, \"aria-selected\": selected ? 'true' : null, id: tab !== undefined ? `tab-button-${tab}` : null, class: {\n        [mode]: true,\n        'tab-selected': selected,\n        'tab-disabled': disabled,\n        'tab-has-label': hasLabel,\n        'tab-has-icon': hasIcon,\n        'tab-has-label-only': hasLabel && !hasIcon,\n        'tab-has-icon-only': hasIcon && !hasLabel,\n        [`tab-layout-${layout}`]: true,\n        'ion-activatable': true,\n        'ion-selectable': true,\n        'ion-focusable': true\n      } }, (0,client.h)(\"a\", Object.assign({}, attrs, { tabIndex: -1, class: \"button-native\", part: \"native\" }), (0,client.h)(\"span\", { class: \"button-inner\" }, (0,client.h)(\"slot\", null)), mode === 'md' && (0,client.h)(\"ion-ripple-effect\", { type: \"unbounded\" }))));\n  }\n  get el() { return this; }\n  static get style() { return {\n    ios: tabButtonIosCss,\n    md: tabButtonMdCss\n  }; }\n}, [33, \"ion-tab-button\", {\n    \"disabled\": [4],\n    \"download\": [1],\n    \"href\": [1],\n    \"rel\": [1],\n    \"layout\": [1025],\n    \"selected\": [1028],\n    \"tab\": [1],\n    \"target\": [1]\n  }, [[8, \"ionTabBarChanged\", \"onTabBarChanged\"]]]);\nfunction ion_tab_button_defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-tab-button\", \"ion-ripple-effect\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-tab-button\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, TabButton);\n      }\n      break;\n    case \"ion-ripple-effect\":\n      if (!customElements.get(tagName)) {\n        ripple_effect_defineCustomElement();\n      }\n      break;\n  } });\n}\n\nconst IonTabButton = (/* unused pure expression or super */ null && (TabButton));\nconst ion_tab_button_defineCustomElement = ion_tab_button_defineCustomElement$1;\n\n\n\n;// CONCATENATED MODULE: ./node_modules/ionicons/node_modules/@stencil/core/internal/app-data/index.js\nconst app_data_BUILD = {\n    allRenderFn: false,\n    cmpDidLoad: true,\n    cmpDidUnload: false,\n    cmpDidUpdate: true,\n    cmpDidRender: true,\n    cmpWillLoad: true,\n    cmpWillUpdate: true,\n    cmpWillRender: true,\n    connectedCallback: true,\n    disconnectedCallback: true,\n    element: true,\n    event: true,\n    hasRenderFn: true,\n    lifecycle: true,\n    hostListener: true,\n    hostListenerTargetWindow: true,\n    hostListenerTargetDocument: true,\n    hostListenerTargetBody: true,\n    hostListenerTargetParent: false,\n    hostListenerTarget: true,\n    member: true,\n    method: true,\n    mode: true,\n    observeAttribute: true,\n    prop: true,\n    propMutable: true,\n    reflect: true,\n    scoped: true,\n    shadowDom: true,\n    slot: true,\n    cssAnnotations: true,\n    state: true,\n    style: true,\n    svg: true,\n    updatable: true,\n    vdomAttribute: true,\n    vdomXlink: true,\n    vdomClass: true,\n    vdomFunctional: true,\n    vdomKey: true,\n    vdomListener: true,\n    vdomRef: true,\n    vdomPropOrAttr: true,\n    vdomRender: true,\n    vdomStyle: true,\n    vdomText: true,\n    watchCallback: true,\n    taskQueue: true,\n    hotModuleReplacement: false,\n    isDebug: false,\n    isDev: false,\n    isTesting: false,\n    hydrateServerSide: false,\n    hydrateClientSide: false,\n    lifecycleDOMEvents: false,\n    lazyLoad: false,\n    profile: false,\n    slotRelocation: true,\n    appendChildSlotFix: false,\n    cloneNodeFix: false,\n    hydratedAttribute: false,\n    hydratedClass: true,\n    safari10: false,\n    scriptDataOpts: false,\n    scopedSlotTextContentFix: false,\n    shadowDomShim: false,\n    slotChildNodesFix: false,\n    invisiblePrehydration: true,\n    propBoolean: true,\n    propNumber: true,\n    propString: true,\n    cssVarShim: false,\n    constructableCSS: true,\n    cmpShouldUpdate: true,\n    devTools: false,\n    dynamicImportShim: false,\n    shadowDelegatesFocus: true,\n    initializeNextTick: false,\n    asyncLoading: false,\n    asyncQueue: false,\n    transformTagName: false,\n    attachStyles: true,\n};\nconst Env = {};\nconst NAMESPACE = /* default */ 'app';\n\n\n\n;// CONCATENATED MODULE: ./node_modules/ionicons/node_modules/@stencil/core/internal/client/index.js\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.12.1 | MIT Licensed | https://stenciljs.com\n */\n\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = app_data_BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst client_setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = app_data_BUILD.shadowDomShim && app_data_BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = app_data_BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst client_Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (app_data_BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (app_data_BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = app_data_BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (app_data_BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (app_data_BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */)\n        return doc;\n    if (app_data_BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */)\n        return win;\n    if (app_data_BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */)\n        return doc.body;\n    if (app_data_BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* Passive */) !== 0,\n        capture: (flags & 2 /* Capture */) !== 0,\n    })\n    : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    if (app_data_BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (app_data_BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */),\n            hasConnected: !!(flags & 1 /* hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* isWatchReady */),\n            isListenReady: !!(flags & 256 /* isListenReady */),\n            needsRerender: !!(flags & 512 /* needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    if (!app_data_BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (app_data_BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (app_data_BUILD.hydrateServerSide || app_data_BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (app_data_BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(app_data_BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((app_data_BUILD.shadowDom || app_data_BUILD.scoped) && app_data_BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (app_data_BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (app_data_BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst client_setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (app_data_BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (app_data_BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (app_data_BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (app_data_BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (app_data_BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (app_data_BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (app_data_BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (app_data_BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (app_data_BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (app_data_BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (app_data_BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (app_data_BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (app_data_BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (app_data_BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (app_data_BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!app_data_BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!app_data_BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (app_data_BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (app_data_BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (app_data_BUILD.vdomListener &&\n            (app_data_BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (app_data_BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (app_data_BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (app_data_BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (app_data_BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (app_data_BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (app_data_BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (app_data_BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (app_data_BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (app_data_BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            app_data_BUILD.isDebug || app_data_BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (app_data_BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (app_data_BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, app_data_BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(app_data_BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (app_data_BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (app_data_BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((app_data_BUILD.shadowDom || app_data_BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (app_data_BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (app_data_BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((app_data_BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (app_data_BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, app_data_BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (app_data_BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (app_data_BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (app_data_BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (app_data_BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (app_data_BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (app_data_BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (app_data_BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (app_data_BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (app_data_BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!app_data_BUILD.vdomText || text === null) {\n        if (app_data_BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        if (app_data_BUILD.vdomAttribute || app_data_BUILD.reflect) {\n            if (app_data_BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (app_data_BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (app_data_BUILD.updatable && app_data_BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (app_data_BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (app_data_BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (app_data_BUILD.vdomText && app_data_BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (app_data_BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (app_data_BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (app_data_BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (app_data_BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (app_data_BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (app_data_BUILD.scoped || app_data_BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (app_data_BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (app_data_BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        app_data_BUILD.isDebug || app_data_BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (app_data_BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (app_data_BUILD.taskQueue && app_data_BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (app_data_BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return app_data_BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (app_data_BUILD.lazyLoad && app_data_BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => client_safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (app_data_BUILD.cmpWillLoad) {\n            promise = client_safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (app_data_BUILD.cmpWillUpdate) {\n            promise = client_safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (app_data_BUILD.cmpWillRender) {\n        promise = then(promise, () => client_safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (app_data_BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (app_data_BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    if (app_data_BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (app_data_BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    if (app_data_BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (app_data_BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (app_data_BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = app_data_BUILD.allRenderFn ? true : false;\n    const lazyLoad = app_data_BUILD.lazyLoad ? true : false;\n    const taskQueue = app_data_BUILD.taskQueue ? true : false;\n    const updatable = app_data_BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        if (app_data_BUILD.hasRenderFn || app_data_BUILD.reflect) {\n            if (app_data_BUILD.vdomRender || app_data_BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (app_data_BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (app_data_BUILD.cmpDidRender) {\n        if (app_data_BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */;\n        }\n        client_safeCall(instance, 'componentDidRender');\n        if (app_data_BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        if (app_data_BUILD.asyncLoading && app_data_BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (app_data_BUILD.cmpDidLoad) {\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n            }\n            client_safeCall(instance, 'componentDidLoad');\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (app_data_BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (app_data_BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */;\n            }\n            client_safeCall(instance, 'componentDidUpdate');\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (app_data_BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (app_data_BUILD.method && app_data_BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (app_data_BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (app_data_BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (app_data_BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (app_data_BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst client_safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (app_data_BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => app_data_BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : app_data_BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = app_data_BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (app_data_BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (app_data_BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (app_data_BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (app_data_BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (app_data_BUILD.propBoolean && propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (app_data_BUILD.propNumber && propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (app_data_BUILD.propString && propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = app_data_BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if ((!app_data_BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (app_data_BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!app_data_BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (app_data_BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (app_data_BUILD.updatable &&\n                (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                if (app_data_BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (app_data_BUILD.member && cmpMeta.$members$) {\n        if (app_data_BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((app_data_BUILD.prop || app_data_BUILD.state) &&\n                (memberFlags & 31 /* Prop */ ||\n                    ((!app_data_BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (app_data_BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (app_data_BUILD.lazyLoad &&\n                app_data_BUILD.method &&\n                flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (app_data_BUILD.observeAttribute && (!app_data_BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    \x3c!-- this component has _not_ been upgraded yet --\x3e\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    <\/script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (app_data_BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((app_data_BUILD.lazyLoad || app_data_BUILD.hydrateServerSide || app_data_BUILD.style) &&\n        (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        if (app_data_BUILD.lazyLoad || app_data_BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((app_data_BUILD.isDev || app_data_BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (app_data_BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (app_data_BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (app_data_BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (app_data_BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            if (app_data_BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* isWatchReady */));\n        }\n        if (app_data_BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (app_data_BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (app_data_BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!app_data_BUILD.hydrateServerSide &&\n                    app_data_BUILD.shadowDom &&\n                    app_data_BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                    style = await __webpack_require__.e(/* import() */ 5880).then(__webpack_require__.bind(__webpack_require__, 5880)).then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (app_data_BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (app_data_BUILD.lazyLoad && app_data_BUILD.connectedCallback) {\n        client_safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (app_data_BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            if (app_data_BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (app_data_BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = app_data_BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (app_data_BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (app_data_BUILD.hydrateServerSide ||\n                    ((app_data_BUILD.slot || app_data_BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (app_data_BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((app_data_BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (app_data_BUILD.prop && !app_data_BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (app_data_BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(app_data_BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (app_data_BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (app_data_BUILD.lazyLoad && app_data_BUILD.disconnectedCallback) {\n            client_safeCall(instance, 'disconnectedCallback');\n        }\n        if (app_data_BUILD.cmpDidUnload) {\n            client_safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst client_defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (app_data_BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (app_data_BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (app_data_BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (app_data_BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (app_data_BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (app_data_BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (app_data_BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (app_data_BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            let stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in client_Context) {\n        return client_Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst client_Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (app_data_BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (app_data_BUILD.method && app_data_BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (app_data_BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = app_data_BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (app_data_BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !app_data_BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    return __webpack_require__(11875)(`./${bundleId}.entry.js${app_data_BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!app_data_BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (app_data_BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (app_data_BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ (/* unused pure expression or super */ null && (queueTask(queueDomReads, false)));\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: app_data_BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: app_data_BUILD.isTesting ? true : false,\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/ionicons/components/utils.js\n\n\nlet CACHED_MAP;\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  }\n  else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nconst addIcons = (icons) => {\n  const map = getIconMap();\n  Object.keys(icons).forEach(name => map.set(name, icons[name]));\n};\nconst getUrl = (i) => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  return getAssetPath(`svg/${iconName}.svg`);\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  }\n  else if (md && mode === 'md') {\n    iconName = toLower(md);\n  }\n  else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nconst getSrc = (src) => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = (val) => typeof val === 'string';\nconst toLower = (val) => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/ionicons/components/ion-icon.js\n\n\n\nconst validateContent = (svgContent) => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = (elm) => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const val = elm.attributes[i].value;\n      if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nconst getSvgContent = (url, sanitize) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n  if (!req) {\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n      // we don't already have a request\n      req = fetch(url).then((rsp) => {\n        if (rsp.ok) {\n          return rsp.text().then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n              svgContent = validateContent(svgContent);\n            }\n            ioniconContent.set(url, svgContent || '');\n          });\n        }\n        ioniconContent.set(url, '');\n      });\n      // cache for the same requests\n      requests.set(url, req);\n    }\n    else {\n      // set to empty for ssr scenarios and resolve promise\n      ioniconContent.set(url, '');\n      return Promise.resolve();\n    }\n  }\n  return req;\n};\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:32px;stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}:host(.flip-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}:host(.icon-small){font-size:18px !important}:host(.icon-large){font-size:32px !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nlet Icon = class extends H {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = ion_icon_getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n    this.hasAriaHidden = () => {\n      const { el } = this;\n      return el.hasAttribute('aria-hidden') && el.getAttribute('aria-hidden') === 'true';\n    };\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  waitUntilVisible(el, rootMargin, cb) {\n    if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {\n      const io = (this.io = new window.IntersectionObserver((data) => {\n        if (data[0].isIntersecting) {\n          io.disconnect();\n          this.io = undefined;\n          cb();\n        }\n      }, { rootMargin }));\n      io.observe(el);\n    }\n    else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        }\n        else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n        }\n      }\n    }\n    const label = this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n    /**\n     * Come up with a default label\n     * in case user does not provide their own.\n     */\n    if (label) {\n      this.ariaLabel = label.replace(/\\-/g, ' ');\n    }\n  }\n  render() {\n    const { iconName, ariaLabel, inheritedAttributes } = this;\n    const mode = this.mode || 'md';\n    const flipRtl = this.flipRtl ||\n      (iconName &&\n        (iconName.indexOf('arrow') > -1 || iconName.indexOf('chevron') > -1) &&\n        this.flipRtl !== false);\n    /**\n     * Only set the aria-label if a) we have generated\n     * one for the icon and if aria-hidden is not set to \"true\".\n     * If developer wants to set their own aria-label, then\n     * inheritedAttributes down below will override whatever\n     * default label we have set.\n     */\n    return (h(Host, Object.assign({ \"aria-label\": ariaLabel !== undefined && !this.hasAriaHidden() ? ariaLabel : null, role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, ion_icon_createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': !!flipRtl && this.el.ownerDocument.dir === 'rtl' }) }, inheritedAttributes), Build.isBrowser && this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n  }\n  static get assetsDirs() { return [\"svg\"]; }\n  get el() { return this; }\n  static get watchers() { return {\n    \"name\": [\"loadIcon\"],\n    \"src\": [\"loadIcon\"],\n    \"icon\": [\"loadIcon\"]\n  }; }\n  static get style() { return iconCss; }\n};\nconst ion_icon_getIonMode = () => (Build.isBrowser && typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\nconst ion_icon_createColorClasses = (color) => {\n  return color\n    ? {\n      'ion-color': true,\n      [`ion-color-${color}`]: true,\n    }\n    : null;\n};\nIcon = /*@__PURE__*/ proxyCustomElement(Icon, [1, \"ion-icon\", {\n    \"mode\": [1025],\n    \"color\": [1],\n    \"ios\": [1],\n    \"md\": [1],\n    \"flipRtl\": [4, \"flip-rtl\"],\n    \"name\": [513],\n    \"src\": [1],\n    \"icon\": [8],\n    \"size\": [1],\n    \"lazy\": [4],\n    \"sanitize\": [4],\n    \"svgContent\": [32],\n    \"isVisible\": [32],\n    \"ariaLabel\": [32]\n  }]);\nfunction ion_icon_defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-icon\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-icon\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Icon);\n      }\n      break;\n  } });\n}\n\nconst IonIcon = (/* unused pure expression or super */ null && (Icon));\nconst ion_icon_defineCustomElement = ion_icon_defineCustomElement$1;\n\n\n\n// EXTERNAL MODULE: ./node_modules/@ionic/core/dist/esm-es5/index.js\nvar esm_es5 = __webpack_require__(53774);\n;// CONCATENATED MODULE: ./node_modules/@ionic/core/dist/index.js\n\n;// CONCATENATED MODULE: ./node_modules/@ionic/react/dist/index.esm.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst IonLifeCycleContext = /*@__PURE__*/ react.createContext({\n    onIonViewWillEnter: () => {\n        return;\n    },\n    ionViewWillEnter: () => {\n        return;\n    },\n    onIonViewDidEnter: () => {\n        return;\n    },\n    ionViewDidEnter: () => {\n        return;\n    },\n    onIonViewWillLeave: () => {\n        return;\n    },\n    ionViewWillLeave: () => {\n        return;\n    },\n    onIonViewDidLeave: () => {\n        return;\n    },\n    ionViewDidLeave: () => {\n        return;\n    },\n});\nconst DefaultIonLifeCycleContext = class {\n    constructor() {\n        this.ionViewWillEnterCallbacks = [];\n        this.ionViewDidEnterCallbacks = [];\n        this.ionViewWillLeaveCallbacks = [];\n        this.ionViewDidLeaveCallbacks = [];\n    }\n    onIonViewWillEnter(callback) {\n        if (callback.id) {\n            const index = this.ionViewWillEnterCallbacks.findIndex((x) => x.id === callback.id);\n            if (index > -1) {\n                this.ionViewWillEnterCallbacks[index] = callback;\n            }\n            else {\n                this.ionViewWillEnterCallbacks.push(callback);\n            }\n        }\n        else {\n            this.ionViewWillEnterCallbacks.push(callback);\n        }\n    }\n    ionViewWillEnter() {\n        this.ionViewWillEnterCallbacks.forEach((cb) => cb());\n    }\n    onIonViewDidEnter(callback) {\n        if (callback.id) {\n            const index = this.ionViewDidEnterCallbacks.findIndex((x) => x.id === callback.id);\n            if (index > -1) {\n                this.ionViewDidEnterCallbacks[index] = callback;\n            }\n            else {\n                this.ionViewDidEnterCallbacks.push(callback);\n            }\n        }\n        else {\n            this.ionViewDidEnterCallbacks.push(callback);\n        }\n    }\n    ionViewDidEnter() {\n        this.ionViewDidEnterCallbacks.forEach((cb) => cb());\n    }\n    onIonViewWillLeave(callback) {\n        if (callback.id) {\n            const index = this.ionViewWillLeaveCallbacks.findIndex((x) => x.id === callback.id);\n            if (index > -1) {\n                this.ionViewWillLeaveCallbacks[index] = callback;\n            }\n            else {\n                this.ionViewWillLeaveCallbacks.push(callback);\n            }\n        }\n        else {\n            this.ionViewWillLeaveCallbacks.push(callback);\n        }\n    }\n    ionViewWillLeave() {\n        this.ionViewWillLeaveCallbacks.forEach((cb) => cb());\n    }\n    onIonViewDidLeave(callback) {\n        if (callback.id) {\n            const index = this.ionViewDidLeaveCallbacks.findIndex((x) => x.id === callback.id);\n            if (index > -1) {\n                this.ionViewDidLeaveCallbacks[index] = callback;\n            }\n            else {\n                this.ionViewDidLeaveCallbacks.push(callback);\n            }\n        }\n        else {\n            this.ionViewDidLeaveCallbacks.push(callback);\n        }\n    }\n    ionViewDidLeave() {\n        this.ionViewDidLeaveCallbacks.forEach((cb) => cb());\n        this.componentCanBeDestroyed();\n    }\n    onComponentCanBeDestroyed(callback) {\n        this.componentCanBeDestroyedCallback = callback;\n    }\n    componentCanBeDestroyed() {\n        if (this.componentCanBeDestroyedCallback) {\n            this.componentCanBeDestroyedCallback();\n        }\n    }\n};\n\nconst withIonLifeCycle = (WrappedComponent) => {\n    return class IonLifeCycle extends React.Component {\n        constructor(props) {\n            super(props);\n            this.componentRef = React.createRef();\n        }\n        componentDidMount() {\n            const element = this.componentRef.current;\n            this.context.onIonViewWillEnter(() => {\n                if (element && element.ionViewWillEnter) {\n                    element.ionViewWillEnter();\n                }\n            });\n            this.context.onIonViewDidEnter(() => {\n                if (element && element.ionViewDidEnter) {\n                    element.ionViewDidEnter();\n                }\n            });\n            this.context.onIonViewWillLeave(() => {\n                if (element && element.ionViewWillLeave) {\n                    element.ionViewWillLeave();\n                }\n            });\n            this.context.onIonViewDidLeave(() => {\n                if (element && element.ionViewDidLeave) {\n                    element.ionViewDidLeave();\n                }\n            });\n        }\n        render() {\n            return (React.createElement(IonLifeCycleContext.Consumer, null, (context) => {\n                this.context = context;\n                return React.createElement(WrappedComponent, Object.assign({ ref: this.componentRef }, this.props));\n            }));\n        }\n    };\n};\n\nconst useIonViewWillEnter = (callback, deps = []) => {\n    const context = useContext(IonLifeCycleContext);\n    const id = useRef();\n    id.current = id.current || Math.floor(Math.random() * 1000000);\n    useEffect(() => {\n        callback.id = id.current;\n        context.onIonViewWillEnter(callback);\n    }, deps);\n};\nconst useIonViewDidEnter = (callback, deps = []) => {\n    const context = useContext(IonLifeCycleContext);\n    const id = useRef();\n    id.current = id.current || Math.floor(Math.random() * 1000000);\n    useEffect(() => {\n        callback.id = id.current;\n        context.onIonViewDidEnter(callback);\n    }, deps);\n};\nconst useIonViewWillLeave = (callback, deps = []) => {\n    const context = useContext(IonLifeCycleContext);\n    const id = useRef();\n    id.current = id.current || Math.floor(Math.random() * 1000000);\n    useEffect(() => {\n        callback.id = id.current;\n        context.onIonViewWillLeave(callback);\n    }, deps);\n};\nconst useIonViewDidLeave = (callback, deps = []) => {\n    const context = useContext(IonLifeCycleContext);\n    const id = useRef();\n    id.current = id.current || Math.floor(Math.random() * 1000000);\n    useEffect(() => {\n        callback.id = id.current;\n        context.onIonViewDidLeave(callback);\n    }, deps);\n};\n\nconst NavContext = /*@__PURE__*/ react.createContext({\n    getIonRedirect: () => undefined,\n    getIonRoute: () => undefined,\n    getPageManager: () => undefined,\n    getStackManager: () => undefined,\n    goBack: (route) => {\n        if (typeof window !== 'undefined') {\n            if (typeof route === 'string') {\n                window.location.pathname = route;\n            }\n            else {\n                window.history.back();\n            }\n        }\n    },\n    navigate: (path) => {\n        if (typeof window !== 'undefined') {\n            window.location.pathname = path;\n        }\n    },\n    hasIonicRouter: () => false,\n    routeInfo: undefined,\n    setCurrentTab: () => undefined,\n    changeTab: (_tab, path) => {\n        if (typeof window !== 'undefined') {\n            window.location.pathname = path;\n        }\n    },\n    resetTab: (_tab, path) => {\n        if (typeof window !== 'undefined') {\n            window.location.pathname = path;\n        }\n    },\n});\n\nconst dashToPascalCase = (str) => str\n    .toLowerCase()\n    .split('-')\n    .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))\n    .join('');\nconst camelToDashCase = (str) => str.replace(/([A-Z])/g, (m) => `-${m[0].toLowerCase()}`);\n\nconst attachProps = (node, newProps, oldProps = {}) => {\n    // some test frameworks don't render DOM elements, so we test here to make sure we are dealing with DOM first\n    if (node instanceof Element) {\n        // add any classes in className to the class list\n        const className = getClassName(node.classList, newProps, oldProps);\n        if (className !== '') {\n            node.className = className;\n        }\n        Object.keys(newProps).forEach((name) => {\n            if (name === 'children' ||\n                name === 'style' ||\n                name === 'ref' ||\n                name === 'class' ||\n                name === 'className' ||\n                name === 'forwardedRef') {\n                return;\n            }\n            if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                const eventName = name.substring(2);\n                const eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n                if (!isCoveredByReact(eventNameLc)) {\n                    syncEvent(node, eventNameLc, newProps[name]);\n                }\n            }\n            else {\n                node[name] = newProps[name];\n                const propType = typeof newProps[name];\n                if (propType === 'string') {\n                    node.setAttribute(camelToDashCase(name), newProps[name]);\n                }\n            }\n        });\n    }\n};\nconst getClassName = (classList, newProps, oldProps) => {\n    const newClassProp = newProps.className || newProps.class;\n    const oldClassProp = oldProps.className || oldProps.class;\n    // map the classes to Maps for performance\n    const currentClasses = arrayToMap(classList);\n    const incomingPropClasses = arrayToMap(newClassProp ? newClassProp.split(' ') : []);\n    const oldPropClasses = arrayToMap(oldClassProp ? oldClassProp.split(' ') : []);\n    const finalClassNames = [];\n    // loop through each of the current classes on the component\n    // to see if it should be a part of the classNames added\n    currentClasses.forEach((currentClass) => {\n        if (incomingPropClasses.has(currentClass)) {\n            // add it as its already included in classnames coming in from newProps\n            finalClassNames.push(currentClass);\n            incomingPropClasses.delete(currentClass);\n        }\n        else if (!oldPropClasses.has(currentClass)) {\n            // add it as it has NOT been removed by user\n            finalClassNames.push(currentClass);\n        }\n    });\n    incomingPropClasses.forEach((s) => finalClassNames.push(s));\n    return finalClassNames.join(' ');\n};\n/**\n * Checks if an event is supported in the current execution environment.\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nconst isCoveredByReact = (eventNameSuffix) => {\n    if (typeof document === 'undefined') {\n        return true;\n    }\n    else {\n        const eventName = 'on' + eventNameSuffix;\n        let isSupported = eventName in document;\n        if (!isSupported) {\n            const element = document.createElement('div');\n            element.setAttribute(eventName, 'return;');\n            isSupported = typeof element[eventName] === 'function';\n        }\n        return isSupported;\n    }\n};\nconst syncEvent = (node, eventName, newEventHandler) => {\n    const eventStore = node.__events || (node.__events = {});\n    const oldEventHandler = eventStore[eventName];\n    // Remove old listener so they don't double up.\n    if (oldEventHandler) {\n        node.removeEventListener(eventName, oldEventHandler);\n    }\n    // Bind new listener.\n    node.addEventListener(eventName, (eventStore[eventName] = function handler(e) {\n        if (newEventHandler) {\n            newEventHandler.call(this, e);\n        }\n    }));\n};\nconst arrayToMap = (arr) => {\n    const map = new Map();\n    arr.forEach((s) => map.set(s, s));\n    return map;\n};\n\nconst setRef = (ref, value) => {\n    if (typeof ref === 'function') {\n        ref(value);\n    }\n    else if (ref != null) {\n        // Cast as a MutableRef so we can assign current\n        ref.current = value;\n    }\n};\nconst mergeRefs = (...refs) => {\n    return (value) => {\n        refs.forEach(ref => {\n            setRef(ref, value);\n        });\n    };\n};\nconst createForwardRef$1 = (ReactComponent, displayName) => {\n    const forwardRef = (props, ref) => {\n        return react.createElement(ReactComponent, Object.assign({}, props, { forwardedRef: ref }));\n    };\n    forwardRef.displayName = displayName;\n    return react.forwardRef(forwardRef);\n};\nconst index_esm_defineCustomElement = (tagName, customElement) => {\n    if (customElement !== undefined &&\n        typeof customElements !== 'undefined' &&\n        !customElements.get(tagName)) {\n        customElements.define(tagName, customElement);\n    }\n};\n\nconst createReactComponent = (tagName, ReactComponentContext, manipulatePropsFunction, defineCustomElement) => {\n    if (defineCustomElement !== undefined) {\n        defineCustomElement();\n    }\n    const displayName = dashToPascalCase(tagName);\n    const ReactComponent = class extends react.Component {\n        constructor(props) {\n            super(props);\n            this.setComponentElRef = (element) => {\n                this.componentEl = element;\n            };\n        }\n        componentDidMount() {\n            this.componentDidUpdate(this.props);\n        }\n        componentDidUpdate(prevProps) {\n            attachProps(this.componentEl, this.props, prevProps);\n        }\n        render() {\n            const _a = this.props, { children, forwardedRef, style, className, ref } = _a, cProps = (0,tslib_es6/* __rest */._T)(_a, [\"children\", \"forwardedRef\", \"style\", \"className\", \"ref\"]);\n            let propsToPass = Object.keys(cProps).reduce((acc, name) => {\n                if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                    const eventName = name.substring(2).toLowerCase();\n                    if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n                        acc[name] = cProps[name];\n                    }\n                }\n                else {\n                    acc[name] = cProps[name];\n                }\n                return acc;\n            }, {});\n            if (manipulatePropsFunction) {\n                propsToPass = manipulatePropsFunction(this.props, propsToPass);\n            }\n            const newProps = Object.assign(Object.assign({}, propsToPass), { ref: mergeRefs(forwardedRef, this.setComponentElRef), style });\n            /**\n             * We use createElement here instead of\n             * React.createElement to work around a\n             * bug in Vite (https://github.com/vitejs/vite/issues/6104).\n             * React.createElement causes all elements to be rendered\n             * as <tagname> instead of the actual Web Component.\n             */\n            return (0,react.createElement)(tagName, newProps, children);\n        }\n        static get displayName() {\n            return displayName;\n        }\n    };\n    // If context was passed to createReactComponent then conditionally add it to the Component Class\n    if (ReactComponentContext) {\n        ReactComponent.contextType = ReactComponentContext;\n    }\n    return createForwardRef$1(ReactComponent, displayName);\n};\n\n/* eslint-disable */\nconst IonAccordion = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-accordion', undefined, undefined, defineCustomElement$1)));\nconst IonAccordionGroup = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-accordion-group', undefined, undefined, defineCustomElement$2)));\nconst IonAvatar = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-avatar', undefined, undefined, defineCustomElement$3)));\nconst IonBackdrop = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-backdrop', undefined, undefined, defineCustomElement$4)));\nconst IonBadge = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-badge', undefined, undefined, defineCustomElement$5)));\nconst IonBreadcrumbs = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-breadcrumbs', undefined, undefined, defineCustomElement$6)));\nconst IonButtons = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-buttons', undefined, undefined, defineCustomElement$7)));\nconst IonCardContent = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-card-content', undefined, undefined, defineCustomElement$8)));\nconst IonCardHeader = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-card-header', undefined, undefined, defineCustomElement$9)));\nconst IonCardSubtitle = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-card-subtitle', undefined, undefined, defineCustomElement$a)));\nconst IonCardTitle = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-card-title', undefined, undefined, defineCustomElement$b)));\nconst IonCheckbox = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-checkbox', undefined, undefined, defineCustomElement$c)));\nconst IonChip = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-chip', undefined, undefined, defineCustomElement$d)));\nconst IonCol = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-col', undefined, undefined, defineCustomElement$e)));\nconst IonContent = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-content', undefined, undefined, defineCustomElement$f)));\nconst IonDatetime = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-datetime', undefined, undefined, defineCustomElement$g)));\nconst IonFab = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-fab', undefined, undefined, defineCustomElement$h)));\nconst IonFabList = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-fab-list', undefined, undefined, defineCustomElement$i)));\nconst IonFooter = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-footer', undefined, undefined, defineCustomElement$j)));\nconst IonGrid = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-grid', undefined, undefined, defineCustomElement$k)));\nconst IonHeader = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-header', undefined, undefined, defineCustomElement$l)));\nconst IonImg = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-img', undefined, undefined, defineCustomElement$m)));\nconst IonInfiniteScroll = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-infinite-scroll', undefined, undefined, defineCustomElement$n)));\nconst IonInfiniteScrollContent = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-infinite-scroll-content', undefined, undefined, defineCustomElement$o)));\nconst IonInput = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-input', undefined, undefined, defineCustomElement$p)));\nconst IonItemDivider = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-item-divider', undefined, undefined, defineCustomElement$q)));\nconst IonItemGroup = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-item-group', undefined, undefined, defineCustomElement$r)));\nconst IonItemOptions = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-item-options', undefined, undefined, defineCustomElement$s)));\nconst IonItemSliding = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-item-sliding', undefined, undefined, defineCustomElement$t)));\nconst IonLabel = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-label', undefined, undefined, defineCustomElement$u)));\nconst IonList = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-list', undefined, undefined, defineCustomElement$v)));\nconst IonListHeader = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-list-header', undefined, undefined, defineCustomElement$w)));\nconst IonMenu = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-menu', undefined, undefined, defineCustomElement$x)));\nconst IonMenuButton = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-menu-button', undefined, undefined, defineCustomElement$y)));\nconst IonMenuToggle = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-menu-toggle', undefined, undefined, defineCustomElement$z)));\nconst IonNav = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-nav', undefined, undefined, defineCustomElement$A)));\nconst IonNavLink = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-nav-link', undefined, undefined, defineCustomElement$B)));\nconst IonNote = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-note', undefined, undefined, defineCustomElement$C)));\nconst IonProgressBar = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-progress-bar', undefined, undefined, defineCustomElement$D)));\nconst IonRadio = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-radio', undefined, undefined, defineCustomElement$E)));\nconst IonRadioGroup = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-radio-group', undefined, undefined, defineCustomElement$F)));\nconst IonRange = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-range', undefined, undefined, defineCustomElement$G)));\nconst IonRefresher = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-refresher', undefined, undefined, defineCustomElement$H)));\nconst IonRefresherContent = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-refresher-content', undefined, undefined, defineCustomElement$I)));\nconst IonReorder = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-reorder', undefined, undefined, defineCustomElement$J)));\nconst IonReorderGroup = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-reorder-group', undefined, undefined, defineCustomElement$K)));\nconst IonRippleEffect = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-ripple-effect', undefined, undefined, defineCustomElement$L)));\nconst IonRow = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-row', undefined, undefined, defineCustomElement$M)));\nconst IonSearchbar = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-searchbar', undefined, undefined, defineCustomElement$N)));\nconst IonSegment = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-segment', undefined, undefined, defineCustomElement$O)));\nconst IonSegmentButton = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-segment-button', undefined, undefined, defineCustomElement$P)));\nconst IonSelect = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-select', undefined, undefined, defineCustomElement$Q)));\nconst IonSelectOption = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-select-option', undefined, undefined, defineCustomElement$R)));\nconst IonSkeletonText = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-skeleton-text', undefined, undefined, defineCustomElement$S)));\nconst IonSlide = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-slide', undefined, undefined, defineCustomElement$T)));\nconst IonSlides = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-slides', undefined, undefined, defineCustomElement$U)));\nconst IonSpinner = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-spinner', undefined, undefined, defineCustomElement$V)));\nconst IonSplitPane = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-split-pane', undefined, undefined, defineCustomElement$W)));\nconst IonTab = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-tab', undefined, undefined, defineCustomElement$X)));\nconst IonText = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-text', undefined, undefined, defineCustomElement$Y)));\nconst IonTextarea = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-textarea', undefined, undefined, defineCustomElement$Z)));\nconst IonThumbnail = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-thumbnail', undefined, undefined, defineCustomElement$_)));\nconst IonTitle = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-title', undefined, undefined, defineCustomElement$$)));\nconst IonToggle = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-toggle', undefined, undefined, defineCustomElement$10)));\nconst IonToolbar = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-toolbar', undefined, undefined, defineCustomElement$11)));\nconst IonVirtualScroll = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-virtual-scroll', undefined, undefined, defineCustomElement$12)));\n\nconst createForwardRef = (ReactComponent, displayName) => {\n    const forwardRef = (props, ref) => {\n        return react.createElement(ReactComponent, Object.assign({}, props, { forwardedRef: ref }));\n    };\n    forwardRef.displayName = displayName;\n    return react.forwardRef(forwardRef);\n};\nconst index_esm_isPlatform = (platform) => {\n    return isPlatform(window, platform);\n};\nconst index_esm_getPlatforms = () => {\n    return getPlatforms$1(window);\n};\nconst getConfig = () => {\n    if (typeof window !== 'undefined') {\n        const Ionic = window.Ionic;\n        if (Ionic && Ionic.config) {\n            return Ionic.config;\n        }\n    }\n    return null;\n};\n\nconst createRoutingComponent = (tagName, customElement) => {\n    index_esm_defineCustomElement(tagName, customElement);\n    const displayName = dashToPascalCase(tagName);\n    const ReactComponent = class extends React.Component {\n        constructor(props) {\n            super(props);\n            this.handleClick = (e) => {\n                const { routerLink, routerDirection, routerOptions, routerAnimation } = this.props;\n                if (routerLink !== undefined) {\n                    e.preventDefault();\n                    this.context.navigate(routerLink, routerDirection, undefined, routerAnimation, routerOptions);\n                }\n            };\n            // Create a local ref to to attach props to the wrapped element.\n            this.ref = React.createRef();\n            // React refs must be stable (not created inline).\n            this.stableMergedRefs = mergeRefs(this.ref, this.props.forwardedRef);\n        }\n        componentDidMount() {\n            this.componentDidUpdate(this.props);\n        }\n        componentDidUpdate(prevProps) {\n            const node = this.ref.current;\n            attachProps(node, this.props, prevProps);\n        }\n        render() {\n            const _a = this.props, { children, forwardedRef, style, className, ref } = _a, cProps = __rest(_a, [\"children\", \"forwardedRef\", \"style\", \"className\", \"ref\"]);\n            const propsToPass = Object.keys(cProps).reduce((acc, name) => {\n                if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                    const eventName = name.substring(2).toLowerCase();\n                    if (isCoveredByReact(eventName)) {\n                        acc[name] = cProps[name];\n                    }\n                }\n                else if (['string', 'boolean', 'number'].includes(typeof cProps[name])) {\n                    acc[camelToDashCase(name)] = cProps[name];\n                }\n                return acc;\n            }, {});\n            const newProps = Object.assign(Object.assign({}, propsToPass), { ref: this.stableMergedRefs, style });\n            if (this.props.routerLink && !this.props.href) {\n                newProps.href = this.props.routerLink;\n            }\n            if (newProps.onClick) {\n                const oldClick = newProps.onClick;\n                newProps.onClick = (e) => {\n                    oldClick(e);\n                    if (!e.defaultPrevented) {\n                        this.handleClick(e);\n                    }\n                };\n            }\n            else {\n                newProps.onClick = this.handleClick;\n            }\n            return createElement(tagName, newProps, children);\n        }\n        static get displayName() {\n            return displayName;\n        }\n        static get contextType() {\n            return NavContext;\n        }\n    };\n    return createForwardRef(ReactComponent, displayName);\n};\n\nconst IonRouterLink = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-router-link', IonRouterLink$1)));\nconst IonButton = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-button', IonButton$1)));\nconst IonCard = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-card', IonCard$1)));\nconst IonFabButton = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-fab-button', IonFabButton$1)));\nconst IonItem = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-item', IonItem$1)));\nconst IonItemOption = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-item-option', IonItemOption$1)));\nconst IonBreadcrumb = /*@__PURE__*/ (/* unused pure expression or super */ null && (createRoutingComponent('ion-breadcrumb', IonBreadcrumb$1)));\n\nconst createControllerComponent = (tagName, controller, customElement) => {\n    index_esm_defineCustomElement(tagName, customElement);\n    const displayName = dashToPascalCase(tagName);\n    const didDismissEventName = `on${displayName}DidDismiss`;\n    const didPresentEventName = `on${displayName}DidPresent`;\n    const willDismissEventName = `on${displayName}WillDismiss`;\n    const willPresentEventName = `on${displayName}WillPresent`;\n    class Overlay extends React.Component {\n        constructor(props) {\n            super(props);\n            this.isUnmounted = false;\n            this.handleDismiss = this.handleDismiss.bind(this);\n        }\n        static get displayName() {\n            return displayName;\n        }\n        async componentDidMount() {\n            const { isOpen } = this.props;\n            if (isOpen) {\n                this.present();\n            }\n        }\n        componentWillUnmount() {\n            this.isUnmounted = true;\n            if (this.overlay) {\n                this.overlay.dismiss();\n            }\n        }\n        async componentDidUpdate(prevProps) {\n            if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n                this.present(prevProps);\n            }\n            if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n                await this.overlay.dismiss();\n            }\n        }\n        handleDismiss(event) {\n            if (this.props.onDidDismiss) {\n                this.props.onDidDismiss(event);\n            }\n            setRef(this.props.forwardedRef, null);\n        }\n        async present(prevProps) {\n            const _a = this.props, cProps = __rest(_a, [\"isOpen\", \"onDidDismiss\", \"onDidPresent\", \"onWillDismiss\", \"onWillPresent\"]);\n            this.overlay = await controller.create(Object.assign({}, cProps));\n            attachProps(this.overlay, {\n                [didDismissEventName]: this.handleDismiss,\n                [didPresentEventName]: (e) => this.props.onDidPresent && this.props.onDidPresent(e),\n                [willDismissEventName]: (e) => this.props.onWillDismiss && this.props.onWillDismiss(e),\n                [willPresentEventName]: (e) => this.props.onWillPresent && this.props.onWillPresent(e),\n            }, prevProps);\n            // Check isOpen again since the value could have changed during the async call to controller.create\n            // It's also possible for the component to have become unmounted.\n            if (this.props.isOpen === true && this.isUnmounted === false) {\n                setRef(this.props.forwardedRef, this.overlay);\n                await this.overlay.present();\n            }\n        }\n        render() {\n            return null;\n        }\n    }\n    return React.forwardRef((props, ref) => {\n        return React.createElement(Overlay, Object.assign({}, props, { forwardedRef: ref }));\n    });\n};\n\nconst IonAlert = /*@__PURE__*/ (/* unused pure expression or super */ null && (createControllerComponent('ion-alert', alertController, IonAlert$1)));\n\nconst IonLoading = /*@__PURE__*/ (/* unused pure expression or super */ null && (createControllerComponent('ion-loading', loadingController, IonLoading$1)));\n\nconst index_esm_toastController = {\n    create: (options) => toastController.create(options),\n    dismiss: (data, role, id) => toastController.dismiss(data, role, id),\n    getTop: () => toastController.getTop(),\n};\nconst IonToast = /*@__PURE__*/ (/* unused pure expression or super */ null && (createControllerComponent('ion-toast', index_esm_toastController, IonToast$1)));\n\nconst IonPicker = /*@__PURE__*/ (/* unused pure expression or super */ null && (createControllerComponent('ion-picker', pickerController, IonPicker$1)));\n\nconst createOverlayComponent = (tagName, controller, defineCustomElement) => {\n    if (defineCustomElement !== undefined) {\n        defineCustomElement();\n    }\n    const displayName = dashToPascalCase(tagName);\n    const didDismissEventName = `on${displayName}DidDismiss`;\n    const didPresentEventName = `on${displayName}DidPresent`;\n    const willDismissEventName = `on${displayName}WillDismiss`;\n    const willPresentEventName = `on${displayName}WillPresent`;\n    class Overlay extends React.Component {\n        constructor(props) {\n            super(props);\n            this.isDismissing = false;\n            if (typeof document !== 'undefined') {\n                this.el = document.createElement('div');\n            }\n            this.handleDismiss = this.handleDismiss.bind(this);\n        }\n        static get displayName() {\n            return displayName;\n        }\n        componentDidMount() {\n            if (this.props.isOpen) {\n                this.present();\n            }\n        }\n        componentWillUnmount() {\n            if (this.overlay) {\n                this.overlay.dismiss();\n            }\n        }\n        handleDismiss(event) {\n            if (this.props.onDidDismiss) {\n                this.props.onDidDismiss(event);\n            }\n            setRef(this.props.forwardedRef, null);\n        }\n        shouldComponentUpdate(nextProps) {\n            // Check if the overlay component is about to dismiss\n            if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n                this.isDismissing = true;\n            }\n            return true;\n        }\n        async componentDidUpdate(prevProps) {\n            if (this.overlay) {\n                attachProps(this.overlay, this.props, prevProps);\n            }\n            if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n                this.present(prevProps);\n            }\n            if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n                await this.overlay.dismiss();\n                this.isDismissing = false;\n                /**\n                 * Now that the overlay is dismissed\n                 * we need to render again so that any\n                 * inner components will be unmounted\n                 */\n                this.forceUpdate();\n            }\n        }\n        async present(prevProps) {\n            const _a = this.props, cProps = __rest(_a, [\"children\", \"isOpen\", \"onDidDismiss\", \"onDidPresent\", \"onWillDismiss\", \"onWillPresent\"]);\n            const elementProps = Object.assign(Object.assign({}, cProps), { ref: this.props.forwardedRef, [didDismissEventName]: this.handleDismiss, [didPresentEventName]: (e) => this.props.onDidPresent && this.props.onDidPresent(e), [willDismissEventName]: (e) => this.props.onWillDismiss && this.props.onWillDismiss(e), [willPresentEventName]: (e) => this.props.onWillPresent && this.props.onWillPresent(e) });\n            this.overlay = await controller.create(Object.assign(Object.assign({}, elementProps), { component: this.el, componentProps: {} }));\n            setRef(this.props.forwardedRef, this.overlay);\n            attachProps(this.overlay, elementProps, prevProps);\n            await this.overlay.present();\n        }\n        render() {\n            /**\n             * Continue to render the component even when\n             * overlay is dismissing otherwise component\n             * will be hidden before animation is done.\n             */\n            return ReactDOM.createPortal(this.props.isOpen || this.isDismissing ? this.props.children : null, this.el);\n        }\n    }\n    return React.forwardRef((props, ref) => {\n        return React.createElement(Overlay, Object.assign({}, props, { forwardedRef: ref }));\n    });\n};\n\nconst index_esm_actionSheetController = {\n    create: (options) => actionSheetController.create(options),\n    dismiss: (data, role, id) => actionSheetController.dismiss(data, role, id),\n    getTop: () => actionSheetController.getTop(),\n};\nconst IonActionSheet = /*@__PURE__*/ (/* unused pure expression or super */ null && (createOverlayComponent('ion-action-sheet', index_esm_actionSheetController, defineCustomElement$13)));\n\nconst createInlineOverlayComponent = (tagName, defineCustomElement) => {\n    if (defineCustomElement) {\n        defineCustomElement();\n    }\n    const displayName = dashToPascalCase(tagName);\n    const ReactComponent = class extends React.Component {\n        constructor(props) {\n            super(props);\n            // Create a local ref to to attach props to the wrapped element.\n            this.ref = React.createRef();\n            // React refs must be stable (not created inline).\n            this.stableMergedRefs = mergeRefs(this.ref, this.props.forwardedRef);\n            // Component is hidden by default\n            this.state = { isOpen: false };\n            // Create a local ref to the inner child element.\n            this.wrapperRef = React.createRef();\n        }\n        componentDidMount() {\n            var _a, _b;\n            this.componentDidUpdate(this.props);\n            /**\n             * Mount the inner component\n             * when overlay is about to open.\n             * Also manually call the onWillPresent\n             * handler if present as setState will\n             * cause the event handlers to be\n             * destroyed and re-created.\n             */\n            (_a = this.ref.current) === null || _a === void 0 ? void 0 : _a.addEventListener('willPresent', (evt) => {\n                this.setState({ isOpen: true });\n                this.props.onWillPresent && this.props.onWillPresent(evt);\n            });\n            /**\n             * Unmount the inner component.\n             * React will call Node.removeChild\n             * which expects the child to be\n             * a direct descendent of the parent\n             * but due to the presence of\n             * Web Component slots, this is not\n             * always the case. To work around this\n             * we move the inner component to the root\n             * of the Web Component so React can\n             * cleanup properly.\n             */\n            (_b = this.ref.current) === null || _b === void 0 ? void 0 : _b.addEventListener('didDismiss', (evt) => {\n                const wrapper = this.wrapperRef.current;\n                const el = this.ref.current;\n                /**\n                 * This component might be unmounted already, if the containing\n                 * element was removed while the popover was still open. (For\n                 * example, if an item contains an inline popover with a button\n                 * that removes the item.)\n                 */\n                if (wrapper && el) {\n                    el.append(wrapper);\n                    this.setState({ isOpen: false });\n                }\n                this.props.onDidDismiss && this.props.onDidDismiss(evt);\n            });\n        }\n        componentDidUpdate(prevProps) {\n            const node = this.ref.current;\n            attachProps(node, this.props, prevProps);\n        }\n        render() {\n            const _a = this.props, { children, forwardedRef, style, className, ref } = _a, cProps = __rest(_a, [\"children\", \"forwardedRef\", \"style\", \"className\", \"ref\"]);\n            const propsToPass = Object.keys(cProps).reduce((acc, name) => {\n                if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n                    const eventName = name.substring(2).toLowerCase();\n                    if (isCoveredByReact(eventName)) {\n                        acc[name] = cProps[name];\n                    }\n                }\n                else if (['string', 'boolean', 'number'].includes(typeof cProps[name])) {\n                    acc[camelToDashCase(name)] = cProps[name];\n                }\n                return acc;\n            }, {});\n            const newProps = Object.assign(Object.assign({}, propsToPass), { ref: this.stableMergedRefs, style });\n            /**\n             * We only want the inner component\n             * to be mounted if the overlay is open,\n             * so conditionally render the component\n             * based on the isOpen state.\n             */\n            return createElement(tagName, newProps, (this.state.isOpen) ?\n                createElement('div', {\n                    id: 'ion-react-wrapper',\n                    ref: this.wrapperRef,\n                    style: {\n                        display: 'flex',\n                        flexDirection: 'column',\n                        height: '100%'\n                    }\n                }, children) :\n                null);\n        }\n        static get displayName() {\n            return displayName;\n        }\n    };\n    return createForwardRef(ReactComponent, displayName);\n};\n\nconst IonModal = /*@__PURE__*/ (/* unused pure expression or super */ null && (createInlineOverlayComponent('ion-modal', defineCustomElement$14)));\n\nconst IonPopover = /*@__PURE__*/ (/* unused pure expression or super */ null && (createInlineOverlayComponent('ion-popover', defineCustomElement$15)));\n\nconst IonContext = react.createContext({\n    addOverlay: () => {\n        return;\n    },\n    removeOverlay: () => {\n        return;\n    },\n});\n\n/**\n * Manages overlays that are added via the useOverlay hook.\n * This is a standalone component so changes to its children don't cause other descendant\n * components to re-render when overlays are added. However, we need to communicate with the IonContext\n * that is set up in <IonApp />, so we register callbacks so when overlays are added to IonContext,\n * they ultimately added here.\n */\nconst IonOverlayManager = ({ onAddOverlay, onRemoveOverlay, }) => {\n    /**\n     * Because of the way we're passing around the addOverlay and removeOverlay\n     * callbacks, by the time they finally get called, they use a stale reference\n     * to the state that only has the initial values. So if two overlays are opened\n     * at the same time, both using useIonModal or similar (such as through nesting),\n     * the second will erase the first from the overlays list. This causes the content\n     * of the first overlay to unmount.\n     *\n     * We wrap the state in useRef to ensure the two callbacks always use the most\n     * up-to-date version.\n     *\n     * Further reading: https://stackoverflow.com/a/56554056\n     */\n    const [overlays, setOverlays] = useState({});\n    const overlaysRef = useRef({});\n    overlaysRef.current = overlays;\n    useEffect(() => {\n        /* Setup the callbacks that get called from <IonApp /> */\n        onAddOverlay(addOverlay);\n        onRemoveOverlay(removeOverlay);\n    }, []);\n    const addOverlay = (id, component, containerElement) => {\n        const newOverlays = Object.assign({}, overlaysRef.current);\n        newOverlays[id] = { component, containerElement };\n        setOverlays(newOverlays);\n    };\n    const removeOverlay = (id) => {\n        const newOverlays = Object.assign({}, overlaysRef.current);\n        delete newOverlays[id];\n        setOverlays(newOverlays);\n    };\n    const overlayKeys = Object.keys(overlays);\n    return (React.createElement(React.Fragment, null, overlayKeys.map((key) => {\n        const overlay = overlays[key];\n        return ReactDOM.createPortal(overlay.component, overlay.containerElement, `overlay-${key}`);\n    })));\n};\n\nconst IonTabButtonInner = /*@__PURE__*/ createReactComponent('ion-tab-button', undefined, undefined, ion_tab_button_defineCustomElement);\nconst IonTabBarInner = /*@__PURE__*/ createReactComponent('ion-tab-bar', undefined, undefined, ion_tab_bar_defineCustomElement);\nconst IonBackButtonInner = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-back-button', undefined, undefined, defineCustomElement$18)));\nconst IonRouterOutletInner = /*@__PURE__*/ createReactComponent('ion-router-outlet', undefined, undefined, defineCustomElement);\nconst IonAppInner = /*@__PURE__*/ (/* unused pure expression or super */ null && (createReactComponent('ion-app', undefined, undefined, defineCustomElement$1a)));\n// ionicons\nconst IonIconInner = /*@__PURE__*/ createReactComponent('ion-icon', undefined, undefined, ion_icon_defineCustomElement);\n\nconst IonApp = /*@__PURE__*/ (/* unused pure expression or super */ null && ((() => class extends React.Component {\n    constructor(props) {\n        super(props);\n        /*\n          Wire up methods to call into IonOverlayManager\n        */\n        this.ionContext = {\n            addOverlay: (id, overlay, containerElement) => {\n                if (this.addOverlayCallback) {\n                    this.addOverlayCallback(id, overlay, containerElement);\n                }\n            },\n            removeOverlay: (id) => {\n                if (this.removeOverlayCallback) {\n                    this.removeOverlayCallback(id);\n                }\n            },\n        };\n    }\n    render() {\n        return (React.createElement(IonContext.Provider, { value: this.ionContext },\n            React.createElement(IonAppInner, Object.assign({}, this.props), this.props.children),\n            React.createElement(IonOverlayManager, { onAddOverlay: (callback) => {\n                    this.addOverlayCallback = callback;\n                }, onRemoveOverlay: (callback) => {\n                    this.removeOverlayCallback = callback;\n                } })));\n    }\n    static get displayName() {\n        return 'IonApp';\n    }\n})()));\n\nconst StackContext = react.createContext({\n    registerIonPage: () => undefined,\n    isInOutlet: () => false,\n});\n\nclass PageManager extends react.PureComponent {\n    constructor(props) {\n        super(props);\n        this.ionPageElementRef = react.createRef();\n        // React refs must be stable (not created inline).\n        this.stableMergedRefs = mergeRefs(this.ionPageElementRef, this.props.forwardedRef);\n    }\n    componentDidMount() {\n        if (this.ionPageElementRef.current) {\n            if (this.context.isInOutlet()) {\n                this.ionPageElementRef.current.classList.add('ion-page-invisible');\n            }\n            this.context.registerIonPage(this.ionPageElementRef.current, this.props.routeInfo);\n            this.ionPageElementRef.current.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n            this.ionPageElementRef.current.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n            this.ionPageElementRef.current.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n            this.ionPageElementRef.current.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n        }\n    }\n    componentWillUnmount() {\n        if (this.ionPageElementRef.current) {\n            this.ionPageElementRef.current.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n            this.ionPageElementRef.current.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n            this.ionPageElementRef.current.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n            this.ionPageElementRef.current.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n        }\n    }\n    ionViewWillEnterHandler() {\n        this.ionLifeCycleContext.ionViewWillEnter();\n    }\n    ionViewDidEnterHandler() {\n        this.ionLifeCycleContext.ionViewDidEnter();\n    }\n    ionViewWillLeaveHandler() {\n        this.ionLifeCycleContext.ionViewWillLeave();\n    }\n    ionViewDidLeaveHandler() {\n        this.ionLifeCycleContext.ionViewDidLeave();\n    }\n    render() {\n        const _a = this.props, { className, children, routeInfo, forwardedRef } = _a, props = (0,tslib_es6/* __rest */._T)(_a, [\"className\", \"children\", \"routeInfo\", \"forwardedRef\"]);\n        return (react.createElement(IonLifeCycleContext.Consumer, null, (context) => {\n            this.ionLifeCycleContext = context;\n            return (react.createElement(\"div\", Object.assign({ className: className ? `${className} ion-page` : `ion-page`, ref: this.stableMergedRefs }, props), children));\n        }));\n    }\n    static get contextType() {\n        return StackContext;\n    }\n}\n\nclass IonPageInternal extends react.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const _a = this.props, { className, children, forwardedRef } = _a, props = (0,tslib_es6/* __rest */._T)(_a, [\"className\", \"children\", \"forwardedRef\"]);\n        return this.context.hasIonicRouter() ? (react.createElement(PageManager, Object.assign({ className: className ? `${className}` : '', routeInfo: this.context.routeInfo, forwardedRef: forwardedRef }, props), children)) : (react.createElement(\"div\", Object.assign({ className: className ? `ion-page ${className}` : 'ion-page', ref: forwardedRef }, props), children));\n    }\n    static get displayName() {\n        return 'IonPage';\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\nconst IonPage = createForwardRef(IonPageInternal, 'IonPage');\n\nconst IonTabsContext = react.createContext({\n    activeTab: undefined,\n    selectTab: () => false,\n});\n\nconst HTMLElementSSR = (typeof HTMLElement !== 'undefined'\n    ? HTMLElement\n    : class {\n    });\n\nclass OutletPageManager extends react.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        if (this.ionRouterOutlet) {\n            (0,esm_es5.componentOnReady)(this.ionRouterOutlet, () => {\n                this.context.registerIonPage(this.ionRouterOutlet, this.props.routeInfo);\n            });\n            this.ionRouterOutlet.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n            this.ionRouterOutlet.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n            this.ionRouterOutlet.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n            this.ionRouterOutlet.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n        }\n    }\n    componentWillUnmount() {\n        if (this.ionRouterOutlet) {\n            this.ionRouterOutlet.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n            this.ionRouterOutlet.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n            this.ionRouterOutlet.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n            this.ionRouterOutlet.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n        }\n    }\n    ionViewWillEnterHandler() {\n        this.ionLifeCycleContext.ionViewWillEnter();\n    }\n    ionViewDidEnterHandler() {\n        this.ionLifeCycleContext.ionViewDidEnter();\n    }\n    ionViewWillLeaveHandler() {\n        this.ionLifeCycleContext.ionViewWillLeave();\n    }\n    ionViewDidLeaveHandler() {\n        this.ionLifeCycleContext.ionViewDidLeave();\n    }\n    render() {\n        const _a = this.props, { StackManager, children, routeInfo } = _a, props = (0,tslib_es6/* __rest */._T)(_a, [\"StackManager\", \"children\", \"routeInfo\"]);\n        return (react.createElement(IonLifeCycleContext.Consumer, null, (context) => {\n            this.ionLifeCycleContext = context;\n            return (react.createElement(StackManager, { routeInfo: routeInfo },\n                react.createElement(IonRouterOutletInner, Object.assign({ setRef: (val) => (this.ionRouterOutlet = val) }, props), children)));\n        }));\n    }\n    static get contextType() {\n        return StackContext;\n    }\n}\n\nclass IonRouterOutletContainer extends react.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const StackManager = this.context.getStackManager();\n        const _a = this.props, { children, forwardedRef } = _a, props = (0,tslib_es6/* __rest */._T)(_a, [\"children\", \"forwardedRef\"]);\n        return this.context.hasIonicRouter() ? (props.ionPage ? (react.createElement(OutletPageManager, Object.assign({ StackManager: StackManager, routeInfo: this.context.routeInfo }, props), children)) : (react.createElement(StackManager, { routeInfo: this.context.routeInfo },\n            react.createElement(IonRouterOutletInner, Object.assign({}, props, { forwardedRef: forwardedRef }), children)))) : (react.createElement(IonRouterOutletInner, Object.assign({ ref: forwardedRef }, this.props), this.props.children));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\nconst index_esm_IonRouterOutlet = createForwardRef(IonRouterOutletContainer, 'IonRouterOutlet');\n\nconst index_esm_IonTabButton = /*@__PURE__*/ (() => class extends react.Component {\n    constructor(props) {\n        super(props);\n        this.handleIonTabButtonClick = this.handleIonTabButtonClick.bind(this);\n    }\n    handleIonTabButtonClick() {\n        if (this.props.onClick) {\n            this.props.onClick(new CustomEvent('ionTabButtonClick', {\n                detail: {\n                    tab: this.props.tab,\n                    href: this.props.href,\n                    routeOptions: this.props.routerOptions,\n                },\n            }));\n        }\n    }\n    render() {\n        const _a = this.props, rest = (0,tslib_es6/* __rest */._T)(_a, [\"onClick\"]);\n        return (react.createElement(IonTabButtonInner, Object.assign({ onIonTabButtonClick: this.handleIonTabButtonClick }, rest)));\n    }\n    static get displayName() {\n        return 'IonTabButton';\n    }\n})();\n\nclass IonTabBarUnwrapped extends react.PureComponent {\n    constructor(props) {\n        super(props);\n        this.setActiveTabOnContext = (_tab) => { };\n        const tabs = {};\n        react.Children.forEach(props.children, (child) => {\n            var _a, _b, _c, _d;\n            if (child != null &&\n                typeof child === 'object' &&\n                child.props &&\n                (child.type === index_esm_IonTabButton || child.type.isTabButton)) {\n                tabs[child.props.tab] = {\n                    originalHref: child.props.href,\n                    currentHref: child.props.href,\n                    originalRouteOptions: child.props.href === ((_a = props.routeInfo) === null || _a === void 0 ? void 0 : _a.pathname)\n                        ? (_b = props.routeInfo) === null || _b === void 0 ? void 0 : _b.routeOptions : undefined,\n                    currentRouteOptions: child.props.href === ((_c = props.routeInfo) === null || _c === void 0 ? void 0 : _c.pathname)\n                        ? (_d = props.routeInfo) === null || _d === void 0 ? void 0 : _d.routeOptions : undefined,\n                };\n            }\n        });\n        this.state = {\n            tabs,\n        };\n        this.onTabButtonClick = this.onTabButtonClick.bind(this);\n        this.renderTabButton = this.renderTabButton.bind(this);\n        this.setActiveTabOnContext = this.setActiveTabOnContext.bind(this);\n        this.selectTab = this.selectTab.bind(this);\n    }\n    componentDidMount() {\n        const tabs = this.state.tabs;\n        const tabKeys = Object.keys(tabs);\n        const activeTab = tabKeys.find((key) => {\n            const href = tabs[key].originalHref;\n            return this.props.routeInfo.pathname.startsWith(href);\n        });\n        if (activeTab) {\n            this.setState({\n                activeTab,\n            });\n        }\n    }\n    componentDidUpdate() {\n        if (this.state.activeTab) {\n            this.setActiveTabOnContext(this.state.activeTab);\n        }\n    }\n    selectTab(tab) {\n        const tabUrl = this.state.tabs[tab];\n        if (tabUrl) {\n            this.onTabButtonClick(new CustomEvent('ionTabButtonClick', {\n                detail: {\n                    href: tabUrl.currentHref,\n                    tab,\n                    selected: tab === this.state.activeTab,\n                    routeOptions: undefined,\n                },\n            }));\n            return true;\n        }\n        return false;\n    }\n    static getDerivedStateFromProps(props, state) {\n        var _a, _b, _c;\n        const tabs = Object.assign({}, state.tabs);\n        const tabKeys = Object.keys(state.tabs);\n        const activeTab = tabKeys.find((key) => {\n            const href = state.tabs[key].originalHref;\n            return props.routeInfo.pathname.startsWith(href);\n        });\n        // Check to see if the tab button href has changed, and if so, update it in the tabs state\n        react.Children.forEach(props.children, (child) => {\n            if (child != null &&\n                typeof child === 'object' &&\n                child.props &&\n                (child.type === index_esm_IonTabButton || child.type.isTabButton)) {\n                const tab = tabs[child.props.tab];\n                if (!tab || tab.originalHref !== child.props.href) {\n                    tabs[child.props.tab] = {\n                        originalHref: child.props.href,\n                        currentHref: child.props.href,\n                        originalRouteOptions: child.props.routeOptions,\n                        currentRouteOptions: child.props.routeOptions,\n                    };\n                }\n            }\n        });\n        const { activeTab: prevActiveTab } = state;\n        if (activeTab && prevActiveTab) {\n            const prevHref = state.tabs[prevActiveTab].currentHref;\n            const prevRouteOptions = state.tabs[prevActiveTab].currentRouteOptions;\n            if (activeTab !== prevActiveTab ||\n                prevHref !== ((_a = props.routeInfo) === null || _a === void 0 ? void 0 : _a.pathname) ||\n                prevRouteOptions !== ((_b = props.routeInfo) === null || _b === void 0 ? void 0 : _b.routeOptions)) {\n                tabs[activeTab] = {\n                    originalHref: tabs[activeTab].originalHref,\n                    currentHref: props.routeInfo.pathname + (props.routeInfo.search || ''),\n                    originalRouteOptions: tabs[activeTab].originalRouteOptions,\n                    currentRouteOptions: (_c = props.routeInfo) === null || _c === void 0 ? void 0 : _c.routeOptions,\n                };\n                if (props.routeInfo.routeAction === 'pop' && activeTab !== prevActiveTab) {\n                    // If navigating back and the tabs change, set the prev tab back to its original href\n                    tabs[prevActiveTab] = {\n                        originalHref: tabs[prevActiveTab].originalHref,\n                        currentHref: tabs[prevActiveTab].originalHref,\n                        originalRouteOptions: tabs[prevActiveTab].originalRouteOptions,\n                        currentRouteOptions: tabs[prevActiveTab].currentRouteOptions,\n                    };\n                }\n            }\n        }\n        activeTab && props.onSetCurrentTab(activeTab, props.routeInfo);\n        return {\n            activeTab,\n            tabs,\n        };\n    }\n    onTabButtonClick(e) {\n        const tappedTab = this.state.tabs[e.detail.tab];\n        const originalHref = tappedTab.originalHref;\n        const currentHref = e.detail.href;\n        const { activeTab: prevActiveTab } = this.state;\n        // this.props.onSetCurrentTab(e.detail.tab, this.props.routeInfo);\n        // Clicking the current tab will bring you back to the original href\n        if (prevActiveTab === e.detail.tab) {\n            if (originalHref !== currentHref) {\n                this.context.resetTab(e.detail.tab, originalHref, tappedTab.originalRouteOptions);\n            }\n        }\n        else {\n            if (this.props.onIonTabsWillChange) {\n                this.props.onIonTabsWillChange(new CustomEvent('ionTabWillChange', { detail: { tab: e.detail.tab } }));\n            }\n            if (this.props.onIonTabsDidChange) {\n                this.props.onIonTabsDidChange(new CustomEvent('ionTabDidChange', { detail: { tab: e.detail.tab } }));\n            }\n            this.setActiveTabOnContext(e.detail.tab);\n            this.context.changeTab(e.detail.tab, currentHref, e.detail.routeOptions);\n        }\n    }\n    renderTabButton(activeTab) {\n        return (child) => {\n            var _a, _b;\n            if (child != null &&\n                child.props &&\n                (child.type === index_esm_IonTabButton || child.type.isTabButton)) {\n                const href = child.props.tab === activeTab\n                    ? (_a = this.props.routeInfo) === null || _a === void 0 ? void 0 : _a.pathname : this.state.tabs[child.props.tab].currentHref;\n                const routeOptions = child.props.tab === activeTab\n                    ? (_b = this.props.routeInfo) === null || _b === void 0 ? void 0 : _b.routeOptions : this.state.tabs[child.props.tab].currentRouteOptions;\n                return react.cloneElement(child, {\n                    href,\n                    routeOptions,\n                    onClick: this.onTabButtonClick,\n                });\n            }\n            return null;\n        };\n    }\n    render() {\n        const { activeTab } = this.state;\n        return (react.createElement(IonTabBarInner, Object.assign({}, this.props, { selectedTab: activeTab }), react.Children.map(this.props.children, this.renderTabButton(activeTab))));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\nconst IonTabBarContainer = react.memo((_a) => {\n    var { forwardedRef } = _a, props = (0,tslib_es6/* __rest */._T)(_a, [\"forwardedRef\"]);\n    const context = (0,react.useContext)(NavContext);\n    return (react.createElement(IonTabBarUnwrapped, Object.assign({ ref: forwardedRef }, props, { routeInfo: props.routeInfo || context.routeInfo || { pathname: window.location.pathname }, onSetCurrentTab: context.setCurrentTab }), props.children));\n});\nconst index_esm_IonTabBar = createForwardRef(IonTabBarContainer, 'IonTabBar');\n\nclass IonTabsElement extends HTMLElementSSR {\n    constructor() {\n        super();\n    }\n}\nif (typeof window !== 'undefined' && window.customElements) {\n    const element = window.customElements.get('ion-tabs');\n    if (!element) {\n        window.customElements.define('ion-tabs', IonTabsElement);\n    }\n}\nconst hostStyles = {\n    display: 'flex',\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    right: '0',\n    bottom: '0',\n    flexDirection: 'column',\n    width: '100%',\n    height: '100%',\n    contain: 'layout size style',\n};\nconst tabsInner = {\n    position: 'relative',\n    flex: 1,\n    contain: 'layout size style',\n};\nconst IonTabs = /*@__PURE__*/ (/* unused pure expression or super */ null && ((() => class extends React.Component {\n    constructor(props) {\n        super(props);\n        this.routerOutletRef = React.createRef();\n        this.tabBarRef = React.createRef();\n        this.ionTabContextState = {\n            activeTab: undefined,\n            selectTab: () => false,\n        };\n    }\n    componentDidMount() {\n        if (this.tabBarRef.current) {\n            // Grab initial value\n            this.ionTabContextState.activeTab = this.tabBarRef.current.state.activeTab;\n            // Override method\n            this.tabBarRef.current.setActiveTabOnContext = (tab) => {\n                this.ionTabContextState.activeTab = tab;\n            };\n            this.ionTabContextState.selectTab = this.tabBarRef.current.selectTab;\n        }\n    }\n    render() {\n        let outlet;\n        let tabBar;\n        const _a = this.props, { className, onIonTabsDidChange, onIonTabsWillChange } = _a, props = __rest(_a, [\"className\", \"onIonTabsDidChange\", \"onIonTabsWillChange\"]);\n        const children = typeof this.props.children === 'function'\n            ? this.props.children(this.ionTabContextState)\n            : this.props.children;\n        React.Children.forEach(children, (child) => {\n            if (child == null || typeof child !== 'object' || !child.hasOwnProperty('type')) {\n                return;\n            }\n            if (child.type === index_esm_IonRouterOutlet || child.type.isRouterOutlet) {\n                outlet = React.cloneElement(child);\n            }\n            else if (child.type === Fragment && child.props.children[0].type === index_esm_IonRouterOutlet) {\n                outlet = child.props.children[0];\n            }\n            let childProps = {\n                ref: this.tabBarRef\n            };\n            /**\n             * Only pass these props\n             * down from IonTabs to IonTabBar\n             * if they are defined, otherwise\n             * if you have a handler set on\n             * IonTabBar it will be overridden.\n             */\n            if (onIonTabsDidChange !== undefined) {\n                childProps = Object.assign(Object.assign({}, childProps), { onIonTabsDidChange });\n            }\n            if (onIonTabsWillChange !== undefined) {\n                childProps = Object.assign(Object.assign({}, childProps), { onIonTabsWillChange });\n            }\n            if (child.type === index_esm_IonTabBar || child.type.isTabBar) {\n                tabBar = React.cloneElement(child, childProps);\n            }\n            else if (child.type === Fragment &&\n                (child.props.children[1].type === index_esm_IonTabBar || child.props.children[1].type.isTabBar)) {\n                tabBar = React.cloneElement(child.props.children[1], childProps);\n            }\n        });\n        if (!outlet) {\n            throw new Error('IonTabs must contain an IonRouterOutlet');\n        }\n        if (!tabBar) {\n            throw new Error('IonTabs needs a IonTabBar');\n        }\n        return (React.createElement(IonTabsContext.Provider, { value: this.ionTabContextState }, this.context.hasIonicRouter() ? (React.createElement(PageManager, Object.assign({ className: className ? `${className}` : '', routeInfo: this.context.routeInfo }, props),\n            React.createElement(\"ion-tabs\", { className: \"ion-tabs\", style: hostStyles },\n                tabBar.props.slot === 'top' ? tabBar : null,\n                React.createElement(\"div\", { style: tabsInner, className: \"tabs-inner\" }, outlet),\n                tabBar.props.slot === 'bottom' ? tabBar : null))) : (React.createElement(\"div\", Object.assign({ className: className ? `${className}` : 'ion-tabs' }, props, { style: hostStyles }),\n            tabBar.props.slot === 'top' ? tabBar : null,\n            React.createElement(\"div\", { style: tabsInner, className: \"tabs-inner\" }, outlet),\n            tabBar.props.slot === 'bottom' ? tabBar : null))));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n})()));\n\nconst IonBackButton = /*@__PURE__*/ (/* unused pure expression or super */ null && ((() => class extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.clickButton = (e) => {\n            const { defaultHref, routerAnimation } = this.props;\n            if (this.context.hasIonicRouter()) {\n                e.stopPropagation();\n                this.context.goBack(defaultHref, routerAnimation);\n            }\n            else if (defaultHref !== undefined) {\n                window.location.href = defaultHref;\n            }\n        };\n    }\n    render() {\n        return React.createElement(IonBackButtonInner, Object.assign({ onClick: this.clickButton }, this.props));\n    }\n    static get displayName() {\n        return 'IonBackButton';\n    }\n    static get contextType() {\n        return NavContext;\n    }\n})()));\n\nclass IonIconContainer extends react.PureComponent {\n    constructor(props) {\n        super(props);\n        if (this.props.name) {\n            console.warn('In Ionic React, you import icons from \"ionicons/icons\" and set the icon you imported to the \"icon\" property. Setting the \"name\" property has no effect.');\n        }\n    }\n    render() {\n        var _a, _b;\n        const _c = this.props, { icon, ios, md } = _c, rest = (0,tslib_es6/* __rest */._T)(_c, [\"icon\", \"ios\", \"md\"]);\n        let iconToUse;\n        if (ios || md) {\n            if (index_esm_isPlatform('ios')) {\n                iconToUse = (_a = ios !== null && ios !== void 0 ? ios : md) !== null && _a !== void 0 ? _a : icon;\n            }\n            else {\n                iconToUse = (_b = md !== null && md !== void 0 ? md : ios) !== null && _b !== void 0 ? _b : icon;\n            }\n        }\n        else {\n            iconToUse = icon;\n        }\n        return (react.createElement(IonIconInner, Object.assign({ ref: this.props.forwardedRef, icon: iconToUse }, rest), this.props.children));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\nconst index_esm_IonIcon = createForwardRef(IonIconContainer, 'IonIcon');\n\nclass IonRoute extends react.PureComponent {\n    render() {\n        const IonRouteInner = this.context.getIonRoute();\n        if (!this.context.hasIonicRouter() || !IonRoute) {\n            console.error('You either do not have an Ionic Router package, or your router does not support using <IonRoute>');\n            return null;\n        }\n        return React.createElement(IonRouteInner, Object.assign({}, this.props));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\n\nclass IonRedirect extends react.PureComponent {\n    render() {\n        const IonRedirectInner = this.context.getIonRedirect();\n        if (!this.context.hasIonicRouter() || !IonRedirect) {\n            console.error('You either do not have an Ionic Router package, or your router does not support using <IonRedirect>');\n            return null;\n        }\n        return React.createElement(IonRedirectInner, Object.assign({}, this.props));\n    }\n    static get contextType() {\n        return NavContext;\n    }\n}\n\nconst IonRouterContext = react.createContext({\n    routeInfo: undefined,\n    push: () => {\n        throw new Error('An Ionic Router is required for IonRouterContext');\n    },\n    back: () => {\n        throw new Error('An Ionic Router is required for IonRouterContext');\n    },\n    canGoBack: () => {\n        throw new Error('An Ionic Router is required for IonRouterContext');\n    },\n    nativeBack: () => {\n        throw new Error('An Ionic Router is required for IonRouterContext');\n    },\n});\n/**\n * A hook for more direct control over routing in an Ionic React application. Allows you to pass additional meta-data to the router before the call to the native router.\n */\nfunction useIonRouter() {\n    const context = useContext(IonRouterContext);\n    return {\n        back: context.back,\n        push: context.push,\n        goBack: context.back,\n        canGoBack: context.canGoBack,\n        routeInfo: context.routeInfo,\n    };\n}\n\nclass CreateAnimation extends react.PureComponent {\n    constructor(props) {\n        super(props);\n        this.nodes = new Map();\n        this.animation = createAnimation(props.id);\n    }\n    setupAnimation(props) {\n        const animation = this.animation;\n        if (this.nodes.size > 0) {\n            animation.addElement(Array.from(this.nodes.values()));\n        }\n        checkConfig(animation, props);\n        checkPlayback(animation, props);\n    }\n    componentDidMount() {\n        const props = this.props;\n        this.setupAnimation(props);\n    }\n    componentDidUpdate(prevProps) {\n        const animation = this.animation;\n        const props = this.props;\n        checkConfig(animation, props, prevProps);\n        checkProgress(animation, props, prevProps);\n        checkPlayback(animation, props, prevProps);\n    }\n    render() {\n        const { children } = this.props;\n        return (React.createElement(React.Fragment, null, React.Children.map(children, (child, id) => React.cloneElement(child, { ref: (el) => this.nodes.set(id, el) }))));\n    }\n}\nconst checkConfig = (animation, currentProps = {}, prevProps = {}) => {\n    const reservedProps = [\n        'children',\n        'progressStart',\n        'progressStep',\n        'progressEnd',\n        'pause',\n        'stop',\n        'destroy',\n        'play',\n        'from',\n        'to',\n        'fromTo',\n        'onFinish',\n    ];\n    for (const key in currentProps) {\n        if (currentProps.hasOwnProperty(key) &&\n            !reservedProps.includes(key) &&\n            currentProps[key] !== prevProps[key]) {\n            animation[key](currentProps[key]);\n        }\n    }\n    const fromValues = currentProps.from;\n    if (fromValues && fromValues !== prevProps.from) {\n        const values = Array.isArray(fromValues) ? fromValues : [fromValues];\n        values.forEach((val) => animation.from(val.property, val.value));\n    }\n    const toValues = currentProps.to;\n    if (toValues && toValues !== prevProps.to) {\n        const values = Array.isArray(toValues) ? toValues : [toValues];\n        values.forEach((val) => animation.to(val.property, val.value));\n    }\n    const fromToValues = currentProps.fromTo;\n    if (fromToValues && fromToValues !== prevProps.fromTo) {\n        const values = Array.isArray(fromToValues) ? fromToValues : [fromToValues];\n        values.forEach((val) => animation.fromTo(val.property, val.fromValue, val.toValue));\n    }\n    const onFinishValues = currentProps.onFinish;\n    if (onFinishValues && onFinishValues !== prevProps.onFinish) {\n        const values = Array.isArray(onFinishValues) ? onFinishValues : [onFinishValues];\n        values.forEach((val) => animation.onFinish(val.callback, val.opts));\n    }\n};\nconst checkProgress = (animation, currentProps = {}, prevProps = {}) => {\n    var _a, _b, _c, _d, _e;\n    const { progressStart, progressStep, progressEnd } = currentProps;\n    if (progressStart &&\n        (((_a = prevProps.progressStart) === null || _a === void 0 ? void 0 : _a.forceLinearEasing) !== (progressStart === null || progressStart === void 0 ? void 0 : progressStart.forceLinearEasing) ||\n            ((_b = prevProps.progressStart) === null || _b === void 0 ? void 0 : _b.step) !== (progressStart === null || progressStart === void 0 ? void 0 : progressStart.step))) {\n        animation.progressStart(progressStart.forceLinearEasing, progressStart.step);\n    }\n    if (progressStep && ((_c = prevProps.progressStep) === null || _c === void 0 ? void 0 : _c.step) !== (progressStep === null || progressStep === void 0 ? void 0 : progressStep.step)) {\n        animation.progressStep(progressStep.step);\n    }\n    if (progressEnd &&\n        (((_d = prevProps.progressEnd) === null || _d === void 0 ? void 0 : _d.playTo) !== (progressEnd === null || progressEnd === void 0 ? void 0 : progressEnd.playTo) ||\n            ((_e = prevProps.progressEnd) === null || _e === void 0 ? void 0 : _e.step) !== (progressEnd === null || progressEnd === void 0 ? void 0 : progressEnd.step) ||\n            (prevProps === null || prevProps === void 0 ? void 0 : prevProps.dur) !== (progressEnd === null || progressEnd === void 0 ? void 0 : progressEnd.dur))) {\n        animation.progressEnd(progressEnd.playTo, progressEnd.step, progressEnd.dur);\n    }\n};\nconst checkPlayback = (animation, currentProps = {}, prevProps = {}) => {\n    if (!prevProps.play && currentProps.play) {\n        animation.play();\n    }\n    if (!prevProps.pause && currentProps.pause) {\n        animation.pause();\n    }\n    if (!prevProps.stop && currentProps.stop) {\n        animation.stop();\n    }\n    if (!prevProps.destroy && currentProps.destroy) {\n        animation.destroy();\n    }\n};\n\nfunction useController(displayName, controller, defineCustomElement) {\n    const overlayRef = useRef();\n    const didDismissEventName = useMemo(() => `on${displayName}DidDismiss`, [displayName]);\n    const didPresentEventName = useMemo(() => `on${displayName}DidPresent`, [displayName]);\n    const willDismissEventName = useMemo(() => `on${displayName}WillDismiss`, [displayName]);\n    const willPresentEventName = useMemo(() => `on${displayName}WillPresent`, [displayName]);\n    defineCustomElement();\n    const present = useCallback(async (options) => {\n        if (overlayRef.current) {\n            return;\n        }\n        const { onDidDismiss, onWillDismiss, onDidPresent, onWillPresent } = options, rest = __rest(options, [\"onDidDismiss\", \"onWillDismiss\", \"onDidPresent\", \"onWillPresent\"]);\n        const handleDismiss = (event) => {\n            if (onDidDismiss) {\n                onDidDismiss(event);\n            }\n            overlayRef.current = undefined;\n        };\n        overlayRef.current = await controller.create(Object.assign({}, rest));\n        attachProps(overlayRef.current, {\n            [didDismissEventName]: handleDismiss,\n            [didPresentEventName]: (e) => onDidPresent && onDidPresent(e),\n            [willDismissEventName]: (e) => onWillDismiss && onWillDismiss(e),\n            [willPresentEventName]: (e) => onWillPresent && onWillPresent(e),\n        });\n        overlayRef.current.present();\n    }, [controller]);\n    const dismiss = useCallback(async () => {\n        overlayRef.current && (await overlayRef.current.dismiss());\n        overlayRef.current = undefined;\n    }, []);\n    return {\n        present,\n        dismiss,\n    };\n}\n\n/**\n * A hook for presenting/dismissing an IonActionSheet component\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonActionSheet() {\n    const controller = useController('IonActionSheet', actionSheetController$1, defineCustomElement$13);\n    const present = useCallback((buttonsOrOptions, header) => {\n        if (Array.isArray(buttonsOrOptions)) {\n            return controller.present({\n                buttons: buttonsOrOptions,\n                header,\n            });\n        }\n        else {\n            return controller.present(buttonsOrOptions);\n        }\n    }, [controller.present]);\n    return [present, controller.dismiss];\n}\n\n/**\n * A hook for presenting/dismissing an IonAlert component\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonAlert() {\n    const controller = useController('IonAlert', alertController, defineCustomElement$1c);\n    const present = useCallback((messageOrOptions, buttons) => {\n        if (typeof messageOrOptions === 'string') {\n            return controller.present({\n                message: messageOrOptions,\n                buttons: buttons !== null && buttons !== void 0 ? buttons : [{ text: 'Ok' }],\n            });\n        }\n        else {\n            return controller.present(messageOrOptions);\n        }\n    }, [controller.present]);\n    return [present, controller.dismiss];\n}\n\n/**\n * A hook for presenting/dismissing an IonToast component\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonToast() {\n    const controller = useController('IonToast', toastController$1, defineCustomElement$1d);\n    const present = useCallback((messageOrOptions, duration) => {\n        if (typeof messageOrOptions === 'string') {\n            return controller.present({\n                message: messageOrOptions,\n                duration\n            });\n        }\n        else {\n            return controller.present(messageOrOptions);\n        }\n    }, [controller.present]);\n    return [\n        present,\n        controller.dismiss\n    ];\n}\n\nconst ids = { main: 0 };\nconst generateId = (type = 'main') => {\n    var _a;\n    const id = ((_a = ids[type]) !== null && _a !== void 0 ? _a : 0) + 1;\n    ids[type] = id;\n    return id.toString();\n};\n\nfunction useOverlay(displayName, controller, defineCustomElement, component, componentProps) {\n    const overlayRef = useRef();\n    const containerElRef = useRef();\n    const didDismissEventName = useMemo(() => `on${displayName}DidDismiss`, [displayName]);\n    const didPresentEventName = useMemo(() => `on${displayName}DidPresent`, [displayName]);\n    const willDismissEventName = useMemo(() => `on${displayName}WillDismiss`, [displayName]);\n    const willPresentEventName = useMemo(() => `on${displayName}WillPresent`, [displayName]);\n    const [isOpen, setIsOpen] = useState(false);\n    const ionContext = useContext(IonContext);\n    const [overlayId] = useState(generateId('overlay'));\n    defineCustomElement();\n    useEffect(() => {\n        if (isOpen && component && containerElRef.current) {\n            if (React.isValidElement(component)) {\n                ionContext.addOverlay(overlayId, component, containerElRef.current);\n            }\n            else {\n                const element = createElement(component, componentProps);\n                ionContext.addOverlay(overlayId, element, containerElRef.current);\n            }\n        }\n    }, [component, containerElRef.current, isOpen, componentProps]);\n    const present = useCallback(async (options) => {\n        if (overlayRef.current) {\n            return;\n        }\n        const { onDidDismiss, onWillDismiss, onDidPresent, onWillPresent } = options, rest = __rest(options, [\"onDidDismiss\", \"onWillDismiss\", \"onDidPresent\", \"onWillPresent\"]);\n        if (typeof document !== 'undefined') {\n            containerElRef.current = document.createElement('div');\n        }\n        overlayRef.current = await controller.create(Object.assign(Object.assign({}, rest), { component: containerElRef.current }));\n        attachProps(overlayRef.current, {\n            [didDismissEventName]: handleDismiss,\n            [didPresentEventName]: (e) => onDidPresent && onDidPresent(e),\n            [willDismissEventName]: (e) => onWillDismiss && onWillDismiss(e),\n            [willPresentEventName]: (e) => onWillPresent && onWillPresent(e),\n        });\n        overlayRef.current.present();\n        setIsOpen(true);\n        function handleDismiss(event) {\n            if (onDidDismiss) {\n                onDidDismiss(event);\n            }\n            overlayRef.current = undefined;\n            containerElRef.current = undefined;\n            setIsOpen(false);\n            ionContext.removeOverlay(overlayId);\n        }\n    }, []);\n    const dismiss = useCallback(async () => {\n        overlayRef.current && (await overlayRef.current.dismiss());\n        overlayRef.current = undefined;\n        containerElRef.current = undefined;\n    }, []);\n    return {\n        present,\n        dismiss,\n    };\n}\n\n/**\n * A hook for presenting/dismissing an IonModal component\n * @param component The component that the modal will show. Can be a React Component, a functional component, or a JSX Element\n * @param componentProps The props that will be passed to the component, if required\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonModal(component, componentProps) {\n    const controller = useOverlay('IonModal', modalController, defineCustomElement$14, component, componentProps);\n    const present = useCallback((options = {}) => {\n        controller.present(options);\n    }, [controller.present]);\n    return [present, controller.dismiss];\n}\n\n/**\n * A hook for presenting/dismissing an IonPicker component\n * @param component The component that the popover will show. Can be a React Component, a functional component, or a JSX Element\n * @param componentProps The props that will be passed to the component, if required\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonPopover(component, componentProps) {\n    const controller = useOverlay('IonPopover', popoverController, defineCustomElement$15, component, componentProps);\n    const present = useCallback((options = {}) => {\n        controller.present(options);\n    }, [controller.present]);\n    return [\n        present,\n        controller.dismiss\n    ];\n}\n\n/**\n * A hook for presenting/dismissing an IonPicker component\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonPicker() {\n    const controller = useController('IonPicker', pickerController, defineCustomElement$1e);\n    const present = useCallback((columnsOrOptions, buttons) => {\n        if (Array.isArray(columnsOrOptions)) {\n            return controller.present({\n                columns: columnsOrOptions,\n                buttons: buttons !== null && buttons !== void 0 ? buttons : [{ text: 'Ok' }],\n            });\n        }\n        else {\n            return controller.present(columnsOrOptions);\n        }\n    }, [controller.present]);\n    return [present, controller.dismiss];\n}\n\n/**\n * A hook for presenting/dismissing an IonLoading component\n * @returns Returns the present and dismiss methods in an array\n */\nfunction useIonLoading() {\n    const controller = useController('IonLoading', loadingController, defineCustomElement$1f);\n    const present = useCallback((messageOrOptions = '', duration, spinner) => {\n        if (typeof messageOrOptions === 'string') {\n            return controller.present({\n                message: messageOrOptions,\n                duration,\n                spinner: spinner !== null && spinner !== void 0 ? spinner : 'lines',\n            });\n        }\n        else {\n            return controller.present(messageOrOptions);\n        }\n    }, [controller.present]);\n    return [present, controller.dismiss];\n}\n\nconst setupIonicReact = (config = {}) => {\n    /**\n     * By default Ionic Framework hides elements that\n     * are not hydrated, but in the CE build there is no\n     * hydration.\n     * TODO: Remove when all integrations have been\n     * migrated to CE build.\n     */\n    if (typeof document !== 'undefined') {\n        document.documentElement.classList.add('ion-ce');\n    }\n    initialize(Object.assign({}, config));\n};\n\nconst RouteManagerContext = /*@__PURE__*/ react.createContext({\n    addViewItem: () => undefined,\n    canGoBack: () => undefined,\n    clearOutlet: () => undefined,\n    createViewItem: () => undefined,\n    findViewItemByPathname: () => undefined,\n    findLeavingViewItemByRouteInfo: () => undefined,\n    findViewItemByRouteInfo: () => undefined,\n    getChildrenToRender: () => undefined,\n    goBack: () => undefined,\n    unMountViewItem: () => undefined,\n});\n\nclass ViewLifeCycleManager extends react.Component {\n    constructor(props) {\n        super(props);\n        this.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n        this._isMounted = false;\n        this.ionLifeCycleContext.onComponentCanBeDestroyed(() => {\n            if (!this.props.mount) {\n                if (this._isMounted) {\n                    this.setState({\n                        show: false,\n                    }, () => this.props.removeView());\n                }\n            }\n        });\n        this.state = {\n            show: true,\n        };\n    }\n    componentDidMount() {\n        this._isMounted = true;\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    render() {\n        const { show } = this.state;\n        return (React.createElement(IonLifeCycleContext.Provider, { value: this.ionLifeCycleContext }, show && this.props.children));\n    }\n}\n\n// const RESTRICT_SIZE = 100;\nclass LocationHistory {\n    constructor() {\n        this.locationHistory = [];\n        this.tabHistory = {};\n    }\n    add(routeInfo) {\n        if (routeInfo.routeAction === 'push' || routeInfo.routeAction == null) {\n            this._add(routeInfo);\n        }\n        else if (routeInfo.routeAction === 'pop') {\n            this._pop(routeInfo);\n        }\n        else if (routeInfo.routeAction === 'replace') {\n            this._replace(routeInfo);\n        }\n        if (routeInfo.routeDirection === 'root') {\n            this._clear();\n            this._add(routeInfo);\n        }\n    }\n    clearTabStack(tab) {\n        const routeInfos = this._getRouteInfosByKey(tab);\n        if (routeInfos) {\n            routeInfos.forEach((ri) => {\n                this.locationHistory = this.locationHistory.filter((x) => x.id !== ri.id);\n            });\n            this.tabHistory[tab] = [];\n        }\n    }\n    update(routeInfo) {\n        const locationIndex = this.locationHistory.findIndex((x) => x.id === routeInfo.id);\n        if (locationIndex > -1) {\n            this.locationHistory.splice(locationIndex, 1, routeInfo);\n        }\n        const tabArray = this.tabHistory[routeInfo.tab || ''];\n        if (tabArray) {\n            const tabIndex = tabArray.findIndex((x) => x.id === routeInfo.id);\n            if (tabIndex > -1) {\n                tabArray.splice(tabIndex, 1, routeInfo);\n            }\n            else {\n                tabArray.push(routeInfo);\n            }\n        }\n        else if (routeInfo.tab) {\n            this.tabHistory[routeInfo.tab] = [routeInfo];\n        }\n    }\n    _add(routeInfo) {\n        const routeInfos = this._getRouteInfosByKey(routeInfo.tab);\n        if (routeInfos) {\n            // If the latest routeInfo is the same (going back and forth between tabs), replace it\n            if (this._areRoutesEqual(routeInfos[routeInfos.length - 1], routeInfo)) {\n                routeInfos.pop();\n            }\n            routeInfos.push(routeInfo);\n        }\n        this.locationHistory.push(routeInfo);\n    }\n    _areRoutesEqual(route1, route2) {\n        if (!route1 || !route2) {\n            return false;\n        }\n        return route1.pathname === route2.pathname && route1.search === route2.search;\n    }\n    _pop(routeInfo) {\n        const routeInfos = this._getRouteInfosByKey(routeInfo.tab);\n        if (routeInfos) {\n            // Pop the previous route\n            routeInfos.pop();\n            // Replace the current route with an updated version\n            routeInfos.pop();\n            routeInfos.push(routeInfo);\n        }\n        // Pop the previous route\n        this.locationHistory.pop();\n        // Replace the current route with an updated version\n        this.locationHistory.pop();\n        this.locationHistory.push(routeInfo);\n    }\n    _replace(routeInfo) {\n        const routeInfos = this._getRouteInfosByKey(routeInfo.tab);\n        routeInfos && routeInfos.pop();\n        this.locationHistory.pop();\n        this._add(routeInfo);\n    }\n    _clear() {\n        const keys = Object.keys(this.tabHistory);\n        keys.forEach((k) => (this.tabHistory[k] = []));\n        this.locationHistory = [];\n    }\n    _getRouteInfosByKey(key) {\n        let routeInfos;\n        if (key) {\n            routeInfos = this.tabHistory[key];\n            if (!routeInfos) {\n                routeInfos = this.tabHistory[key] = [];\n            }\n        }\n        return routeInfos;\n    }\n    getFirstRouteInfoForTab(tab) {\n        const routeInfos = this._getRouteInfosByKey(tab);\n        if (routeInfos) {\n            return routeInfos[0];\n        }\n        return undefined;\n    }\n    getCurrentRouteInfoForTab(tab) {\n        const routeInfos = this._getRouteInfosByKey(tab);\n        if (routeInfos) {\n            return routeInfos[routeInfos.length - 1];\n        }\n        return undefined;\n    }\n    findLastLocation(routeInfo) {\n        const routeInfos = this._getRouteInfosByKey(routeInfo.tab);\n        if (routeInfos) {\n            for (let i = routeInfos.length - 2; i >= 0; i--) {\n                const ri = routeInfos[i];\n                if (ri) {\n                    if (ri.pathname === routeInfo.pushedByRoute) {\n                        return ri;\n                    }\n                }\n            }\n        }\n        for (let i = this.locationHistory.length - 2; i >= 0; i--) {\n            const ri = this.locationHistory[i];\n            if (ri) {\n                if (ri.pathname === routeInfo.pushedByRoute) {\n                    return ri;\n                }\n            }\n        }\n        return undefined;\n    }\n    previous() {\n        return (this.locationHistory[this.locationHistory.length - 2] ||\n            this.locationHistory[this.locationHistory.length - 1]);\n    }\n    current() {\n        return this.locationHistory[this.locationHistory.length - 1];\n    }\n    canGoBack() {\n        return this.locationHistory.length > 1;\n    }\n}\n\nclass NavManager extends react.PureComponent {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.ionRouterContextValue = {\n            push: (pathname, routerDirection, routeAction, routerOptions, animationBuilder) => {\n                this.navigate(pathname, routerDirection, routeAction, animationBuilder, routerOptions);\n            },\n            back: (animationBuilder) => {\n                this.goBack(undefined, animationBuilder);\n            },\n            canGoBack: () => this.props.locationHistory.canGoBack(),\n            nativeBack: () => this.props.onNativeBack(),\n            routeInfo: this.props.routeInfo,\n        };\n        this.state = {\n            goBack: this.goBack.bind(this),\n            hasIonicRouter: () => true,\n            navigate: this.navigate.bind(this),\n            getIonRedirect: this.getIonRedirect.bind(this),\n            getIonRoute: this.getIonRoute.bind(this),\n            getStackManager: this.getStackManager.bind(this),\n            getPageManager: this.getPageManager.bind(this),\n            routeInfo: this.props.routeInfo,\n            setCurrentTab: this.props.onSetCurrentTab,\n            changeTab: this.props.onChangeTab,\n            resetTab: this.props.onResetTab,\n        };\n        if (typeof document !== 'undefined') {\n            this.handleHardwareBackButton = this.handleHardwareBackButton.bind(this);\n            document.addEventListener('ionBackButton', this.handleHardwareBackButton);\n        }\n    }\n    componentDidMount() {\n        this._isMounted = true;\n    }\n    componentWillUnmount() {\n        if (typeof document !== 'undefined') {\n            document.removeEventListener('ionBackButton', this.handleHardwareBackButton);\n            this._isMounted = false;\n        }\n    }\n    handleHardwareBackButton(e) {\n        e.detail.register(0, (processNextHandler) => {\n            if (this._isMounted) {\n                this.nativeGoBack();\n                processNextHandler();\n            }\n        });\n    }\n    goBack(route, animationBuilder) {\n        this.props.onNavigateBack(route, animationBuilder);\n    }\n    nativeGoBack() {\n        this.props.onNativeBack();\n    }\n    navigate(path, direction = 'forward', action = 'push', animationBuilder, options, tab) {\n        this.props.onNavigate(path, action, direction, animationBuilder, options, tab);\n    }\n    getPageManager() {\n        return PageManager;\n    }\n    getIonRedirect() {\n        return this.props.ionRedirect;\n    }\n    getIonRoute() {\n        return this.props.ionRoute;\n    }\n    getStackManager() {\n        return this.props.stackManager;\n    }\n    render() {\n        return (React.createElement(NavContext.Provider, { value: Object.assign(Object.assign({}, this.state), { routeInfo: this.props.routeInfo }) },\n            React.createElement(IonRouterContext.Provider, { value: Object.assign(Object.assign({}, this.ionRouterContextValue), { routeInfo: this.props.routeInfo }) }, this.props.children)));\n    }\n}\n\nclass ViewStacks {\n    constructor() {\n        this.viewStacks = {};\n        this.add = this.add.bind(this);\n        this.clear = this.clear.bind(this);\n        this.getViewItemsForOutlet = this.getViewItemsForOutlet.bind(this);\n        this.remove = this.remove.bind(this);\n    }\n    add(viewItem) {\n        const { outletId } = viewItem;\n        if (!this.viewStacks[outletId]) {\n            this.viewStacks[outletId] = [viewItem];\n        }\n        else {\n            this.viewStacks[outletId].push(viewItem);\n        }\n    }\n    clear(outletId) {\n        // Give some time for the leaving views to transition before removing\n        setTimeout(() => {\n            // console.log('Removing viewstack for outletID ' + outletId);\n            delete this.viewStacks[outletId];\n        }, 500);\n    }\n    getViewItemsForOutlet(outletId) {\n        return this.viewStacks[outletId] || [];\n    }\n    remove(viewItem) {\n        const { outletId } = viewItem;\n        const viewStack = this.viewStacks[outletId];\n        if (viewStack) {\n            const viewItemToRemove = viewStack.find((x) => x.id === viewItem.id);\n            if (viewItemToRemove) {\n                viewItemToRemove.mount = false;\n                this.viewStacks[outletId] = viewStack.filter((x) => x.id !== viewItemToRemove.id);\n            }\n        }\n    }\n    getStackIds() {\n        return Object.keys(this.viewStacks);\n    }\n    getAllViewItems() {\n        const keys = this.getStackIds();\n        const viewItems = [];\n        keys.forEach((k) => {\n            viewItems.push(...this.viewStacks[k]);\n        });\n        return viewItems;\n    }\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75087\n")},18463:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export styles */\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87462);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45987);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(86010);\n/* harmony import */ var _Paper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79895);\n/* harmony import */ var _styles_withStyles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14670);\n\n\n\n\n\n\n\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: \'hidden\'\n  }\n};\nvar Card = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(props, ["classes", "className", "raised"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Paper__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({\n    className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\n false ? 0 : void 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_styles_withStyles__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(styles, {\n  name: \'MuiCard\'\n})(Card));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0NjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwRDtBQUNnQztBQUMzRDtBQUNJO0FBQ1g7QUFDSztBQUNpQjtBQUN2QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkNBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx1R0FBd0I7O0FBRXRDLHNCQUFzQixnREFBbUIsQ0FBQyx1REFBSyxFQUFFLHVGQUFRO0FBQ3pELGVBQWUseURBQUk7QUFDbkI7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsTUFBcUMsR0FBRyxDQTBCdkMsQ0FBQztBQUNGLGlFQUFlLHVFQUFVO0FBQ3pCO0FBQ0EsQ0FBQyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGVudC1taXMtbW9iaWxlLWFwcC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZC9DYXJkLmpzP2RmNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn07XG52YXIgQ2FyZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkcmFpc2VkID0gcHJvcHMucmFpc2VkLFxuICAgICAgcmFpc2VkID0gX3Byb3BzJHJhaXNlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmFpc2VkLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJyYWlzZWRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogMSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjYXJkIHdpbGwgdXNlIHJhaXNlZCBzdHlsaW5nLlxuICAgKi9cbiAgcmFpc2VkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkJ1xufSkoQ2FyZCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18463\n')},51907:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export styles */\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87462);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45987);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86010);\n/* harmony import */ var _styles_withStyles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14670);\n\n\n\n\n\n\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: \'flex\',\n    alignItems: \'center\',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    \'& > :not(:first-child)\': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(props, ["disableSpacing", "classes", "className"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)({\n    className: (0,clsx__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\n false ? 0 : void 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(styles, {\n  name: \'MuiCardActions\'\n})(CardActions));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE5MDcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBEO0FBQ2dDO0FBQzNEO0FBQ0k7QUFDWDtBQUNzQjtBQUN2QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILDREQUE0RCxNQUFNO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw2Q0FBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHVHQUF3Qjs7QUFFdEMsc0JBQXNCLGdEQUFtQixRQUFRLHVGQUFRO0FBQ3pELGVBQWUseURBQUk7QUFDbkI7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELE1BQXFDLEdBQUcsQ0EwQnZDLENBQUM7QUFDRixpRUFBZSx1RUFBVTtBQUN6QjtBQUNBLENBQUMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRBY3Rpb25zL0NhcmRBY3Rpb25zLmpzP2EzODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVTcGFjaW5nPXtmYWxzZX1gLiAqL1xuICBzcGFjaW5nOiB7XG4gICAgJyYgPiA6bm90KDpmaXJzdC1jaGlsZCknOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbnMocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGRpc2FibGVTcGFjaW5nID0gcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgICBkaXNhYmxlU3BhY2luZyA9IF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNwYWNpbmcsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlU3BhY2luZ1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCAhZGlzYWJsZVNwYWNpbmcgJiYgY2xhc3Nlcy5zcGFjaW5nKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICovXG4gIGRpc2FibGVTcGFjaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQWN0aW9ucydcbn0pKENhcmRBY3Rpb25zKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51907\n')},79912:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export styles */\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87462);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45987);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86010);\n/* harmony import */ var _styles_withStyles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14670);\n\n\n\n\n\n\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    \'&:last-child\': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? \'div\' : _props$component,\n      other = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(props, ["classes", "className", "component"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)({\n    className: (0,clsx__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(classes.root, className),\n    ref: ref\n  }, other));\n});\n false ? 0 : void 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(styles, {\n  name: \'MuiCardContent\'\n})(CardContent));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk5MTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBEO0FBQ2dDO0FBQzNEO0FBQ0k7QUFDWDtBQUNzQjtBQUN2QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkNBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx1R0FBd0I7O0FBRXRDLHNCQUFzQixnREFBbUIsWUFBWSx1RkFBUTtBQUM3RCxlQUFlLHlEQUFJO0FBQ25CO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxNQUFxQyxHQUFHLENBNkJ2QyxDQUFDO0FBQ0YsaUVBQWUsdUVBQVU7QUFDekI7QUFDQSxDQUFDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkZW50LW1pcy1tb2JpbGUtYXBwLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkQ29udGVudC9DYXJkQ29udGVudC5qcz9hMWFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgcGFkZGluZzogMTYsXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IDI0XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbn0pKENhcmRDb250ZW50KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///79912\n')},951:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export styles */\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87462);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45987);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86010);\n/* harmony import */ var _styles_withStyles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14670);\n\n\n\n\n\n\n\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: \'block\',\n    backgroundSize: \'cover\',\n    backgroundRepeat: \'no-repeat\',\n    backgroundPosition: \'center\'\n  },\n\n  /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */\n  media: {\n    width: \'100%\'\n  },\n\n  /* Styles applied to the root element if `component="picture or img"`. */\n  img: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: \'cover\'\n  }\n};\nvar MEDIA_COMPONENTS = [\'video\', \'audio\', \'picture\', \'iframe\', \'img\'];\nvar CardMedia = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CardMedia(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? \'div\' : _props$component,\n      image = props.image,\n      src = props.src,\n      style = props.style,\n      other = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(props, ["children", "classes", "className", "component", "image", "src", "style"]);\n\n  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;\n  var composedStyle = !isMediaComponent && image ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)({\n    backgroundImage: "url(\\"".concat(image, "\\")")\n  }, style) : style;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)({\n    className: (0,clsx__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(classes.root, className, isMediaComponent && classes.media, "picture img".indexOf(Component) !== -1 && classes.img),\n    ref: ref,\n    style: composedStyle,\n    src: isMediaComponent ? image || src : undefined\n  }, other), children);\n});\n false ? 0 : void 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(styles, {\n  name: \'MuiCardMedia\'\n})(CardMedia));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRDtBQUNnQztBQUMzRDtBQUNJO0FBQ1g7QUFDc0I7QUFDTTtBQUM3QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw2Q0FBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUdBQXdCOztBQUV0QztBQUNBLG1EQUFtRCx1RkFBUTtBQUMzRDtBQUNBLEdBQUc7QUFDSCxzQkFBc0IsZ0RBQW1CLFlBQVksdUZBQVE7QUFDN0QsZUFBZSx5REFBSTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELE1BQXFDLEdBQUcsQ0FzRHZDLENBQUM7QUFDRixpRUFBZSx1RUFBVTtBQUN6QjtBQUNBLENBQUMsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRNZWRpYS9DYXJkTWVkaWEuanM/MjFlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBvbmVudD1cInZpZGVvLCBhdWRpbywgcGljdHVyZSwgaWZyYW1lLCBvciBpbWdcImAuICovXG4gIG1lZGlhOiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBvbmVudD1cInBpY3R1cmUgb3IgaW1nXCJgLiAqL1xuICBpbWc6IHtcbiAgICAvLyDimqDvuI8gb2JqZWN0LWZpdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFIDExLlxuICAgIG9iamVjdEZpdDogJ2NvdmVyJ1xuICB9XG59O1xudmFyIE1FRElBX0NPTVBPTkVOVFMgPSBbJ3ZpZGVvJywgJ2F1ZGlvJywgJ3BpY3R1cmUnLCAnaWZyYW1lJywgJ2ltZyddO1xudmFyIENhcmRNZWRpYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRNZWRpYShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW1hZ2UgPSBwcm9wcy5pbWFnZSxcbiAgICAgIHNyYyA9IHByb3BzLnNyYyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaW1hZ2VcIiwgXCJzcmNcIiwgXCJzdHlsZVwiXSk7XG5cbiAgdmFyIGlzTWVkaWFDb21wb25lbnQgPSBNRURJQV9DT01QT05FTlRTLmluZGV4T2YoQ29tcG9uZW50KSAhPT0gLTE7XG4gIHZhciBjb21wb3NlZFN0eWxlID0gIWlzTWVkaWFDb21wb25lbnQgJiYgaW1hZ2UgPyBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcXFwiXCIuY29uY2F0KGltYWdlLCBcIlxcXCIpXCIpXG4gIH0sIHN0eWxlKSA6IHN0eWxlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBpc01lZGlhQ29tcG9uZW50ICYmIGNsYXNzZXMubWVkaWEsIFwicGljdHVyZSBpbWdcIi5pbmRleE9mKENvbXBvbmVudCkgIT09IC0xICYmIGNsYXNzZXMuaW1nKSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogY29tcG9zZWRTdHlsZSxcbiAgICBzcmM6IGlzTWVkaWFDb21wb25lbnQgPyBpbWFnZSB8fCBzcmMgOiB1bmRlZmluZWRcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRNZWRpYS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAoIXByb3BzLmNoaWxkcmVuICYmICFwcm9wcy5pbWFnZSAmJiAhcHJvcHMuc3JjICYmICFwcm9wcy5jb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBFaXRoZXIgYGNoaWxkcmVuYCwgYGltYWdlYCwgYHNyY2Agb3IgYGNvbXBvbmVudGAgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSW1hZ2UgdG8gYmUgZGlzcGxheWVkIGFzIGEgYmFja2dyb3VuZCBpbWFnZS5cbiAgICogRWl0aGVyIGBpbWFnZWAgb3IgYHNyY2AgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC5cbiAgICogTm90ZSB0aGF0IGNhbGxlciBtdXN0IHNwZWNpZnkgaGVpZ2h0IG90aGVyd2lzZSB0aGUgaW1hZ2Ugd2lsbCBub3QgYmUgdmlzaWJsZS5cbiAgICovXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbiBhbGlhcyBmb3IgYGltYWdlYCBwcm9wZXJ0eS5cbiAgICogQXZhaWxhYmxlIG9ubHkgd2l0aCBtZWRpYSBjb21wb25lbnRzLlxuICAgKiBNZWRpYSBjb21wb25lbnRzOiBgdmlkZW9gLCBgYXVkaW9gLCBgcGljdHVyZWAsIGBpZnJhbWVgLCBgaW1nYC5cbiAgICovXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZE1lZGlhJ1xufSkoQ2FyZE1lZGlhKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///951\n')},59460:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n\nvar _interopRequireDefault = __webpack_require__(95318);\n\nvar _interopRequireWildcard = __webpack_require__(20862);\n\n__webpack_unused_export__ = ({\n  value: true\n});\nexports.Z = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(67294));\n\nvar _createSvgIcon = _interopRequireDefault(__webpack_require__(2108));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement("path", {\n  d: "M17.5 4.5c-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .65.73.45.75.45C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.41.21.75-.19.75-.45V6c-1.49-1.12-3.63-1.5-5.5-1.5zm3.5 14c-1.1-.35-2.3-.5-3.5-.5-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5 1.2 0 2.4.15 3.5.5v11.5z"\n}), \'ImportContacts\');\n\nexports.Z = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk0NjAuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLEtBQThDOztBQUVuRiw4QkFBOEIsbUJBQU8sQ0FBQyxLQUErQzs7QUFFckYsNkJBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxDQUFDO0FBQ0YsU0FBZTs7QUFFZixvQ0FBb0MsbUJBQU8sQ0FBQyxLQUFPOztBQUVuRCw0Q0FBNEMsbUJBQU8sQ0FBQyxJQUF1Qjs7QUFFM0U7QUFDQTtBQUNBLENBQUM7O0FBRUQsU0FBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0ltcG9ydENvbnRhY3RzLmpzPzcwMzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE3LjUgNC41Yy0xLjk1IDAtNC4wNS40LTUuNSAxLjUtMS40NS0xLjEtMy41NS0xLjUtNS41LTEuNVMyLjQ1IDQuOSAxIDZ2MTQuNjVjMCAuNjUuNzMuNDUuNzUuNDVDMy4xIDIwLjQ1IDUuMDUgMjAgNi41IDIwYzEuOTUgMCA0LjA1LjQgNS41IDEuNSAxLjM1LS44NSAzLjgtMS41IDUuNS0xLjUgMS42NSAwIDMuMzUuMyA0Ljc1IDEuMDUuNDEuMjEuNzUtLjE5Ljc1LS40NVY2Yy0xLjQ5LTEuMTItMy42My0xLjUtNS41LTEuNXptMy41IDE0Yy0xLjEtLjM1LTIuMy0uNS0zLjUtLjUtMS43IDAtNC4xNS42NS01LjUgMS41VjhjMS4zNS0uODUgMy44LTEuNSA1LjUtMS41IDEuMiAwIDIuNC4xNSAzLjUuNXYxMS41elwiXG59KSwgJ0ltcG9ydENvbnRhY3RzJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59460\n')},76990:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n\nvar _interopRequireDefault = __webpack_require__(95318);\n\nvar _interopRequireWildcard = __webpack_require__(20862);\n\n__webpack_unused_export__ = ({\n  value: true\n});\nexports.Z = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(67294));\n\nvar _createSvgIcon = _interopRequireDefault(__webpack_require__(2108));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement("path", {\n  d: "M7.58 4.08L6.15 2.65C3.75 4.48 2.17 7.3 2.03 10.5h2c.15-2.65 1.51-4.97 3.55-6.42zm12.39 6.42h2c-.15-3.2-1.73-6.02-4.12-7.85l-1.42 1.43c2.02 1.45 3.39 3.77 3.54 6.42zM18 11c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2v-5zm-6 11c.14 0 .27-.01.4-.04.65-.14 1.18-.58 1.44-1.18.1-.24.15-.5.15-.78h-4c.01 1.1.9 2 2.01 2z"\n}), \'NotificationsActive\');\n\nexports.Z = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY5OTAuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLEtBQThDOztBQUVuRiw4QkFBOEIsbUJBQU8sQ0FBQyxLQUErQzs7QUFFckYsNkJBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxDQUFDO0FBQ0YsU0FBZTs7QUFFZixvQ0FBb0MsbUJBQU8sQ0FBQyxLQUFPOztBQUVuRCw0Q0FBNEMsbUJBQU8sQ0FBQyxJQUF1Qjs7QUFFM0U7QUFDQTtBQUNBLENBQUM7O0FBRUQsU0FBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtbWlzLW1vYmlsZS1hcHAvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL05vdGlmaWNhdGlvbnNBY3RpdmUuanM/ZGRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNy41OCA0LjA4TDYuMTUgMi42NUMzLjc1IDQuNDggMi4xNyA3LjMgMi4wMyAxMC41aDJjLjE1LTIuNjUgMS41MS00Ljk3IDMuNTUtNi40MnptMTIuMzkgNi40MmgyYy0uMTUtMy4yLTEuNzMtNi4wMi00LjEyLTcuODVsLTEuNDIgMS40M2MyLjAyIDEuNDUgMy4zOSAzLjc3IDMuNTQgNi40MnpNMTggMTFjMC0zLjA3LTEuNjQtNS42NC00LjUtNi4zMlY0YzAtLjgzLS42Ny0xLjUtMS41LTEuNXMtMS41LjY3LTEuNSAxLjV2LjY4QzcuNjMgNS4zNiA2IDcuOTIgNiAxMXY1bC0yIDJ2MWgxNnYtMWwtMi0ydi01em0tNiAxMWMuMTQgMCAuMjctLjAxLjQtLjA0LjY1LS4xNCAxLjE4LS41OCAxLjQ0LTEuMTguMS0uMjQuMTUtLjUuMTUtLjc4aC00Yy4wMSAxLjEuOSAyIDIuMDEgMnpcIlxufSksICdOb3RpZmljYXRpb25zQWN0aXZlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76990\n')},77210:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z5\": () => (/* binding */ Build),\n  \"mv\": () => (/* binding */ H),\n  \"AA\": () => (/* binding */ Host),\n  \"yM\": () => (/* binding */ createEvent),\n  \"iJ\": () => (/* binding */ getMode),\n  \"h\": () => (/* binding */ h),\n  \"GH\": () => (/* binding */ proxyCustomElement),\n  \"wj\": () => (/* binding */ readTask),\n  \"Iu\": () => (/* binding */ writeTask)\n});\n\n// UNUSED EXPORTS: BUILD, CSS, Context, Env, Fragment, H, NAMESPACE, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getRenderingRef, getValue, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win\n\n;// CONCATENATED MODULE: ./node_modules/@stencil/core/internal/app-data/index.js\nconst app_data_BUILD = {\n    allRenderFn: false,\n    cmpDidLoad: true,\n    cmpDidUnload: false,\n    cmpDidUpdate: true,\n    cmpDidRender: true,\n    cmpWillLoad: true,\n    cmpWillUpdate: true,\n    cmpWillRender: true,\n    connectedCallback: true,\n    disconnectedCallback: true,\n    element: true,\n    event: true,\n    hasRenderFn: true,\n    lifecycle: true,\n    hostListener: true,\n    hostListenerTargetWindow: true,\n    hostListenerTargetDocument: true,\n    hostListenerTargetBody: true,\n    hostListenerTargetParent: false,\n    hostListenerTarget: true,\n    member: true,\n    method: true,\n    mode: true,\n    observeAttribute: true,\n    prop: true,\n    propMutable: true,\n    reflect: true,\n    scoped: true,\n    shadowDom: true,\n    slot: true,\n    cssAnnotations: true,\n    state: true,\n    style: true,\n    svg: true,\n    updatable: true,\n    vdomAttribute: true,\n    vdomXlink: true,\n    vdomClass: true,\n    vdomFunctional: true,\n    vdomKey: true,\n    vdomListener: true,\n    vdomRef: true,\n    vdomPropOrAttr: true,\n    vdomRender: true,\n    vdomStyle: true,\n    vdomText: true,\n    watchCallback: true,\n    taskQueue: true,\n    hotModuleReplacement: false,\n    isDebug: false,\n    isDev: false,\n    isTesting: false,\n    hydrateServerSide: false,\n    hydrateClientSide: false,\n    lifecycleDOMEvents: false,\n    lazyLoad: false,\n    profile: false,\n    slotRelocation: true,\n    appendChildSlotFix: false,\n    cloneNodeFix: false,\n    hydratedAttribute: false,\n    hydratedClass: true,\n    safari10: false,\n    scriptDataOpts: false,\n    scopedSlotTextContentFix: false,\n    shadowDomShim: false,\n    slotChildNodesFix: false,\n    invisiblePrehydration: true,\n    propBoolean: true,\n    propNumber: true,\n    propString: true,\n    cssVarShim: false,\n    constructableCSS: true,\n    cmpShouldUpdate: true,\n    devTools: false,\n    dynamicImportShim: false,\n    shadowDelegatesFocus: true,\n    initializeNextTick: false,\n    asyncLoading: false,\n    asyncQueue: false,\n    transformTagName: false,\n    attachStyles: true,\n};\nconst Env = {};\nconst NAMESPACE = /* default */ 'app';\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@stencil/core/internal/client/index.js\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.14.2 | MIT Licensed | https://stenciljs.com\n */\n\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = app_data_BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = app_data_BUILD.shadowDomShim && app_data_BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = app_data_BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (app_data_BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (app_data_BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = app_data_BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (app_data_BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (app_data_BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */)\n        return doc;\n    if (app_data_BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */)\n        return win;\n    if (app_data_BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */)\n        return doc.body;\n    if (app_data_BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* Passive */) !== 0,\n        capture: (flags & 2 /* Capture */) !== 0,\n    })\n    : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    if (app_data_BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (app_data_BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */),\n            hasConnected: !!(flags & 1 /* hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* isWatchReady */),\n            isListenReady: !!(flags & 256 /* isListenReady */),\n            needsRerender: !!(flags & 512 /* needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    if (!app_data_BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (app_data_BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (app_data_BUILD.hydrateServerSide || app_data_BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (app_data_BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(app_data_BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((app_data_BUILD.shadowDom || app_data_BUILD.scoped) && app_data_BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (app_data_BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (app_data_BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (app_data_BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (app_data_BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (app_data_BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (app_data_BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (app_data_BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (app_data_BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (app_data_BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (app_data_BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (app_data_BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (app_data_BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (app_data_BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (app_data_BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (app_data_BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (app_data_BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (app_data_BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!app_data_BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!app_data_BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (app_data_BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (app_data_BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (app_data_BUILD.vdomListener &&\n            (app_data_BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (app_data_BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (app_data_BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (app_data_BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (app_data_BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (app_data_BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (app_data_BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (app_data_BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (app_data_BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (app_data_BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            app_data_BUILD.isDebug || app_data_BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (app_data_BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (app_data_BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, app_data_BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(app_data_BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (app_data_BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (app_data_BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((app_data_BUILD.shadowDom || app_data_BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (app_data_BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (app_data_BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((app_data_BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (app_data_BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, app_data_BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (app_data_BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (app_data_BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (app_data_BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (app_data_BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (app_data_BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (app_data_BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (app_data_BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (app_data_BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (app_data_BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!app_data_BUILD.vdomText || text === null) {\n        if (app_data_BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        if (app_data_BUILD.vdomAttribute || app_data_BUILD.reflect) {\n            if (app_data_BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (app_data_BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (app_data_BUILD.updatable && app_data_BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (app_data_BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (app_data_BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (app_data_BUILD.vdomText && app_data_BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (app_data_BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (app_data_BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (app_data_BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (app_data_BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (app_data_BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (app_data_BUILD.scoped || app_data_BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (app_data_BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (app_data_BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        app_data_BUILD.isDebug || app_data_BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref) => (app_data_BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (app_data_BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (app_data_BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (app_data_BUILD.taskQueue && app_data_BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (app_data_BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return app_data_BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (app_data_BUILD.lazyLoad && app_data_BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (app_data_BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (app_data_BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (app_data_BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (app_data_BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (app_data_BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    if (app_data_BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (app_data_BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    if (app_data_BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (app_data_BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (app_data_BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = app_data_BUILD.allRenderFn ? true : false;\n    const lazyLoad = app_data_BUILD.lazyLoad ? true : false;\n    const taskQueue = app_data_BUILD.taskQueue ? true : false;\n    const updatable = app_data_BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        if (app_data_BUILD.hasRenderFn || app_data_BUILD.reflect) {\n            if (app_data_BUILD.vdomRender || app_data_BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (app_data_BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (app_data_BUILD.cmpDidRender) {\n        if (app_data_BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (app_data_BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        if (app_data_BUILD.asyncLoading && app_data_BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (app_data_BUILD.cmpDidLoad) {\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (app_data_BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (app_data_BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (app_data_BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (app_data_BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (app_data_BUILD.method && app_data_BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (app_data_BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (app_data_BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (app_data_BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (app_data_BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (app_data_BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => app_data_BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : app_data_BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = app_data_BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (app_data_BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (app_data_BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (app_data_BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (app_data_BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (app_data_BUILD.propBoolean && propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (app_data_BUILD.propNumber && propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (app_data_BUILD.propString && propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = app_data_BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!app_data_BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (app_data_BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!app_data_BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (app_data_BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (app_data_BUILD.updatable &&\n                (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                if (app_data_BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (app_data_BUILD.member && cmpMeta.$members$) {\n        if (app_data_BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((app_data_BUILD.prop || app_data_BUILD.state) &&\n                (memberFlags & 31 /* Prop */ ||\n                    ((!app_data_BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (app_data_BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (app_data_BUILD.lazyLoad &&\n                app_data_BUILD.method &&\n                flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (app_data_BUILD.observeAttribute && (!app_data_BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    \x3c!-- this component has _not_ been upgraded yet --\x3e\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    <\/script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (app_data_BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((app_data_BUILD.lazyLoad || app_data_BUILD.hydrateServerSide || app_data_BUILD.style) &&\n        (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        if (app_data_BUILD.lazyLoad || app_data_BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((app_data_BUILD.isDev || app_data_BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (app_data_BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (app_data_BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (app_data_BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (app_data_BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            if (app_data_BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* isWatchReady */));\n        }\n        if (app_data_BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (app_data_BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (app_data_BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!app_data_BUILD.hydrateServerSide &&\n                    app_data_BUILD.shadowDom &&\n                    app_data_BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                    style = await __webpack_require__.e(/* import() */ 576).then(__webpack_require__.bind(__webpack_require__, 20576)).then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (app_data_BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (app_data_BUILD.lazyLoad && app_data_BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (app_data_BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            if (app_data_BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (app_data_BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = app_data_BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (app_data_BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (app_data_BUILD.hydrateServerSide ||\n                    ((app_data_BUILD.slot || app_data_BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (app_data_BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((app_data_BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (app_data_BUILD.prop && !app_data_BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (app_data_BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(app_data_BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = app_data_BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (app_data_BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (app_data_BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (app_data_BUILD.lazyLoad && app_data_BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (app_data_BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (app_data_BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (app_data_BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (app_data_BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (app_data_BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (app_data_BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (app_data_BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (app_data_BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (app_data_BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            let stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (app_data_BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (app_data_BUILD.method && app_data_BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (app_data_BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = app_data_BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (app_data_BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !app_data_BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    return __webpack_require__(41993)(`./${bundleId}.entry.js${app_data_BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!app_data_BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (app_data_BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (app_data_BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: app_data_BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: app_data_BUILD.isTesting ? true : false,\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77210\n")},70655:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ZT": () => (/* binding */ __extends),\n/* harmony export */   "_T": () => (/* binding */ __rest),\n/* harmony export */   "mG": () => (/* binding */ __awaiter),\n/* harmony export */   "Jh": () => (/* binding */ __generator),\n/* harmony export */   "ev": () => (/* binding */ __spreadArray)\n/* harmony export */ });\n/* unused harmony exports __assign, __decorate, __param, __metadata, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== "function" && b !== null)\r\n        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\r\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === "m") throw new TypeError("Private method is not writable");\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\r\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///70655\n')}}]);